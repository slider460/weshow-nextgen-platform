#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —á–µ—Ä–µ–∑ Supabase
async function executeSQL(sqlQuery) {
  try {
    console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è—é: ${sqlQuery.substring(0, 50)}...`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º rpc –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
    const { data, error } = await supabase.rpc('exec_sql', { query: sqlQuery });
    
    if (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${error.message}`);
      return false;
    }
    
    console.log('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è RLS
async function disableRLS() {
  console.log('üîß –û—Ç–∫–ª—é—á–∞—é RLS –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...');
  
  const tables = [
    'users', 'estimates', 'estimate_items', 'equipment_catalog', 
    'equipment_categories', 'cases', 'logos', 'articles', 
    'article_categories', 'blog_posts', 'news', 'newsletter_subscribers',
    'quote_templates', 'quotes', 'services_blocks', 'user_profiles',
    'homepage_equipment', 'images'
  ];
  
  for (const table of tables) {
    const sql = `ALTER TABLE ${table} DISABLE ROW LEVEL SECURITY;`;
    await executeSQL(sql);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫
async function dropPolicies() {
  console.log('üóëÔ∏è  –£–¥–∞–ª—è—é –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
  
  const tables = [
    'users', 'estimates', 'estimate_items', 'equipment_catalog', 
    'equipment_categories', 'cases', 'logos', 'articles', 
    'article_categories', 'blog_posts', 'news', 'newsletter_subscribers',
    'quote_templates', 'quotes', 'services_blocks', 'user_profiles',
    'homepage_equipment', 'images'
  ];
  
  const policies = [
    'Enable read access for all users',
    'Enable insert for authenticated users only',
    'Enable update for authenticated users only',
    'Enable delete for authenticated users only',
    'Allow public read access',
    'Allow anonymous read access',
    'Allow authenticated full access'
  ];
  
  for (const table of tables) {
    for (const policy of policies) {
      const sql = `DROP POLICY IF EXISTS "${policy}" ON ${table};`;
      await executeSQL(sql);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async function checkResult() {
  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('count')
      .limit(1);
      
    if (!usersError) {
      console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ users: OK');
    }
    
    const { data: estimates, error: estimatesError } = await supabase
      .from('estimates')
      .select('count')
      .limit(1);
      
    if (!estimatesError) {
      console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ estimates: OK');
    }
    
    const { data: equipment, error: equipmentError } = await supabase
      .from('equipment_catalog')
      .select('count')
      .limit(1);
      
    if (!equipmentError) {
      console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ equipment_catalog: OK');
    }
    
  } catch (error) {
    console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function fixAdminPanel() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç...');
    console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${supabaseUrl}`);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º RLS
    await disableRLS();
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏
    await dropPolicies();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await checkResult();
    
    console.log('\nüéâ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
    console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü');
    console.log('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã');
    console.log('‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏!');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
fixAdminPanel();
