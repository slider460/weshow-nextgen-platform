#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
async function checkTableStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_profiles...');
  
  try {
    const { data, error } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(1);
      
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ user_profiles: ${error.message}`);
      return false;
    } else {
      console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ user_profiles: OK`);
      if (data && data.length > 0) {
        console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏:`, Object.keys(data[0]));
      }
      return true;
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
async function createCorrectTable() {
  console.log('üîß –°–æ–∑–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_profiles...');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    const { data: existingData, error: existingError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(1);
      
    if (existingError && existingError.message.includes('does not exist')) {
      console.log('üìù –¢–∞–±–ª–∏—Ü–∞ user_profiles –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—é...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ RPC (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      const { data: createResult, error: createError } = await supabase.rpc('exec_sql', {
        query: `
          CREATE TABLE IF NOT EXISTS user_profiles (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
            full_name TEXT,
            role TEXT DEFAULT 'user',
            avatar_url TEXT,
            phone TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );
        `
      });
      
      if (createError) {
        console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ RPC: ${createError.message}`);
        console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard');
      } else {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_profiles —Å–æ–∑–¥–∞–Ω–∞');
      }
      
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_profiles —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ user_id
      const { data: testData, error: testError } = await supabase
        .from('user_profiles')
        .select('user_id')
        .limit(1);
        
      if (testError && testError.message.includes('user_id')) {
        console.log('üîß –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É user_id...');
        
        const { data: alterResult, error: alterError } = await supabase.rpc('exec_sql', {
          query: `
            ALTER TABLE user_profiles 
            ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;
          `
        });
        
        if (alterError) {
          console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É —á–µ—Ä–µ–∑ RPC: ${alterError.message}`);
          console.log('üí° –î–æ–±–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω–∫—É –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard');
        } else {
          console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ user_id –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        }
      } else {
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ user_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function createAdminProfile() {
  console.log('üëë –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const { data: adminUser, error: adminError } = await supabase
      .from('users')
      .select('id')
      .eq('email', 'admin@weshow.ru')
      .single();
      
    if (adminError) {
      console.log(`‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${adminError.message}`);
      return;
    }
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: ${adminUser.id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
    const { data: existingProfile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', adminUser.id)
      .single();
      
    if (profileError && profileError.message.includes('No rows')) {
      console.log('üìù –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
      
      const { data: newProfile, error: createError } = await supabase
        .from('user_profiles')
        .insert({
          user_id: adminUser.id,
          full_name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          role: 'admin',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single();
        
      if (createError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${createError.message}`);
      } else {
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω: ${newProfile.id}`);
      }
      
    } else if (existingProfile) {
      console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingProfile.id}`);
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è RLS
async function disableRLS() {
  console.log('üîì –û—Ç–∫–ª—é—á–∞—é RLS –¥–ª—è user_profiles...');
  
  try {
    const { data, error } = await supabase.rpc('exec_sql', {
      query: 'ALTER TABLE user_profiles DISABLE ROW LEVEL SECURITY;'
    });
    
    if (error) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å RLS —á–µ—Ä–µ–∑ RPC: ${error.message}`);
      console.log('üí° –û—Ç–∫–ª—é—á–∏—Ç–µ RLS –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard');
    } else {
      console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è user_profiles');
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
async function finalTest() {
  console.log('\nüß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Ö–æ–¥–∞...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(1);
      
    if (profileError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é: ${profileError.message}`);
    } else {
      console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é: OK (${profile?.length || 0} –∑–∞–ø–∏—Å–µ–π)`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
    const authClient = createClient(supabaseUrl, supabaseServiceKey);
    const { data: authData, error: authError } = await authClient.auth.signInWithPassword({
      email: 'admin@weshow.ru',
      password: 'password'
    });
    
    if (authError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${authError.message}`);
    } else {
      console.log(`‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω: ${authData.user?.email}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      const { data: userProfile, error: userProfileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', authData.user?.id)
        .single();
        
      if (userProfileError) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userProfileError.message}`);
      } else {
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω: ${userProfile.full_name}`);
      }
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function fixUserProfiles() {
  console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã user_profiles...\n');
  
  await checkTableStructure();
  await createCorrectTable();
  await createAdminProfile();
  await disableRLS();
  await finalTest();
  
  console.log('\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
  console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
  console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω');
  console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω');
  console.log('\nüöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞!');
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixUserProfiles();


