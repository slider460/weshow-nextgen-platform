// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞
const puppeteer = require('puppeteer');

async function testLocalPerformance() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞...\n');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: { width: 1920, height: 1080 }
  });
  
  try {
    const page = await browser.newPage();
    
    // –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await page.setCacheEnabled(false);
    
    console.log('üìä –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏...');
    const startTime = Date.now();
    
    // –ù–∞–≤–∏–≥–∏—Ä—É–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∞–π—Ç
    await page.goto('http://localhost:8084', { 
      waitUntil: 'networkidle0',
      timeout: 10000 
    });
    
    const loadTime = Date.now() - startTime;
    console.log(`‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${loadTime}ms`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Web Vitals
    console.log('\nüìà –ò–∑–º–µ—Ä—è–µ–º Web Vitals...');
    
    const metrics = await page.evaluate(() => {
      return new Promise((resolve) => {
        const metrics = {};
        
        // LCP
        new PerformanceObserver((list) => {
          const entries = list.getEntries();
          if (entries.length > 0) {
            const lastEntry = entries[entries.length - 1];
            metrics.lcp = lastEntry.startTime;
          }
        }).observe({ entryTypes: ['largest-contentful-paint'] });
        
        // FCP
        new PerformanceObserver((list) => {
          const entries = list.getEntries();
          if (entries.length > 0) {
            metrics.fcp = entries[0].startTime;
          }
        }).observe({ entryTypes: ['paint'] });
        
        // CLS
        let clsValue = 0;
        new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (!entry.hadRecentInput) {
              clsValue += entry.value;
            }
          }
          metrics.cls = clsValue;
        }).observe({ entryTypes: ['layout-shift'] });
        
        // TTFB
        const navigationEntry = performance.getEntriesByType('navigation')[0];
        if (navigationEntry) {
          metrics.ttfb = navigationEntry.responseStart - navigationEntry.requestStart;
        }
        
        setTimeout(() => resolve(metrics), 3000);
      });
    });
    
    console.log('üìä Web Vitals —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`  LCP (Largest Contentful Paint): ${metrics.lcp?.toFixed(2) || 'N/A'}ms`);
    console.log(`  FCP (First Contentful Paint): ${metrics.fcp?.toFixed(2) || 'N/A'}ms`);
    console.log(`  CLS (Cumulative Layout Shift): ${metrics.cls?.toFixed(4) || 'N/A'}`);
    console.log(`  TTFB (Time to First Byte): ${metrics.ttfb?.toFixed(2) || 'N/A'}ms`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é...');
    
    const navigationTests = [
      '/about',
      '/services',
      '/portfolio',
      '/contact'
    ];
    
    for (const route of navigationTests) {
      try {
        const navStartTime = Date.now();
        await page.goto(`http://localhost:8084${route}`, { 
          waitUntil: 'networkidle0',
          timeout: 5000 
        });
        const navTime = Date.now() - navStartTime;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        const title = await page.title();
        console.log(`  ‚úÖ ${route}: ${navTime}ms - "${title}"`);
      } catch (error) {
        console.log(`  ‚ùå ${route}: –û—à–∏–±–∫–∞ - ${error.message}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º React Query –∏ skeleton loaders
    console.log('\n‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º React Query –∏ skeleton loaders...');
    
    await page.goto('http://localhost:8084', { waitUntil: 'networkidle0' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ skeleton loaders
    const skeletonElements = await page.$$('.animate-pulse');
    console.log(`  üì¶ –ù–∞–π–¥–µ–Ω–æ skeleton —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${skeletonElements.length}`);
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await page.waitForTimeout(2000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ skeleton –∏—Å—á–µ–∑–ª–∏
    const remainingSkeletons = await page.$$('.animate-pulse');
    console.log(`  ‚úÖ Skeleton —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: ${remainingSkeletons.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏
    console.log('\nüö® –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏...');
    
    const consoleErrors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      }
    });
    
    await page.reload({ waitUntil: 'networkidle0' });
    await page.waitForTimeout(3000);
    
    if (consoleErrors.length === 0) {
      console.log('  ‚úÖ –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${consoleErrors.length}`);
      consoleErrors.forEach((error, index) => {
        console.log(`    ${index + 1}. ${error}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä bundle
    console.log('\nüì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã...');
    
    const resources = await page.evaluate(() => {
      const entries = performance.getEntriesByType('resource');
      const jsFiles = entries.filter(entry => entry.name.includes('.js'));
      const cssFiles = entries.filter(entry => entry.name.includes('.css'));
      
      const jsSize = jsFiles.reduce((total, file) => total + (file.transferSize || 0), 0);
      const cssSize = cssFiles.reduce((total, file) => total + (file.transferSize || 0), 0);
      
      return {
        jsFiles: jsFiles.length,
        cssFiles: cssFiles.length,
        jsSize: Math.round(jsSize / 1024), // KB
        cssSize: Math.round(cssSize / 1024), // KB
        totalSize: Math.round((jsSize + cssSize) / 1024) // KB
      };
    });
    
    console.log(`  üìÑ JS —Ñ–∞–π–ª–æ–≤: ${resources.jsFiles}`);
    console.log(`  üé® CSS —Ñ–∞–π–ª–æ–≤: ${resources.cssFiles}`);
    console.log(`  üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${resources.totalSize}KB`);
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
    
    const score = {
      loadTime: loadTime < 3000 ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ' : loadTime < 5000 ? '‚ö†Ô∏è –•–æ—Ä–æ—à–æ' : '‚ùå –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å',
      lcp: metrics.lcp && metrics.lcp < 2500 ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ' : '‚ö†Ô∏è –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å',
      fcp: metrics.fcp && metrics.fcp < 1800 ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ' : '‚ö†Ô∏è –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å',
      cls: metrics.cls && metrics.cls < 0.1 ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ' : '‚ö†Ô∏è –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å',
      errors: consoleErrors.length === 0 ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ' : '‚ö†Ô∏è –ï—Å—Ç—å –æ—à–∏–±–∫–∏'
    };
    
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${score.loadTime}`);
    console.log(`  üé® LCP: ${score.lcp}`);
    console.log(`  ‚ö° FCP: ${score.fcp}`);
    console.log(`  üìê CLS: ${score.cls}`);
    console.log(`  üö® –û—à–∏–±–∫–∏: ${score.errors}`);
    
    const excellentCount = Object.values(score).filter(s => s.includes('‚úÖ')).length;
    const totalCount = Object.keys(score).length;
    
    console.log(`\nüèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: ${excellentCount}/${totalCount} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω–µ`);
    
    if (excellentCount === totalCount) {
      console.log('üéâ –û–¢–õ–ò–ß–ù–û! –°–∞–π—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    } else if (excellentCount >= totalCount * 0.8) {
      console.log('üëç –•–û–†–û–®–û! –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
    } else {
      console.log('üîß –ï–°–¢–¨ –ß–¢–û –£–õ–£–ß–®–ò–¢–¨! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã—à–µ.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  } finally {
    await browser.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testLocalPerformance().catch(console.error);
}

module.exports = { testLocalPerformance };
