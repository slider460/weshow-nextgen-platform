import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '../config/supabase';
import { LetterCertificate, LetterCertificateInsert, LetterCertificateUpdate } from '../types/database';

// Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const getFallbackLetters = (): LetterCertificate[] => [
  {
    id: 'fallback-1',
    title: '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –¢—É—Ä–∏–∑–º–∞ –°–∞–º–∞—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏',
    issuer: '–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ç—É—Ä–∏–∑–º–∞ –°–∞–º–∞—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏',
    description: '–ó–∞ –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º, –ª–∏—á–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤—ã—Å—Ç–∞–≤–∫–∏ ¬´–°–∞–º–∞—Ä–∞¬ª',
    type: 'letter',
    issued_date: '2025-02-01',
    document_url: '/testimonials/pdf/museum-samara-thank-you.pdf',
    is_visible: true,
    sort_order: 1,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: 'fallback-2',
    title: '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –¢–†–¶ –°–∞–ª–∞—Ä–∏—Å',
    issuer: '–ê–û "–õ–ê–£–¢"',
    description: '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥–æ–¥–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
    type: 'letter',
    issued_date: '2018-04-01',
    document_url: '/testimonials/pdf/salaris-thank-you.pdf',
    is_visible: true,
    sort_order: 2,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: 'fallback-3',
    title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–¥–∞–∫—à–Ω',
    issuer: '–ü—Ä–µ–º–∏—è —Å–æ–±—ã—Ç–∏–π–Ω—ã–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ "–ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–æ—Å—Ç—å"',
    description: '1 –º–µ—Å—Ç–æ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–¥–∞–∫—à–Ω/–ø—Ä–æ–¥—é—Å–∏—Ä–æ–≤–∞–Ω–∏–µ',
    type: 'award',
    issued_date: '2024-01-01',
    document_url: '/testimonials/pdf/event-industry-award.pdf',
    is_visible: true,
    sort_order: 3,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: 'fallback-4',
    title: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
    issuer: '–ü—Ä–µ–º–∏—è —Å–æ–±—ã—Ç–∏–π–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ "–ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–æ—Å—Ç—å"',
    description: '1 –º–µ—Å—Ç–æ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
    type: 'award',
    issued_date: '2024-01-01',
    document_url: '/testimonials/pdf/technical-innovations-award.pdf',
    is_visible: true,
    sort_order: 4,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º –∏ –≥—Ä–∞–º–æ—Ç
const fetchLetters = async (): Promise<LetterCertificate[]> => {
  try {
    console.log('üîÑ fetchLetters: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –∏ –≥—Ä–∞–º–æ—Ç—ã...');

    const { data, error } = await supabase
      .from('letters_certificates')
      .select('*')
      .eq('is_visible', true)
      .order('sort_order', { ascending: true });

    if (error) {
      console.error('‚ùå fetchLetters: –û—à–∏–±–∫–∞ Supabase:', error);
      throw new Error(error.message);
    }

    console.log('‚úÖ fetchLetters: –ü–∏—Å—å–º–∞ –∏ –≥—Ä–∞–º–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
    return data || [];
  } catch (error) {
    console.error('‚ùå fetchLetters: –û—à–∏–±–∫–∞ API:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return getFallbackLetters();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∏—Å–µ–º (–≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ) –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
const fetchAllLetters = async (): Promise<LetterCertificate[]> => {
  try {
    console.log('üîÑ fetchAllLetters: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞...');

    const { data, error } = await supabase
      .from('letters_certificates')
      .select('*')
      .order('sort_order', { ascending: true });

    if (error) {
      console.error('‚ùå fetchAllLetters: –û—à–∏–±–∫–∞ Supabase:', error);
      throw new Error(error.message);
    }

    console.log('‚úÖ fetchAllLetters: –í—Å–µ –ø–∏—Å—å–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
    return data || [];
  } catch (error) {
    console.error('‚ùå fetchAllLetters: –û—à–∏–±–∫–∞ API:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return getFallbackLetters();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞
const addLetter = async (letter: LetterCertificateInsert): Promise<LetterCertificate> => {
  const { data, error } = await supabase
    .from('letters_certificates')
    .insert(letter)
    .select()
    .single();

  if (error) {
    throw new Error(error.message);
  }

  return data;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞
const updateLetter = async ({ id, updates }: { id: string; updates: LetterCertificateUpdate }): Promise<LetterCertificate> => {
  const { data, error } = await supabase
    .from('letters_certificates')
    .update(updates)
    .eq('id', id)
    .select()
    .single();

  if (error) {
    throw new Error(error.message);
  }

  return data;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞
const deleteLetter = async (id: string): Promise<void> => {
  const { error } = await supabase
    .from('letters_certificates')
    .delete()
    .eq('id', id);

  if (error) {
    throw new Error(error.message);
  }
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—É–∫–∏
export const useLettersCertificates = () => {
  return useQuery({
    queryKey: ['letters-certificates'],
    queryFn: fetchLetters,
    staleTime: 1000 * 60 * 60 * 24, // 24 hours
    cacheTime: 1000 * 60 * 60 * 24 * 7, // 7 days
    retry: 2,
    throwOnError: false,
  });
};

export const useAllLettersCertificates = () => {
  return useQuery({
    queryKey: ['letters-certificates', 'all'],
    queryFn: fetchAllLetters,
    staleTime: 1000 * 60 * 30, // 30 minutes
    cacheTime: 1000 * 60 * 60 * 2, // 2 hours
    retry: 2,
    throwOnError: false,
  });
};

export const useAddLetter = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: addLetter,
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      queryClient.invalidateQueries({ queryKey: ['letters-certificates'] });
    },
  });
};

export const useUpdateLetter = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: updateLetter,
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      queryClient.invalidateQueries({ queryKey: ['letters-certificates'] });
    },
  });
};

export const useDeleteLetter = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: deleteLetter,
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      queryClient.invalidateQueries({ queryKey: ['letters-certificates'] });
    },
  });
};
