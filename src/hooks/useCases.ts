import { useState, useEffect } from 'react';
import { supabase } from '../config/supabase';

export interface Case {
  id: string;
  title: string;
  client: string;
  year: string;
  description: string;
  results: string[];
  technologies: string[];
  image_url?: string;
  video_url?: string;
  is_visible: boolean;
  sort_order: number;
  created_at: string;
  updated_at: string;
}

export const useCases = () => {
  const [cases, setCases] = useState<Case[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    const timer = setTimeout(() => {
      fetchCases();
    }, 100);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    const timeout = setTimeout(() => {
      console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤');
      setLoading(false);
    }, 3000);

    return () => {
      clearTimeout(timer);
      clearTimeout(timeout);
    };
  }, []);

  const fetchCases = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîÑ useCases: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ–π—Å—ã —á–µ—Ä–µ–∑ REST API...');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –≤–º–µ—Å—Ç–æ Supabase –∫–ª–∏–µ–Ω—Ç–∞
      const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
      const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE';
      
      const url = `${SUPABASE_URL}/rest/v1/cases?select=*&is_visible=eq.true&order=sort_order.asc`;
      
      console.log('üîÑ useCases: –î–µ–ª–∞–µ–º REST –∑–∞–ø—Ä–æ—Å...');
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'apikey': SUPABASE_KEY,
          'Authorization': `Bearer ${SUPABASE_KEY}`,
          'Content-Type': 'application/json',
        },
      });

      console.log('üîÑ useCases: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå useCases: HTTP –æ—à–∏–±–∫–∞:', response.status, errorText);
        
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (errorText.includes('relation "public.cases" does not exist') ||
            errorText.includes('Could not find the table')) {
          console.log('üìã useCases: –¢–∞–±–ª–∏—Ü–∞ cases –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
          setCases([]);
          setError(null);
          return;
        }
        
        setError(`HTTP –æ—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
        setCases([]);
        return;
      }

      const data = await response.json();
      console.log('‚úÖ useCases: –ö–µ–π—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      console.log('‚úÖ useCases: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', data?.length || 0);
      
      setCases(data || []);
    } catch (err) {
      console.error('‚ùå useCases: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      setCases([]);
    } finally {
      setLoading(false);
    }
  };


  return {
    cases,
    loading,
    error,
    refetch: fetchCases
  };
};

export default useCases;
