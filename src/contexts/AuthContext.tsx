import React, { createContext, useContext, useEffect, useState } from 'react';
import { User as SupabaseUser } from '@supabase/supabase-js';
import { UserProfile, AuthContextType, SignUpData, SignInData, ResetPasswordData } from '../types/auth';
import { supabase } from '../config/supabase';
import { logger } from '../utils/logger';

// –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ç–∏–ø–æ–≤
type User = SupabaseUser;

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: React.ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchProfile = async (userId: string): Promise<UserProfile | null> => {
    try {
      logger.info('üì• fetchProfile called for userId:', userId);
      logger.debug('üîß Starting database query...');
      
      const startTime = Date.now();
      const result = await supabase
        .from('user_profiles')
        .select('id, full_name, company_name, phone, role, created_at, updated_at')
        .eq('id', userId)
        .maybeSingle();
      
      const duration = Date.now() - startTime;
      logger.debug(`‚è±Ô∏è Query completed in ${duration}ms`);
      logger.debug('üì¨ Response:', result);

      if (result.error) {
        logger.error('‚ùå Error fetching profile:', result.error);
        return null;
      }

      if (!result.data) {
        logger.warn('‚ùå No profile found for userId:', userId);
        return null;
      }

      logger.debug('‚úÖ Profile fetched successfully:', result.data);
      
      // –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
      const profile: UserProfile = {
        id: result.data.id,
        full_name: result.data.full_name || '',
        company_name: result.data.company_name || '',
        phone: result.data.phone || undefined,
        role: result.data.role as 'admin' | 'manager' | 'client',
        created_at: result.data.created_at,
        updated_at: result.data.updated_at
      };
      
      logger.debug('‚úÖ Profile mapped:', profile);
      return profile;
      
    } catch (error) {
      logger.error('‚ùå Exception in fetchProfile:', error);
      if (error instanceof Error) {
        logger.error('Exception message:', error.message);
        logger.error('Exception stack:', error.stack);
      }
      return null;
    }
  };

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  const signUp = async (email: string, password: string, userData: SignUpData) => {
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: userData.full_name,
            company_name: userData.company_name,
            phone: userData.phone || '',
            role: userData.role || 'client'
          }
        }
      });

      if (error) {
        throw error;
      }

      return data;
    } catch (error) {
      logger.error('Error signing up:', error);
      throw error;
    }
  };

  // –í—Ö–æ–¥
  const signIn = async (email: string, password: string) => {
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (error) {
        throw error;
      }

      return data;
    } catch (error) {
      logger.error('Error signing in:', error);
      throw error;
    }
  };

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  const signInWithGoogle = async () => {
    try {
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/profile`
        }
      });

      if (error) {
        throw error;
      }

      return data;
    } catch (error) {
      logger.error('Error signing in with Google:', error);
      throw error;
    }
  };

  // –í—ã—Ö–æ–¥
  const signOut = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        throw error;
      }
    } catch (error) {
      logger.error('Error signing out:', error);
      throw error;
    }
  };

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  const resetPassword = async (email: string) => {
    try {
      const { data, error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`
      });

      if (error) {
        throw error;
      }

      return data;
    } catch (error) {
      logger.error('Error resetting password:', error);
      throw error;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  const updateProfile = async (data: Partial<UserProfile>) => {
    if (!user) return;

    try {
      const { error } = await supabase
        .from('user_profiles')
        .update(data)
        .eq('id', user.id);

      if (error) {
        throw error;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (profile) {
        setProfile({ ...profile, ...data });
      }
    } catch (error) {
      logger.error('Error updating profile:', error);
      throw error;
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        
        if (session?.user) {
          setUser(session.user as User);
          const userProfile = await fetchProfile(session.user.id);
          setProfile(userProfile);
        }
      } catch (error) {
        logger.error('Error initializing auth:', error);
      } finally {
        setLoading(false);
      }
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const timeout = setTimeout(() => {
      setLoading(false);
    }, 3000);

    initializeAuth();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        logger.info('Auth state changed:', event, session);
        if (session?.user) {
          setUser(session.user as User);
          let userProfile = await fetchProfile(session.user.id);
          
          // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏), —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
          if (!userProfile) {
            logger.info('Profile not found, creating new profile for Google user');
            try {
              const { data, error } = await supabase
                .from('user_profiles')
                .insert({
                  id: session.user.id,
                  full_name: session.user.user_metadata?.full_name || session.user.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                  company_name: session.user.user_metadata?.company_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                  phone_number: session.user.user_metadata?.phone_number || null,
                  role: 'client'
                })
                .select()
                .single();

              if (error) {
                logger.error('Error creating profile:', error);
              } else {
                userProfile = data as UserProfile;
                logger.info('Profile created successfully:', userProfile);
              }
            } catch (error) {
              logger.error('Error creating profile:', error);
            }
          }
          
          setProfile(userProfile);
        } else {
          setUser(null);
          setProfile(null);
        }
        setLoading(false);
      }
    );

    return () => {
      clearTimeout(timeout);
      subscription.unsubscribe();
    };
  }, []);

  // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AdminLogin
  const login = async (email: string, password: string): Promise<{ success: boolean; error?: string }> => {
    try {
      logger.info('üîê Login attempt for:', email);
      
      const data = await signIn(email, password);
      logger.info('‚úÖ Login successful, data:', data);
      
      if (!data || !data.user) {
        logger.error('‚ùå No user in response');
        return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
      }
      
      logger.debug('üë§ User ID:', data.user.id);
      logger.debug('üìß User Email:', data.user.email);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      logger.debug('üì• Fetching user profile...');
      const userProfile = await fetchProfile(data.user.id);
      logger.debug('üë§ User profile loaded:', userProfile);
      
      if (!userProfile) {
        logger.error('‚ùå Profile not found for user:', data.user.id);
        logger.error('‚ùå Check if user_profiles table has entry for this user');
        return { success: false, error: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' };
      }
      
      logger.debug('üë§ Profile role:', userProfile.role);
      
      if (userProfile.role !== 'admin' && userProfile.role !== 'manager') {
        logger.error('‚ùå User role is not admin or manager:', userProfile.role);
        return { success: false, error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏' };
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setUser(data.user as User);
      setProfile(userProfile);
      logger.info('‚úÖ Login complete, user and profile set!');
      return { success: true };
      
    } catch (error) {
      logger.error('‚ùå Login error:', error);
      if (error instanceof Error) {
        logger.error('Error message:', error.message);
        logger.error('Error stack:', error.stack);
        return { success: false, error: error.message };
      }
      return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' };
    }
  };

  const value: AuthContextType = {
    user,
    profile,
    loading,
    signUp,
    signIn,
    login,
    signInWithGoogle,
    signOut,
    resetPassword,
    updateProfile
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};