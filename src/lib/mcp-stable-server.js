#!/usr/bin/env node

import { createServer } from 'http';
import { spawn } from 'child_process';

const PORT = 3005;

// ‚úÖ Context7: –°—Ç–∞–±–∏–ª—å–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
class StableMCPServer {
  constructor() {
    this.server = null;
    this.isRunning = false;
    this.restartCount = 0;
    this.maxRestarts = 10;
  }

  start() {
    if (this.isRunning) return;
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ Context7...');
    this.isRunning = true;
    
    try {
      this.server = createServer((req, res) => {
        // CORS headers
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        
        if (req.method === 'OPTIONS') {
          res.writeHead(200);
          res.end();
          return;
        }

        if (req.method === 'POST' && req.url === '/mcp') {
          let body = '';
          req.on('data', chunk => body += chunk);
          req.on('end', () => {
            try {
              const request = JSON.parse(body);
              this.handleMCPRequest(request, res);
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MCP –∑–∞–ø—Ä–æ—Å–∞:', error);
              res.writeHead(400, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ error: 'Invalid JSON' }));
            }
          });
        } else {
          res.writeHead(404);
          res.end('Not Found');
        }
      });

      this.server.listen(PORT, () => {
        console.log(`‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üåê Endpoint: http://localhost:${PORT}/mcp`);
        console.log(`üîí –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö`);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
      this.server.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error);
        this.restart();
      });

      // Graceful shutdown
      process.on('SIGINT', () => this.shutdown());
      process.on('SIGTERM', () => this.shutdown());
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
      this.restart();
    }
  }

  handleMCPRequest(request, res) {
    try {
      // ‚úÖ Context7: –û–±—Ä–∞–±–æ—Ç–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–æ–≤
      const { method, params } = request;
      
      let response;
      
      switch (method) {
        case 'tools/list':
          response = {
            jsonrpc: '2.0',
            id: request.id,
            result: {
              tools: [
                {
                  name: 'context7_optimize',
                  description: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å Context7',
                  inputSchema: {
                    type: 'object',
                    properties: {
                      component: {
                        type: 'string',
                        description: '–ü—É—Ç—å –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'
                      }
                    },
                    required: ['component']
                  }
                },
                {
                  name: 'context7_analyze',
                  description: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å Context7',
                  inputSchema: {
                    type: 'object',
                    properties: {
                      file: {
                        type: 'string',
                        description: '–§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
                      }
                    },
                    required: ['file']
                  }
                }
              ]
            }
          };
          break;
          
        case 'tools/call':
          response = {
            jsonrpc: '2.0',
            id: request.id,
            result: {
              content: [
                {
                  type: 'text',
                  text: `‚úÖ Context7: –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ${params.name}`
                }
              ]
            }
          };
          break;
          
        default:
          response = {
            jsonrpc: '2.0',
            id: request.id,
            error: {
              code: -32601,
              message: 'Method not found'
            }
          };
      }
      
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify(response));
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MCP –∑–∞–ø—Ä–æ—Å–∞:', error);
      res.writeHead(500, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ 
        jsonrpc: '2.0',
        id: request.id,
        error: { code: -32603, message: 'Internal error' }
      }));
    }
  }

  restart() {
    if (this.restartCount >= this.maxRestarts) {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤');
      process.exit(1);
    }
    
    console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${this.restartCount + 1}/${this.maxRestarts})`);
    this.restartCount++;
    
    if (this.server) {
      this.server.close();
    }
    
    setTimeout(() => {
      this.start();
    }, 1000);
  }

  shutdown() {
    console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞...');
    if (this.server) {
      this.server.close(() => {
        console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
      });
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const mcpServer = new StableMCPServer();
mcpServer.start();

// Keep alive - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
setInterval(() => {
  if (!mcpServer.isRunning) {
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
    mcpServer.start();
  }
}, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

console.log('üîí MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ');
console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');



