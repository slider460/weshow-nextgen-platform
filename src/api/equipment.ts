import { supabase } from '../config/supabase';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
interface SupabaseEquipment {
  id: string;
  name: string;
  description: string | null;
  specifications: any;
  main_image_url: string | null;
  price_per_day: number;
  category_id: string;
  stock_quantity: number;
  created_at: string;
  updated_at: string;
}

interface SupabaseCategory {
  id: string;
  name: string;
  description: string | null;
  icon_url: string | null;
  created_at: string;
  updated_at: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
export async function getEquipment(): Promise<SupabaseEquipment[]> {
  try {
    console.log('üîÑ getEquipment: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Supabase...');
    
    const { data: equipment, error } = await supabase
      .from('equipment_catalog')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå getEquipment: –û—à–∏–±–∫–∞ Supabase:', error);
      throw new Error(error.message);
    }

    console.log('‚úÖ getEquipment: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', equipment);
    console.log('‚úÖ getEquipment: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', equipment?.length || 0);

    return equipment || [];
  } catch (error) {
    console.error('‚ùå getEquipment: –û—à–∏–±–∫–∞ API:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ throw
    console.log('üîÑ getEquipment: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
    return getFallbackEquipment();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function getEquipmentByCategory(categoryId: string): Promise<SupabaseEquipment[]> {
  try {
    console.log('üîÑ getEquipmentByCategory: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    
    const { data: equipment, error } = await supabase
      .from('equipment_catalog')
      .select('*')
      .eq('category_id', categoryId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå getEquipmentByCategory: –û—à–∏–±–∫–∞ Supabase:', error);
      throw new Error(error.message);
    }

    console.log('‚úÖ getEquipmentByCategory: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', equipment);
    return equipment || [];
  } catch (error) {
    console.error('‚ùå getEquipmentByCategory: –û—à–∏–±–∫–∞ API:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
    return getFallbackEquipment().filter(item => item.category_id === categoryId);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export async function getCategories(): Promise<SupabaseCategory[]> {
  try {
    console.log('üîÑ getCategories: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ Supabase...');
    
    const { data: categories, error } = await supabase
      .from('equipment_categories')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå getCategories: –û—à–∏–±–∫–∞ Supabase:', error);
      throw new Error(error.message);
    }

    console.log('‚úÖ getCategories: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', categories);
    return categories || [];
  } catch (error) {
    console.error('‚ùå getCategories: –û—à–∏–±–∫–∞ API:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
    return getFallbackCategories();
  }
}

// Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
function getFallbackEquipment(): SupabaseEquipment[] {
  return [
    {
      id: 'fallback-1',
      name: 'LED –í–∏–¥–µ–æ—Å—Ç–µ–Ω–∞ 55"',
      description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è LED –≤–∏–¥–µ–æ—Å—Ç–µ–Ω–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
      specifications: {
        resolution: '1920x1080',
        brightness: '500 cd/m¬≤',
        contrast: '3000:1'
      },
      main_image_url: null,
      price_per_day: 15000,
      category_id: 'fallback-category-1',
      stock_quantity: 5,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    {
      id: 'fallback-2',
      name: '–ü—Ä–æ–µ–∫—Ç–æ—Ä 4K',
      description: '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π',
      specifications: {
        resolution: '3840x2160',
        brightness: '3500 lumens',
        contrast: '10000:1'
      },
      main_image_url: null,
      price_per_day: 8000,
      category_id: 'fallback-category-2',
      stock_quantity: 3,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
  ];
}

function getFallbackCategories(): SupabaseCategory[] {
  return [
    {
      id: 'fallback-category-1',
      name: '–í–∏–¥–µ–æ—Å—Ç–µ–Ω—ã',
      description: 'LED –≤–∏–¥–µ–æ—Å—Ç–µ–Ω—ã –∏ –¥–∏—Å–ø–ª–µ–∏',
      icon_url: null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    {
      id: 'fallback-category-2',
      name: '–ü—Ä–æ–µ–∫—Ç–æ—Ä—ã',
      description: '–ü—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
      icon_url: null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
  ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
export async function addToCart(equipmentId: string, quantity: number = 1) {
  try {
    console.log('üîÑ addToCart: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É...');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const cartItem = {
      equipmentId,
      quantity,
      addedAt: new Date().toISOString()
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
    const existingCart = JSON.parse(localStorage.getItem('equipment_cart') || '[]');
    existingCart.push(cartItem);
    localStorage.setItem('equipment_cart', JSON.stringify(existingCart));

    console.log('‚úÖ addToCart: –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:', cartItem);
    return { success: true, item: cartItem };
  } catch (error) {
    console.error('‚ùå addToCart: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
export async function getEquipmentById(id: string): Promise<SupabaseEquipment | null> {
  try {
    console.log('üîÑ getEquipmentById: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID...');
    
    const { data: equipment, error } = await supabase
      .from('equipment_catalog')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error('‚ùå getEquipmentById: –û—à–∏–±–∫–∞ Supabase:', error);
      throw new Error(error.message);
    }

    console.log('‚úÖ getEquipmentById: –¢–æ–≤–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω:', equipment);
    return equipment;
  } catch (error) {
    console.error('‚ùå getEquipmentById: –û—à–∏–±–∫–∞ API:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
    const fallbackEquipment = getFallbackEquipment();
    return fallbackEquipment.find(item => item.id === id) || null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
export async function searchEquipment(query: string): Promise<SupabaseEquipment[]> {
  try {
    console.log('üîÑ searchEquipment: –ò—â–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:', query);
    
    const { data: equipment, error } = await supabase
      .from('equipment_catalog')
      .select('*')
      .or(`name.ilike.%${query}%, description.ilike.%${query}%`)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå searchEquipment: –û—à–∏–±–∫–∞ Supabase:', error);
      throw new Error(error.message);
    }

    console.log('‚úÖ searchEquipment: –ù–∞–π–¥–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', equipment);
    return equipment || [];
  } catch (error) {
    console.error('‚ùå searchEquipment: –û—à–∏–±–∫–∞ API:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    const fallbackEquipment = getFallbackEquipment();
    return fallbackEquipment.filter(item => 
      item.name.toLowerCase().includes(query.toLowerCase()) ||
      (item.description && item.description.toLowerCase().includes(query.toLowerCase()))
    );
  }
}