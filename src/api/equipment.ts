import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE';

const supabase = createClient(supabaseUrl, supabaseKey);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
interface SupabaseEquipment {
  id: string;
  name: string;
  description: string | null;
  specifications: any;
  main_image_url: string | null;
  price_per_day: number;
  category_id: string;
  stock_quantity: number;
  created_at: string;
  updated_at: string;
}

interface SupabaseCategory {
  id: string;
  name: string;
  slug: string;
  description: string | null;
}

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π Supabase –Ω–∞ —Ç–∏–ø—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const categoryMapping: Record<string, string> = {
  '464a3da6-4944-4778-9e84-e28fa43f4f03': 'audio', // –ê—É–¥–∏–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  'aafa4e79-347b-4e5a-99e8-fad53f77abb6': 'projection', // –í–∏–¥–µ–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  'eaece304-35d0-4909-8f4f-621cee215257': 'projection', // –ü—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  '18eaed84-0ef1-4fd4-ac8f-4882a039ceb1': 'lighting', // –°–≤–µ—Ç–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
export async function getEquipment() {
  try {
    console.log('üîÑ getEquipment: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ REST API...');
    
    const url = `${supabaseUrl}/rest/v1/equipment_catalog?select=*&order=created_at.desc`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json',
      },
    });

    console.log('üîÑ getEquipment: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå getEquipment: HTTP –æ—à–∏–±–∫–∞:', response.status, errorText);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const equipment = await response.json();
    console.log('‚úÖ getEquipment: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', equipment);
    console.log('‚úÖ getEquipment: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', equipment?.length || 0);

    return equipment || [];
  } catch (error) {
    console.error('‚ùå getEquipment: –û—à–∏–±–∫–∞ API:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function getEquipmentByCategory(categoryId: string) {
  try {
    console.log('üîÑ getEquipmentByCategory: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ REST API...');
    
    const url = `${supabaseUrl}/rest/v1/equipment_catalog?select=*&category_id=eq.${categoryId}&order=created_at.desc`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json',
      },
    });

    console.log('üîÑ getEquipmentByCategory: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå getEquipmentByCategory: HTTP –æ—à–∏–±–∫–∞:', response.status, errorText);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const equipment = await response.json();
    console.log('‚úÖ getEquipmentByCategory: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', equipment);
    console.log('‚úÖ getEquipmentByCategory: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', equipment?.length || 0);

    return equipment || [];
  } catch (error) {
    console.error('‚ùå getEquipmentByCategory: –û—à–∏–±–∫–∞ API:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export async function getCategories() {
  try {
    console.log('üîÑ getCategories: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ REST API...');
    
    const url = `${supabaseUrl}/rest/v1/equipment_categories?select=*&order=name.asc`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json',
      },
    });

    console.log('üîÑ getCategories: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå getCategories: HTTP –æ—à–∏–±–∫–∞:', response.status, errorText);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const categories = await response.json();
    console.log('‚úÖ getCategories: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', categories);
    console.log('‚úÖ getCategories: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', categories?.length || 0);

    return categories || [];
  } catch (error) {
    console.error('‚ùå getCategories: –û—à–∏–±–∫–∞ API:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
export async function searchEquipment(query: string) {
  try {
    const { data: equipment, error } = await supabase
      .from('equipment_catalog')
      .select(`
        *,
        equipment_categories (
          id,
          name,
          slug,
          description
        )
      `)
      .or(`name.ilike.%${query}%, description.ilike.%${query}%`)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      throw error;
    }

    return equipment || [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API:', error);
    throw error;
  }
}
