import { createClient } from '@supabase/supabase-js';

// ‚ö†Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: Service Role –∫–ª—é—á –ù–ï –î–û–õ–ñ–ï–ù –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –∫–æ–¥–µ!
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ backend (Node.js/Edge Functions)
// –î–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π supabase client —Å RLS

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || '';
const SUPABASE_SERVICE_KEY = import.meta.env.VITE_SUPABASE_SERVICE_KEY || '';

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.warn('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: Service Role credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å Service Role –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–¢–û–õ–¨–ö–û –¥–ª—è backend!)
export const supabaseAdmin = SUPABASE_SERVICE_KEY ? createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
    detectSessionInUrl: false
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-admin-client'
    }
  }
}) : null as any;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ RPC
export const executeSQL = async (sql: string) => {
  try {
    const { data, error } = await supabaseAdmin.rpc('exec_sql', { sql_query: sql });
    
    if (error) {
      throw error;
    }
    
    return { data, error: null };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', err);
    return { data: null, error: err };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã letters_certificates
export const createLettersCertificatesTable = async () => {
  const sql = `
    -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã letters_certificates
    CREATE TABLE IF NOT EXISTS letters_certificates (
      id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
      title VARCHAR(255) NOT NULL,
      description TEXT,
      image_url TEXT,
      document_url TEXT,
      type VARCHAR(50) NOT NULL CHECK (type IN ('letter', 'certificate', 'award', 'diploma')),
      issuer VARCHAR(255) NOT NULL,
      issued_date DATE,
      is_visible BOOLEAN DEFAULT true,
      sort_order INTEGER DEFAULT 0,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    CREATE INDEX IF NOT EXISTS idx_letters_certificates_type ON letters_certificates(type);
    CREATE INDEX IF NOT EXISTS idx_letters_certificates_visible ON letters_certificates(is_visible);
    CREATE INDEX IF NOT EXISTS idx_letters_certificates_sort ON letters_certificates(sort_order);

    -- –í–∫–ª—é—á–µ–Ω–∏–µ RLS
    ALTER TABLE letters_certificates ENABLE ROW LEVEL SECURITY;

    -- –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    CREATE POLICY "Anyone can view visible letters and certificates" ON letters_certificates
      FOR SELECT USING (is_visible = true);

    CREATE POLICY "Admins can manage letters and certificates" ON letters_certificates
      FOR ALL USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE users.id = auth.uid() 
          AND users.role = 'admin'
        )
      );

    -- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    CREATE OR REPLACE FUNCTION update_letters_certificates_updated_at()
    RETURNS TRIGGER AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    -- –¢—Ä–∏–≥–≥–µ—Ä
    CREATE TRIGGER update_letters_certificates_updated_at
      BEFORE UPDATE ON letters_certificates
      FOR EACH ROW
      EXECUTE FUNCTION update_letters_certificates_updated_at();
  `;

  return await executeSQL(sql);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const addTestLettersData = async () => {
  const sql = `
    INSERT INTO letters_certificates (title, description, type, issuer, issued_date, sort_order) VALUES
    ('–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –ì–∞–∑–ø—Ä–æ–º', '–ó–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', 'letter', '–ü–ê–û –ì–∞–∑–ø—Ä–æ–º', '2024-01-15', 1),
    ('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º', 'certificate', 'ISO International', '2024-02-20', 2),
    ('–î–∏–ø–ª–æ–º –∑–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', '–î–∏–ø–ª–æ–º –∑–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞', 'diploma', '–†–æ—Å—Å–∏–π—Å–∫–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞', '2024-03-10', 3),
    ('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ª—É—á—à–∏–π –ø—Ä–æ–µ–∫—Ç', '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ª—É—á—à–∏–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≥–æ–¥–∞', 'award', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤', '2024-04-05', 4)
    ON CONFLICT DO NOTHING;
  `;

  return await executeSQL(sql);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
export const checkTableExists = async (tableName: string) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const { data, error } = await supabaseAdmin
      .from(tableName)
      .select('id')
      .limit(1);

    if (error) {
      if (error.message.includes('relation') && error.message.includes('does not exist')) {
        return { exists: false, error: null };
      }
      if (error.message.includes('permission denied')) {
        return { exists: false, error: null };
      }
      throw error;
    }

    return { exists: true, error: null };
  } catch (err) {
    // –ï—Å–ª–∏ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    return { exists: false, error: null };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
export const createTableByInsertingData = async () => {
  try {
    console.log('üîß –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –≤—Å—Ç–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É
    const testData = {
      id: '00000000-0000-0000-0000-000000000001',
      title: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ',
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
      type: 'letter',
      issuer: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
      issued_date: '2024-01-01',
      is_visible: true,
      sort_order: 0
    };

    const { data, error } = await supabaseAdmin
      .from('letters_certificates')
      .insert([testData]);

    if (error) {
      if (error.message.includes('relation') && error.message.includes('does not exist')) {
        return { 
          success: false, 
          message: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard.' 
        };
      }
      throw error;
    }

    // –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await supabaseAdmin
      .from('letters_certificates')
      .delete()
      .eq('id', testData.id);

    return { success: true, message: '–¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
    return { 
      success: false, 
      message: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard.' 
    };
  }
};


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã letters_certificates —á–µ—Ä–µ–∑ API
export const createLettersCertificatesTableViaAPI = async () => {
  try {
    console.log('üîß –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É letters_certificates —á–µ—Ä–µ–∑ API...');
    
    const { data, error } = await supabaseAdmin.rpc('create_letters_certificates_table');
    
    if (error) {
      throw error;
    }
    
    return { success: true, message: data.message, data };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error);
    return { 
      success: false, 
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
export const setupLettersCertificatesTable = async () => {
  try {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã letters_certificates...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    const { data: existingData, error: checkError } = await supabaseAdmin
      .from('letters_certificates')
      .select('id')
      .limit(1);

    if (checkError) {
      if (checkError.message.includes('relation') && checkError.message.includes('does not exist')) {
        console.log('üìã –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—é —á–µ—Ä–µ–∑ API...');
        
        // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ API
        const createResult = await createLettersCertificatesTableViaAPI();
        
        if (createResult.success) {
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ letters_certificates —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API');
          return { success: true, message: '–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API' };
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ API:', createResult.message);
          return { 
            success: false, 
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ API. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard.' 
          };
        }
      } else {
        throw checkError;
      }
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ letters_certificates —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return { success: true, message: '–¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é' };
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', error);
    return { 
      success: false, 
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
    };
  }
};
