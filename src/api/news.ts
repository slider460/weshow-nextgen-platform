import { supabase } from '../config/supabase'
import { News, NewsInsert, NewsUpdate } from '../types/database'

export interface NewsFilters {
  category?: string
  featured?: boolean
  status?: 'draft' | 'published' | 'archived'
  search?: string
  limit?: number
  offset?: number
}

export interface NewsStats {
  total: number
  published: number
  draft: number
  archived: number
  featured: number
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
export const getNews = async (filters: NewsFilters = {}): Promise<News[]> => {
  try {
    let query = supabase
      .from('news')
      .select('*')
      .order('published_at', { ascending: false })

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (filters.category && filters.category !== 'all') {
      query = query.eq('category', filters.category)
    }

    if (filters.featured !== undefined) {
      query = query.eq('featured', filters.featured)
    }

    if (filters.status) {
      query = query.eq('status', filters.status)
    }

    if (filters.search) {
      query = query.or(`title.ilike.%${filters.search}%,content.ilike.%${filters.search}%,excerpt.ilike.%${filters.search}%`)
    }

    if (filters.limit) {
      query = query.limit(filters.limit)
    }

    if (filters.offset) {
      query = query.range(filters.offset, filters.offset + (filters.limit || 10) - 1)
    }

    const { data, error } = await query

    if (error) {
      console.error('Error fetching news:', error)
      throw error
    }

    return data || []
  } catch (error) {
    console.error('Error in getNews:', error)
    throw error
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID
export const getNewsById = async (id: string): Promise<News | null> => {
  try {
    const { data, error } = await supabase
      .from('news')
      .select('*')
      .eq('id', id)
      .single()

    if (error) {
      console.error('Error fetching news by ID:', error)
      throw error
    }

    return data
  } catch (error) {
    console.error('Error in getNewsById:', error)
    throw error
  }
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
export const createNews = async (newsData: NewsInsert): Promise<News> => {
  try {
    const { data, error } = await supabase
      .from('news')
      .insert(newsData)
      .select()
      .single()

    if (error) {
      console.error('Error creating news:', error)
      throw error
    }

    return data
  } catch (error) {
    console.error('Error in createNews:', error)
    throw error
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
export const updateNews = async (id: string, updates: NewsUpdate): Promise<News> => {
  try {
    const { data, error } = await supabase
      .from('news')
      .update(updates)
      .eq('id', id)
      .select()
      .single()

    if (error) {
      console.error('Error updating news:', error)
      throw error
    }

    return data
  } catch (error) {
    console.error('Error in updateNews:', error)
    throw error
  }
}

// –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
export const deleteNews = async (id: string): Promise<void> => {
  try {
    console.log('üîç API: –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å ID:', id);
    
    const { data, error } = await supabase
      .from('news')
      .delete()
      .eq('id', id)
      .select()

    if (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', error)
      throw error
    }
    
    console.log('‚úÖ API: –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ:', data)
  } catch (error) {
    console.error('üí• API: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ deleteNews:', error)
    throw error
  }
}

// –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
export const incrementNewsViews = async (id: string): Promise<void> => {
  try {
    const { error } = await supabase.rpc('increment_news_views', { news_id: id })
    
    if (error) {
      console.error('Error incrementing news views:', error)
      throw error
    }
  } catch (error) {
    console.error('Error in incrementNewsViews:', error)
    throw error
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π
export const getNewsStats = async (): Promise<NewsStats> => {
  try {
    const { data, error } = await supabase
      .from('news')
      .select('status, featured')

    if (error) {
      console.error('Error fetching news stats:', error)
      throw error
    }

    const stats: NewsStats = {
      total: data?.length || 0,
      published: data?.filter(item => item.status === 'published').length || 0,
      draft: data?.filter(item => item.status === 'draft').length || 0,
      archived: data?.filter(item => item.status === 'archived').length || 0,
      featured: data?.filter(item => item.featured).length || 0
    }

    return stats
  } catch (error) {
    console.error('Error in getNewsStats:', error)
    throw error
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
export const getNewsCategories = async (): Promise<string[]> => {
  try {
    const { data, error } = await supabase
      .from('news')
      .select('category')
      .not('category', 'is', null)

    if (error) {
      console.error('Error fetching news categories:', error)
      throw error
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = [...new Set(data?.map(item => item.category) || [])]
    return categories
  } catch (error) {
    console.error('Error in getNewsCategories:', error)
    throw error
  }
}
