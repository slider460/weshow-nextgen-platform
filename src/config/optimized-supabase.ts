import { createClient, SupabaseClient } from '@supabase/supabase-js'
import { Database } from '../types/database'

// =============================================================================
// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE
// =============================================================================

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || ''
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || ''

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ö†Ô∏è –û–®–ò–ë–ö–ê: Supabase credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å VITE_SUPABASE_URL –∏ VITE_SUPABASE_ANON_KEY')
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseConfig = {
  auth: {
    autoRefreshToken: true, // –í–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    persistSession: true,   // –í–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
    detectSessionInUrl: false
  },
  global: {
    headers: {
      'X-Client-Info': 'weshow-optimized-client',
      'X-Requested-With': 'XMLHttpRequest'
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    // –û—Ç–∫–ª—é—á–∞–µ–º realtime –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    enabled: false
  }
}

// –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
export const optimizedSupabase: SupabaseClient<Database> = createClient(
  supabaseUrl, 
  supabaseAnonKey, 
  supabaseConfig
)

// =============================================================================
// –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–ô –ò –ó–ê–ü–†–û–°–û–í
// =============================================================================

// –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const queryCache = new Map<string, { data: any; timestamp: number; ttl: number }>()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
export async function cachedQuery<T>(
  cacheKey: string,
  queryFn: () => Promise<T>,
  ttl: number = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
): Promise<T> {
  const now = Date.now()
  const cached = queryCache.get(cacheKey)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (cached && (now - cached.timestamp) < cached.ttl) {
    console.log(`üì¶ Cache hit: ${cacheKey}`)
    return cached.data
  }
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
  console.log(`üåê Cache miss: ${cacheKey}`)
  const result = await queryFn()
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
  queryCache.set(cacheKey, {
    data: result,
    timestamp: now,
    ttl
  })
  
  return result
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
export function clearQueryCache(pattern?: string) {
  if (pattern) {
    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    for (const key of queryCache.keys()) {
      if (key.includes(pattern)) {
        queryCache.delete(key)
      }
    }
  } else {
    // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
    queryCache.clear()
  }
  
  console.log(`üßπ Query cache cleared${pattern ? ` for pattern: ${pattern}` : ''}`)
}

// =============================================================================
// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ß–ê–°–¢–´–• –û–ü–ï–†–ê–¶–ò–ô
// =============================================================================

// –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function getEquipmentOptimized(categoryId?: string) {
  const cacheKey = `equipment_${categoryId || 'all'}`
  
  return cachedQuery(
    cacheKey,
    async () => {
      let query = optimizedSupabase
        .from('equipment_catalog')
        .select(`
          *,
          equipment_categories (
            id,
            name,
            slug
          )
        `)
        .not('id', 'is', null)

      if (categoryId) {
        query = query.eq('category_id', categoryId)
      }

      const { data, error } = await query.order('name')
      
      if (error) throw error
      return data
    },
    30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
  )
}

// –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function getCategoriesOptimized() {
  return cachedQuery(
    'categories_all',
    async () => {
      const { data, error } = await optimizedSupabase
        .from('equipment_categories')
        .select('*')
        .order('name')
      
      if (error) throw error
      return data
    },
    60 * 60 * 1000 // 1 —á–∞—Å
  )
}

// –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function getArticlesOptimized(categoryId?: string) {
  const cacheKey = `articles_${categoryId || 'all'}`
  
  return cachedQuery(
    cacheKey,
    async () => {
      let query = optimizedSupabase
        .from('articles')
        .select(`
          *,
          article_categories (
            id,
            name,
            slug
          ),
          users (
            id,
            name
          )
        `)

      if (categoryId) {
        query = query.eq('category_id', categoryId)
      }

      const { data, error } = await query.order('published_at', { ascending: false })
      
      if (error) throw error
      return data
    },
    15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
  )
}

// –ü–æ–∏—Å–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function searchEquipmentOptimized(searchTerm: string) {
  const cacheKey = `search_${searchTerm.toLowerCase()}`
  
  return cachedQuery(
    cacheKey,
    async () => {
      const { data, error } = await optimizedSupabase
        .from('equipment_catalog')
        .select(`
          *,
          equipment_categories (
            id,
            name,
            slug
          )
        `)
        .not('id', 'is', null)
        .or(`name.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%`)
        .order('name')
      
      if (error) throw error
      return data
    },
    15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
  )
}

// =============================================================================
// –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
// =============================================================================

// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performanceMetrics = {
  queryCount: 0,
  cacheHits: 0,
  cacheMisses: 0,
  totalQueryTime: 0
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
export async function measureQuery<T>(
  queryName: string,
  queryFn: () => Promise<T>
): Promise<T> {
  const startTime = performance.now()
  performanceMetrics.queryCount++
  
  try {
    const result = await queryFn()
    const endTime = performance.now()
    const duration = endTime - startTime
    
    performanceMetrics.totalQueryTime += duration
    
    console.log(`‚è±Ô∏è Query "${queryName}" completed in ${duration.toFixed(2)}ms`)
    
    return result
  } catch (error) {
    const endTime = performance.now()
    const duration = endTime - startTime
    
    console.error(`‚ùå Query "${queryName}" failed after ${duration.toFixed(2)}ms:`, error)
    throw error
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export function getPerformanceMetrics() {
  const avgQueryTime = performanceMetrics.queryCount > 0 
    ? performanceMetrics.totalQueryTime / performanceMetrics.queryCount 
    : 0
  
  const cacheHitRate = performanceMetrics.queryCount > 0
    ? (performanceMetrics.cacheHits / performanceMetrics.queryCount) * 100
    : 0
  
  return {
    ...performanceMetrics,
    averageQueryTime: avgQueryTime,
    cacheHitRate: cacheHitRate
  }
}

// –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫
export function clearPerformanceMetrics() {
  performanceMetrics.queryCount = 0
  performanceMetrics.cacheHits = 0
  performanceMetrics.cacheMisses = 0
  performanceMetrics.totalQueryTime = 0
}

// =============================================================================
// –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•
// =============================================================================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export async function preloadCriticalDataOptimized() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
  
  const startTime = performance.now()
  
  try {
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [categories] = await Promise.all([
      getCategoriesOptimized()
    ])
    
    const endTime = performance.now()
    const duration = endTime - startTime
    
    console.log(`‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration.toFixed(2)}ms`)
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories?.length || 0}`)
    
    return { categories }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error)
    throw error
  }
}

// =============================================================================
// –≠–ö–°–ü–û–†–¢–´
// =============================================================================

export { optimizedSupabase as supabase }
export type { Database } from '../types/database'

// –≠–∫—Å–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
export const debugUtils = {
  clearQueryCache,
  getPerformanceMetrics,
  clearPerformanceMetrics,
  preloadCriticalDataOptimized
}




