import React, { useState, useEffect } from 'react';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { useLogos } from '../contexts/LogosContextDB';
import { RefreshCw, CheckCircle, AlertCircle, Database, Globe, Settings } from 'lucide-react';

const ForceRefreshLogos = () => {
  const { state, forceRefresh, getActiveLogos } = useLogos();
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [refreshResults, setRefreshResults] = useState<string[]>([]);

  const addResult = (message: string, type: 'success' | 'error' | 'info' = 'info') => {
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è';
    setRefreshResults(prev => [...prev, `${icon} ${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const handleForceRefresh = async () => {
    setIsRefreshing(true);
    setRefreshResults([]);
    
    addResult('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤...');
    
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await forceRefresh();
      addResult('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'success');
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–≥–æ—Ç–∏–ø—ã
      const activeLogos = getActiveLogos();
      addResult(`–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤: ${activeLogos.length}`, 'info');
      
      if (activeLogos.length > 0) {
        addResult('–õ–æ–≥–æ—Ç–∏–ø—ã:', 'info');
        activeLogos.forEach((logo, index) => {
          addResult(`${index + 1}. ${logo.name} (${logo.is_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})`, 'info');
        });
      } else {
        addResult('‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', 'error');
      }
      
      addResult('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'success');
      
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error}`, 'error');
    } finally {
      setIsRefreshing(false);
    }
  };

  const clearResults = () => {
    setRefreshResults([]);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    handleForceRefresh();
  }, []);

  return (
    <div className="min-h-screen bg-slate-50 p-8">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900 mb-4">
            –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
          </h1>
          <p className="text-slate-600">
            –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥–æ—Ç–∏–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Database className="w-5 h-5 mr-2 text-blue-500" />
                –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-600">{state.logos.length}</div>
              <p className="text-sm text-slate-600">–í—Å–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–æ–≤</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Settings className="w-5 h-5 mr-2 text-green-500" />
                –ê–∫—Ç–∏–≤–Ω—ã–µ
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">{getActiveLogos().length}</div>
              <p className="text-sm text-slate-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Globe className="w-5 h-5 mr-2 text-purple-500" />
                –°—Ç–∞—Ç—É—Å
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className={`text-2xl font-bold ${state.loading ? 'text-yellow-600' : state.error ? 'text-red-600' : 'text-green-600'}`}>
                {state.loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : state.error ? '–û—à–∏–±–∫–∞' : '–ì–æ—Ç–æ–≤–æ'}
              </div>
              <p className="text-sm text-slate-600">–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</p>
            </CardContent>
          </Card>
        </div>

        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span className="flex items-center">
                <RefreshCw className="w-5 h-5 mr-2" />
                –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
              </span>
              <div className="flex gap-2">
                <Button 
                  onClick={handleForceRefresh} 
                  disabled={isRefreshing}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {isRefreshing ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å'}
                </Button>
                <Button 
                  onClick={clearResults} 
                  variant="outline"
                  disabled={isRefreshing}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {refreshResults.length > 0 ? (
              <div className="space-y-2 max-h-96 overflow-y-auto bg-slate-50 p-4 rounded-lg">
                {refreshResults.map((result, index) => (
                  <div key={index} className="text-sm font-mono">
                    {result}
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-slate-500 text-center py-8">
                –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å" –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="mb-6">
          <CardHeader>
            <CardTitle>–°–ø–∏—Å–æ–∫ –ª–æ–≥–æ—Ç–∏–ø–æ–≤</CardTitle>
          </CardHeader>
          <CardContent>
            {state.logos.length > 0 ? (
              <div className="space-y-3">
                {state.logos.map((logo, index) => (
                  <div key={logo.id} className="flex items-center justify-between p-3 bg-slate-50 rounded-lg">
                    <div className="flex items-center">
                      <div className="w-8 h-8 bg-slate-200 rounded mr-3 flex items-center justify-center">
                        {logo.logo_url && logo.logo_url !== '/placeholder.svg' ? (
                          <img 
                            src={logo.logo_url} 
                            alt={logo.name}
                            className="w-6 h-6 object-contain"
                          />
                        ) : (
                          <span className="text-xs">LOGO</span>
                        )}
                      </div>
                      <div>
                        <div className="font-medium">{logo.name}</div>
                        <div className="text-sm text-slate-500">
                          {logo.category} ‚Ä¢ {logo.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                        </div>
                      </div>
                    </div>
                    <div className={`px-2 py-1 rounded text-xs ${logo.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                      {logo.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-slate-500 text-center py-8">
                –õ–æ–≥–æ—Ç–∏–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </div>
            )}
          </CardContent>
        </Card>

        <div className="mt-8 flex gap-4">
          <Button asChild className="bg-green-600 hover:bg-green-700">
            <a href="/admin/logos">
              <Settings className="w-4 h-4 mr-2" />
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            </a>
          </Button>
          
          <Button variant="outline" asChild>
            <a href="/">
              <Globe className="w-4 h-4 mr-2" />
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </a>
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ForceRefreshLogos;
