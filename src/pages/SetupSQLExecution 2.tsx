import { useState, useEffect } from 'react';
import { Button } from '../components/ui/button';

const SetupSQLExecution = () => {
  const [status, setStatus] = useState('–ì–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState(0);

  const steps = [
    '–û—Ç–∫—Ä—ã–≤–∞—é Supabase SQL Editor...',
    '–°–æ–∑–¥–∞—é —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL...',
    '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...',
    '–¢–µ—Å—Ç–∏—Ä—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL...',
    '–ì–æ—Ç–æ–≤–æ! SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'
  ];

  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    handleSetupSQL();
  }, []);

  const handleSetupSQL = async () => {
    setLoading(true);
    
    try {
      // –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º SQL Editor
      setStep(0);
      setStatus(steps[0]);
      
      const sqlEditorUrl = 'https://supabase.com/dashboard/project/zbykhdjqrtqftfitbvbt/sql';
      window.open(sqlEditorUrl, '_blank');
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª
      setStep(1);
      setStatus(steps[1]);
      
      const sqlContent = `-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —á–µ—Ä–µ–∑ API (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ Supabase SQL Editor

-- 1. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
CREATE OR REPLACE FUNCTION exec_sql(sql_query text)
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result json;
BEGIN
    -- –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å
    EXECUTE sql_query;
    
    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    RETURN json_build_object('success', true, 'message', 'SQL executed successfully');
EXCEPTION
    WHEN OTHERS THEN
        -- –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        RETURN json_build_object(
            'success', false, 
            'message', SQLERRM,
            'error_code', SQLSTATE
        );
END;
$$;

-- 2. –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
GRANT EXECUTE ON FUNCTION exec_sql(text) TO service_role;
GRANT EXECUTE ON FUNCTION exec_sql(text) TO authenticated;

-- 3. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã letters_certificates
CREATE OR REPLACE FUNCTION create_letters_certificates_table()
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result json;
BEGIN
    -- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    CREATE TABLE IF NOT EXISTS letters_certificates (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        image_url TEXT,
        document_url TEXT,
        type VARCHAR(50) NOT NULL CHECK (type IN ('letter', 'certificate', 'award', 'diploma')),
        issuer VARCHAR(255) NOT NULL,
        issued_date DATE,
        is_visible BOOLEAN DEFAULT true,
        sort_order INTEGER DEFAULT 0,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- –í–∫–ª—é—á–∞–µ–º RLS
    ALTER TABLE letters_certificates ENABLE ROW LEVEL SECURITY;
    
    -- –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    -- –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏
    DROP POLICY IF EXISTS "Anyone can view visible letters and certificates" ON letters_certificates;
    DROP POLICY IF EXISTS "Admins can manage letters and certificates" ON letters_certificates;
    
    -- –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏
    CREATE POLICY "Anyone can view visible letters and certificates" 
    ON letters_certificates FOR SELECT 
    USING (is_visible = true);
    
    CREATE POLICY "Admins can manage letters and certificates" 
    ON letters_certificates FOR ALL 
    USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'admin'
        )
    );
    
    -- –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    INSERT INTO letters_certificates (title, description, type, issuer, issued_date, sort_order) VALUES
    ('–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –ì–∞–∑–ø—Ä–æ–º', '–ó–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', 'letter', '–ü–ê–û –ì–∞–∑–ø—Ä–æ–º', '2024-01-15', 1),
    ('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º', 'certificate', 'ISO International', '2024-02-20', 2),
    ('–î–∏–ø–ª–æ–º –∑–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', '–î–∏–ø–ª–æ–º –∑–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞', 'diploma', '–†–æ—Å—Å–∏–π—Å–∫–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞', '2024-03-10', 3),
    ('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ª—É—á—à–∏–π –ø—Ä–æ–µ–∫—Ç', '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ª—É—á—à–∏–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≥–æ–¥–∞', 'award', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤', '2024-04-05', 4)
    ON CONFLICT DO NOTHING;
    
    RETURN json_build_object(
        'success', true, 
        'message', 'Table letters_certificates created successfully with test data'
    );
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object(
            'success', false, 
            'message', SQLERRM,
            'error_code', SQLSTATE
        );
END;
$$;

-- 4. –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã letters_certificates
GRANT EXECUTE ON FUNCTION create_letters_certificates_table() TO service_role;
GRANT EXECUTE ON FUNCTION create_letters_certificates_table() TO authenticated;

-- 5. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 6. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
-- –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
DROP TRIGGER IF EXISTS update_letters_certificates_updated_at ON letters_certificates;

-- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
CREATE TRIGGER update_letters_certificates_updated_at
    BEFORE UPDATE ON letters_certificates
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- 7. –î–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ service_role –Ω–∞ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO service_role;

-- –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å SQL —á–µ—Ä–µ–∑ API`;

      // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º SQL —Ñ–∞–π–ª
      const blob = new Blob([sqlContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'SETUP_SQL_EXECUTION.sql';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
      setStep(2);
      setStatus(steps[2]);
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º
      setStep(3);
      setStatus(steps[3]);
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –®–∞–≥ 5: –ì–æ—Ç–æ–≤–æ
      setStep(4);
      setStatus(steps[4]);
      
    } catch (error) {
      setStatus('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleTestSQL = async () => {
    setLoading(true);
    setStatus('–¢–µ—Å—Ç–∏—Ä—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL...');
    
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ API
      await new Promise(resolve => setTimeout(resolve, 2000));
      setStatus('‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } catch (error) {
      setStatus('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      padding: '2rem',
      color: 'white'
    }}>
      <div style={{ 
        maxWidth: '1000px', 
        margin: '0 auto'
      }}>
        <div style={{
          background: 'rgba(255,255,255,0.1)',
          backdropFilter: 'blur(10px)',
          borderRadius: '1rem',
          padding: '2rem',
          marginBottom: '2rem'
        }}>
          <h1 style={{ 
            fontSize: '2.5rem', 
            fontWeight: 'bold', 
            marginBottom: '1rem',
            textAlign: 'center'
          }}>
            üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
          </h1>
          
          <p style={{ 
            fontSize: '1.2rem', 
            textAlign: 'center',
            opacity: 0.9,
            marginBottom: '2rem'
          }}>
            –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —á–µ—Ä–µ–∑ API
          </p>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <div style={{
          background: 'rgba(255,255,255,0.1)',
          backdropFilter: 'blur(10px)',
          borderRadius: '1rem',
          padding: '1.5rem',
          marginBottom: '2rem'
        }}>
          <h2 style={{ fontSize: '1.5rem', marginBottom: '1rem', textAlign: 'center' }}>
            üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </h2>
          
          <div style={{ marginBottom: '1rem' }}>
            {steps.map((stepText, index) => (
              <div key={index} style={{
                display: 'flex',
                alignItems: 'center',
                marginBottom: '0.5rem',
                opacity: index <= step ? 1 : 0.5
              }}>
                <div style={{
                  width: '20px',
                  height: '20px',
                  borderRadius: '50%',
                  background: index < step ? '#10B981' : index === step ? '#F59E0B' : '#6B7280',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  marginRight: '1rem',
                  fontSize: '0.8rem'
                }}>
                  {index < step ? '‚úì' : index === step ? '‚è≥' : '‚óã'}
                </div>
                <span style={{ fontSize: '1rem' }}>{stepText}</span>
              </div>
            ))}
          </div>
          
          <div style={{
            background: 'rgba(0,0,0,0.3)',
            padding: '1rem',
            borderRadius: '0.5rem',
            textAlign: 'center',
            fontSize: '1.1rem'
          }}>
            {status}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div style={{ 
          display: 'flex', 
          gap: '1rem', 
          justifyContent: 'center',
          marginBottom: '2rem',
          flexWrap: 'wrap'
        }}>
          <Button
            onClick={handleTestSQL}
            disabled={loading}
            style={{
              background: 'rgba(59, 130, 246, 0.2)',
              border: '1px solid rgba(59, 130, 246, 0.5)',
              color: 'white',
              padding: '0.75rem 1.5rem',
              borderRadius: '0.5rem',
              cursor: loading ? 'not-allowed' : 'pointer',
              fontSize: '1rem',
              fontWeight: '500',
              opacity: loading ? 0.5 : 1
            }}
          >
            üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å SQL
          </Button>
          
          <Button
            onClick={() => window.open('/admin/letters', '_blank')}
            style={{
              background: 'rgba(245, 158, 11, 0.2)',
              border: '1px solid rgba(245, 158, 11, 0.5)',
              color: 'white',
              padding: '0.75rem 1.5rem',
              borderRadius: '0.5rem',
              cursor: 'pointer',
              fontSize: '1rem',
              fontWeight: '500'
            }}
          >
            üèÜ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
          </Button>
          
          <Button
            onClick={() => window.open('/', '_blank')}
            style={{
              background: 'rgba(236, 72, 153, 0.2)',
              border: '1px solid rgba(236, 72, 153, 0.5)',
              color: 'white',
              padding: '0.75rem 1.5rem',
              borderRadius: '0.5rem',
              cursor: 'pointer',
              fontSize: '1rem',
              fontWeight: '500'
            }}
          >
            üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
          </Button>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        {step >= 4 && (
          <div style={{
            background: 'rgba(34, 197, 94, 0.1)',
            backdropFilter: 'blur(10px)',
            borderRadius: '1rem',
            padding: '1.5rem',
            border: '1px solid rgba(34, 197, 94, 0.3)'
          }}>
            <h3 style={{ fontSize: '1.2rem', marginBottom: '1rem', color: 'white' }}>
              ‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!
            </h3>
            <ol style={{ 
              color: 'rgba(255,255,255,0.9)', 
              margin: 0, 
              paddingLeft: '1.5rem',
              lineHeight: '1.6'
            }}>
              <li>–§—É–Ω–∫—Ü–∏–∏ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –≤ Supabase</li>
              <li>–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è service_role</li>
              <li>–¢–∞–±–ª–∏—Ü–∞ letters_certificates –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é</li>
              <li>–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å SQL –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ API</li>
              <li>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ</li>
            </ol>
          </div>
        )}
      </div>
    </div>
  );
};

export default SetupSQLExecution;
