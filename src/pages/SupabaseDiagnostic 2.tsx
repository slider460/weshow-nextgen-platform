import React, { useState, useEffect } from 'react';
import { supabase } from '../config/supabase';

interface DiagnosticResult {
  test: string;
  status: 'success' | 'error' | 'pending';
  message: string;
  data?: any;
}

export const SupabaseDiagnostic: React.FC = () => {
  const [results, setResults] = useState<DiagnosticResult[]>([]);
  const [isRunning, setIsRunning] = useState(false);

  const addResult = (test: string, status: 'success' | 'error' | 'pending', message: string, data?: any) => {
    setResults(prev => [...prev, { test, status, message, data }]);
  };

  const runDiagnostics = async () => {
    setIsRunning(true);
    setResults([]);

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    addResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase', 'pending', '–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    try {
      const { data, error } = await supabase.from('logos').select('count').limit(1);
      if (error) {
        addResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase', 'error', `–û—à–∏–±–∫–∞: ${error.message}`, error);
      } else {
        addResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase', 'success', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', data);
      }
    } catch (err) {
      addResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase', 'error', `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err}`, err);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã logos
    addResult('–¢–∞–±–ª–∏—Ü–∞ logos', 'pending', '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É logos...');
    try {
      const { data, error } = await supabase.from('logos').select('*').limit(5);
      if (error) {
        addResult('–¢–∞–±–ª–∏—Ü–∞ logos', 'error', `–û—à–∏–±–∫–∞: ${error.message}`, error);
      } else {
        addResult('–¢–∞–±–ª–∏—Ü–∞ logos', 'success', `–ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`, data);
      }
    } catch (err) {
      addResult('–¢–∞–±–ª–∏—Ü–∞ logos', 'error', `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err}`, err);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã homepage_equipment
    addResult('–¢–∞–±–ª–∏—Ü–∞ homepage_equipment', 'pending', '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É homepage_equipment...');
    try {
      const { data, error } = await supabase.from('homepage_equipment').select('*').limit(5);
      if (error) {
        addResult('–¢–∞–±–ª–∏—Ü–∞ homepage_equipment', 'error', `–û—à–∏–±–∫–∞: ${error.message}`, error);
      } else {
        addResult('–¢–∞–±–ª–∏—Ü–∞ homepage_equipment', 'success', `–ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`, data);
      }
    } catch (err) {
      addResult('–¢–∞–±–ª–∏—Ü–∞ homepage_equipment', 'error', `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err}`, err);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã user_profiles
    addResult('–¢–∞–±–ª–∏—Ü–∞ user_profiles', 'pending', '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_profiles...');
    try {
      const { data, error } = await supabase.from('user_profiles').select('*').limit(5);
      if (error) {
        addResult('–¢–∞–±–ª–∏—Ü–∞ user_profiles', 'error', `–û—à–∏–±–∫–∞: ${error.message}`, error);
      } else {
        addResult('–¢–∞–±–ª–∏—Ü–∞ user_profiles', 'success', `–ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`, data);
      }
    } catch (err) {
      addResult('–¢–∞–±–ª–∏—Ü–∞ user_profiles', 'error', `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err}`, err);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    addResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'pending', '–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    try {
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error) {
        addResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'error', `–û—à–∏–±–∫–∞: ${error.message}`, error);
      } else {
        const status = session ? '–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è' : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏';
        addResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'success', status, session);
      }
    } catch (err) {
      addResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'error', `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err}`, err);
    }

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ REST API
    addResult('REST API', 'pending', '–ü—Ä–æ–≤–µ—Ä—è–µ–º REST API...');
    try {
      const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
      const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE';
      
      const response = await fetch(`${SUPABASE_URL}/rest/v1/logos?select=*&limit=1`, {
        method: 'GET',
        headers: {
          'apikey': SUPABASE_KEY,
          'Authorization': `Bearer ${SUPABASE_KEY}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        addResult('REST API', 'error', `HTTP ${response.status}: ${errorText}`, { status: response.status, text: errorText });
      } else {
        const data = await response.json();
        addResult('REST API', 'success', `REST API —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`, data);
      }
    } catch (err) {
      addResult('REST API', 'error', `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err}`, err);
    }

    setIsRunning(false);
  };

  useEffect(() => {
    runDiagnostics();
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'success': return 'text-green-600 bg-green-50 border-green-200';
      case 'error': return 'text-red-600 bg-red-50 border-red-200';
      case 'pending': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success': return '‚úÖ';
      case 'error': return '‚ùå';
      case 'pending': return '‚è≥';
      default: return '‚ùì';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-6">
            üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Supabase
          </h1>
          
          <div className="mb-6">
            <button
              onClick={runDiagnostics}
              disabled={isRunning}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isRunning ? '–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ'}
            </button>
          </div>

          <div className="space-y-4">
            {results.map((result, index) => (
              <div
                key={index}
                className={`p-4 rounded-lg border ${getStatusColor(result.status)}`}
              >
                <div className="flex items-center gap-3 mb-2">
                  <span className="text-xl">{getStatusIcon(result.status)}</span>
                  <h3 className="font-semibold">{result.test}</h3>
                </div>
                <p className="text-sm">{result.message}</p>
                {result.data && (
                  <details className="mt-2">
                    <summary className="cursor-pointer text-sm font-medium">
                      –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                    </summary>
                    <pre className="mt-2 text-xs bg-gray-100 p-2 rounded overflow-auto">
                      {JSON.stringify(result.data, null, 2)}
                    </pre>
                  </details>
                )}
              </div>
            ))}
          </div>

          {results.length > 0 && (
            <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h3 className="font-semibold text-blue-900 mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ RLS - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫</li>
                <li>‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö - –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
                <li>‚Ä¢ –ï—Å–ª–∏ REST API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏</li>
                <li>‚Ä¢ –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ auth</li>
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
