import React, { useState, useEffect } from 'react';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { useLogos } from '../contexts/LogosContextDB';
import { Trash2, RefreshCw, CheckCircle, AlertCircle, Plus } from 'lucide-react';

const TestLogoDeletion = () => {
  const { state, addLogo, deleteLogo, forceRefresh } = useLogos();
  const [testResults, setTestResults] = useState<string[]>([]);
  const [isRunning, setIsRunning] = useState(false);

  const addResult = (message: string, type: 'success' | 'error' | 'info' = 'info') => {
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è';
    setTestResults(prev => [...prev, `${icon} ${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const runDeletionTest = async () => {
    setIsRunning(true);
    setTestResults([]);
    
    addResult('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤...');
    
    try {
      // –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø
      addResult('–¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞...');
      const testLogo = {
        name: `–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è ${Date.now()}`,
        category: 'tech' as const,
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è',
        website_url: 'https://example.com',
        is_active: true,
        logo_url: 'https://via.placeholder.com/100x50/4F46E5/FFFFFF?text=DELETE'
      };
      
      await addLogo(testLogo);
      addResult(`–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–æ–≤: ${state.logos.length}`, 'success');
      
      // –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –¢–µ—Å—Ç 2: –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø
      addResult('–¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞...');
      const addedLogo = state.logos.find(logo => logo.name.includes('–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è'));
      
      if (addedLogo) {
        addResult(`–ù–∞–π–¥–µ–Ω –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${addedLogo.name}`, 'info');
        const beforeCount = state.logos.length;
        
        await deleteLogo(addedLogo.id);
        addResult(`–õ–æ–≥–æ—Ç–∏–ø —É–¥–∞–ª–µ–Ω. –ë—ã–ª–æ: ${beforeCount}, —Å—Ç–∞–ª–æ: ${state.logos.length}`, 'success');
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è
        addResult('–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const stillExists = state.logos.find(logo => logo.id === addedLogo.id);
        if (stillExists) {
          addResult('‚ùå –û–®–ò–ë–ö–ê: –£–¥–∞–ª–µ–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø –≤–µ—Ä–Ω—É–ª—Å—è!', 'error');
        } else {
          addResult('‚úÖ –£—Å–ø–µ—à–Ω–æ: –£–¥–∞–ª–µ–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è', 'success');
        }
        
        // –¢–µ—Å—Ç 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        addResult('–¢–µ—Å—Ç 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
        await forceRefresh();
        
        const afterSync = state.logos.find(logo => logo.id === addedLogo.id);
        if (afterSync) {
          addResult('‚ùå –û–®–ò–ë–ö–ê: –£–¥–∞–ª–µ–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!', 'error');
        } else {
          addResult('‚úÖ –£—Å–ø–µ—à–Ω–æ: –£–¥–∞–ª–µ–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'success');
        }
        
      } else {
        addResult('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'error');
      }
      
      addResult('üéâ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
      
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${error}`, 'error');
    } finally {
      setIsRunning(false);
    }
  };

  const clearResults = () => {
    setTestResults([]);
  };

  const addTestLogo = async () => {
    try {
      const testLogo = {
        name: `–†—É—á–Ω–æ–π —Ç–µ—Å—Ç ${Date.now()}`,
        category: 'tech' as const,
        description: '–õ–æ–≥–æ—Ç–∏–ø –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è',
        website_url: 'https://example.com',
        is_active: true,
        logo_url: 'https://via.placeholder.com/100x50/4F46E5/FFFFFF?text=MANUAL'
      };
      
      await addLogo(testLogo);
      addResult(`–î–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥–æ—Ç–∏–ø: ${testLogo.name}`, 'success');
    } catch (error) {
      addResult(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${error}`, 'error');
    }
  };

  const deleteLastLogo = async () => {
    if (state.logos.length === 0) {
      addResult('–ù–µ—Ç –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'error');
      return;
    }
    
    const lastLogo = state.logos[state.logos.length - 1];
    try {
      await deleteLogo(lastLogo.id);
      addResult(`–£–¥–∞–ª–µ–Ω –ª–æ–≥–æ—Ç–∏–ø: ${lastLogo.name}`, 'success');
    } catch (error) {
      addResult(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error}`, 'error');
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 p-8">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900 mb-4">
            –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
          </h1>
          <p className="text-slate-600">
            –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–Ω–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Trash2 className="w-5 h-5 mr-2 text-red-500" />
                –¢–µ–∫—É—â–∏–µ –ª–æ–≥–æ—Ç–∏–ø—ã
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">{state.logos.length}</div>
              <p className="text-sm text-slate-600">–õ–æ–≥–æ—Ç–∏–ø–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ</p>
              <div className="mt-4 space-y-2">
                {state.logos.slice(0, 3).map(logo => (
                  <div key={logo.id} className="text-sm bg-slate-100 p-2 rounded">
                    {logo.name}
                  </div>
                ))}
                {state.logos.length > 3 && (
                  <div className="text-sm text-slate-500">
                    ... –∏ –µ—â–µ {state.logos.length - 3}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <RefreshCw className="w-5 h-5 mr-2 text-blue-500" />
                –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <Button 
                  onClick={addTestLogo} 
                  className="w-full bg-green-600 hover:bg-green-700"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø
                </Button>
                <Button 
                  onClick={deleteLastLogo} 
                  variant="outline"
                  className="w-full"
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–æ—Ç–∏–ø
                </Button>
                <Button 
                  onClick={forceRefresh} 
                  variant="outline"
                  className="w-full"
                >
                  <RefreshCw className="w-4 h-4 mr-2" />
                  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span className="flex items-center">
                <RefreshCw className="w-5 h-5 mr-2" />
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
              </span>
              <div className="flex gap-2">
                <Button 
                  onClick={runDeletionTest} 
                  disabled={isRunning}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {isRunning ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç'}
                </Button>
                <Button 
                  onClick={clearResults} 
                  variant="outline"
                  disabled={isRunning}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {testResults.length > 0 ? (
              <div className="space-y-2 max-h-96 overflow-y-auto bg-slate-50 p-4 rounded-lg">
                {testResults.map((result, index) => (
                  <div key={index} className="text-sm font-mono">
                    {result}
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-slate-500 text-center py-8">
                –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
              </div>
            )}
          </CardContent>
        </Card>

        <div className="mt-8 flex gap-4">
          <Button asChild className="bg-green-600 hover:bg-green-700">
            <a href="/admin/logos">
              <Trash2 className="w-4 h-4 mr-2" />
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            </a>
          </Button>
          
          <Button variant="outline" asChild>
            <a href="/">
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </a>
          </Button>
        </div>
      </div>
    </div>
  );
};

export default TestLogoDeletion;
