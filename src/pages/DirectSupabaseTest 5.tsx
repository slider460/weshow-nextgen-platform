import React, { useState } from 'react';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
import { createClient } from '@supabase/supabase-js';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE';

const DirectSupabaseTest: React.FC = () => {
  const [result, setResult] = useState<string>('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  const testDirectConnection = async () => {
    setLoading(true);
    setResult('–ó–∞–≥—Ä—É–∑–∫–∞...');
    setError(null);
    setData(null);
    
    try {
      console.log('===== –ü–†–Ø–ú–û–ô –¢–ï–°–¢ SUPABASE =====');
      console.log('1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Supabase...');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑
      const directClient = createClient(supabaseUrl, supabaseKey, {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      });
      
      console.log('2. URL:', supabaseUrl);
      console.log('3. Key —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!supabaseKey);
      
      const startTime = Date.now();
      
      console.log('4. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');
      const response = await directClient
        .from('logos')
        .select('id, name, logo_url, is_active')
        .limit(5);
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      console.log('5. –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞', duration, '–º—Å');
      console.log('6. Response:', response);
      
      if (response.error) {
        const errorMsg = `‚ùå –û–®–ò–ë–ö–ê: ${response.error.message}\n–ö–æ–¥: ${response.error.code}\n–î–µ—Ç–∞–ª–∏: ${response.error.details || '–Ω–µ—Ç'}`;
        setResult(errorMsg);
        setError(response.error.message);
        console.error('–û–®–ò–ë–ö–ê:', response.error);
      } else {
        const count = response.data?.length || 0;
        setResult(`‚úÖ –£–°–ü–ï–®–ù–û! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${count} –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∑–∞ ${duration}–º—Å`);
        setData(response.data);
        console.log('–£–°–ü–ï–®–ù–û! –î–∞–Ω–Ω—ã–µ:', response.data);
      }
      
    } catch (err) {
      console.error('–ò–°–ö–õ–Æ–ß–ï–ù–ò–ï:', err);
      const errorMsg = `‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: ${err instanceof Error ? err.message : String(err)}`;
      setResult(errorMsg);
      setError(errorMsg);
    } finally {
      setLoading(false);
      console.log('===== –ö–û–ù–ï–¶ –¢–ï–°–¢–ê =====');
    }
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: '#f0f0f0',
      padding: '2rem',
      fontFamily: 'Arial, sans-serif'
    }}>
      <div style={{ 
        maxWidth: '800px', 
        margin: '0 auto',
        background: 'white',
        borderRadius: '12px',
        padding: '2rem',
        boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
      }}>
        <h1 style={{ 
          fontSize: '2rem', 
          marginBottom: '1.5rem', 
          textAlign: 'center',
          color: '#1f2937'
        }}>
          üîß –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Supabase (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤)
        </h1>
        
        <div style={{ marginBottom: '2rem' }}>
          <button
            onClick={testDirectConnection}
            disabled={loading}
            style={{
              display: 'block',
              width: '100%',
              padding: '1rem',
              fontSize: '1.2rem',
              fontWeight: 'bold',
              color: 'white',
              backgroundColor: loading ? '#6b7280' : '#22c55e',
              border: 'none',
              borderRadius: '0.5rem',
              cursor: loading ? 'not-allowed' : 'pointer',
              transition: 'background-color 0.3s ease'
            }}
          >
            {loading ? '‚è≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º...' : 'üöÄ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Supabase'}
          </button>
        </div>

        <div style={{
          backgroundColor: '#f8fafc',
          padding: '1rem',
          borderRadius: '0.5rem',
          marginBottom: '1rem',
          border: '1px solid #e2e8f0',
          whiteSpace: 'pre-line',
          fontFamily: 'monospace',
          fontSize: '0.9rem'
        }}>
          <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong><br />
          {result}
        </div>

        {error && (
          <div style={{
            backgroundColor: '#fee2e2',
            color: '#dc2626',
            padding: '1rem',
            borderRadius: '0.5rem',
            marginBottom: '1rem',
            border: '1px solid #fca5a5'
          }}>
            <strong>‚ùå –û—à–∏–±–∫–∞:</strong><br />
            {error}
          </div>
        )}

        {data && data.length > 0 && (
          <div style={{
            backgroundColor: '#ecfdf5',
            padding: '1rem',
            borderRadius: '0.5rem',
            marginBottom: '1rem',
            border: '1px solid #a7f3d0'
          }}>
            <strong>‚úÖ –î–∞–Ω–Ω—ã–µ:</strong><br />
            {JSON.stringify(data, null, 2)}
          </div>
        )}

        <div style={{
          backgroundColor: '#eff6ff',
          padding: '1rem',
          borderRadius: '0.5rem',
          border: '1px solid #93c5fd'
        }}>
          <strong>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br />
          ‚Ä¢ –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Supabase –∫–∞–∂–¥—ã–π —Ä–∞–∑<br />
          ‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç React –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã<br />
          ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å 5 –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã<br />
          ‚Ä¢ –û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        </div>
      </div>
    </div>
  );
};

export default DirectSupabaseTest;
