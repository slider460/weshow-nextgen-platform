import { useEffect } from 'react';

interface ResourcePreloaderProps {
  preloadImages?: string[];
  preloadFonts?: string[];
  preloadScripts?: string[];
  preloadStyles?: string[];
  criticalResources?: string[];
}

const ResourcePreloader = ({
  preloadImages = [
    '/weshow-logo-2025.svg',
    '/og-image.jpg',
    '/hero-background.webp'
  ],
  preloadFonts = [
    'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap'
  ],
  preloadScripts = [],
  preloadStyles = [],
  criticalResources = []
}: ResourcePreloaderProps) => {
  
  useEffect(() => {
    const preloadResource = (href: string, as: string, type?: string, crossorigin?: boolean) => {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.href = href;
      link.as = as;
      
      if (type) link.type = type;
      if (crossorigin) link.crossOrigin = 'anonymous';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
      link.onload = () => {
        console.log(`‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω —Ä–µ—Å—É—Ä—Å: ${href}`);
      };
      
      link.onerror = () => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: ${href}`);
      };
      
      document.head.appendChild(link);
      return link;
    };

    const preloadedLinks: HTMLLinkElement[] = [];

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    preloadImages.forEach(src => {
      const link = preloadResource(src, 'image');
      preloadedLinks.push(link);
    });

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
    preloadFonts.forEach(href => {
      const link = preloadResource(href, 'style', 'text/css', true);
      preloadedLinks.push(link);
    });

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
    preloadScripts.forEach(src => {
      const link = preloadResource(src, 'script', 'text/javascript');
      preloadedLinks.push(link);
    });

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
    preloadStyles.forEach(href => {
      const link = preloadResource(href, 'style', 'text/css');
      preloadedLinks.push(link);
    });

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    criticalResources.forEach(href => {
      const link = preloadResource(href, 'fetch', undefined, true);
      link.setAttribute('fetchpriority', 'high');
      preloadedLinks.push(link);
    });

    // DNS –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const preconnectDomains = [
      'https://fonts.googleapis.com',
      'https://fonts.gstatic.com'
    ];

    preconnectDomains.forEach(domain => {
      const link = document.createElement('link');
      link.rel = 'preconnect';
      link.href = domain;
      link.crossOrigin = 'anonymous';
      document.head.appendChild(link);
      preloadedLinks.push(link);
    });

    // –ü—Ä–µ—Ñ–µ—Ç—á –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
    const prefetchPages = [
      '/services',
      '/portfolio',
      '/contact',
      '/about'
    ];

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É, –º–æ–∂–Ω–æ –ø—Ä–µ—Ñ–µ—Ç—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          prefetchPages.forEach(page => {
            const link = document.createElement('link');
            link.rel = 'prefetch';
            link.href = page;
            document.head.appendChild(link);
            preloadedLinks.push(link);
          });
          observer.disconnect();
        }
      });
    });

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ footer'–æ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ—Ñ–µ—Ç—á–∞
    const footer = document.querySelector('footer');
    if (footer) {
      observer.observe(footer);
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    const handleFirstInteraction = () => {
      // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
      const interactiveResources = [
        '/game',
        '/equipment',
        '/services/multimedia'
      ];

      interactiveResources.forEach(resource => {
        const link = document.createElement('link');
        link.rel = 'prefetch';
        link.href = resource;
        document.head.appendChild(link);
        preloadedLinks.push(link);
      });

      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      document.removeEventListener('mousemove', handleFirstInteraction);
      document.removeEventListener('scroll', handleFirstInteraction);
      document.removeEventListener('click', handleFirstInteraction);
    };

    document.addEventListener('mousemove', handleFirstInteraction, { once: true });
    document.addEventListener('scroll', handleFirstInteraction, { once: true });
    document.addEventListener('click', handleFirstInteraction, { once: true });

    // Resource Hints –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const addResourceHints = () => {
      // Prefetch –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      const veryLikelyResources = [
        '/api/services',
        '/api/portfolio'
      ];

      veryLikelyResources.forEach(resource => {
        const link = document.createElement('link');
        link.rel = 'prefetch';
        link.href = resource;
        document.head.appendChild(link);
        preloadedLinks.push(link);
      });
    };

    // –î–æ–±–∞–≤–ª—è–µ–º resource hints –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'complete') {
      addResourceHints();
    } else {
      window.addEventListener('load', addResourceHints);
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    console.log('üöÄ ResourcePreloader: –ù–∞—á–∞—Ç–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤', {
      images: preloadImages.length,
      fonts: preloadFonts.length,
      scripts: preloadScripts.length,
      styles: preloadStyles.length,
      critical: criticalResources.length
    });

    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (—Ö–æ—Ç—è –æ–±—ã—á–Ω–æ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ)
      observer.disconnect();
      document.removeEventListener('mousemove', handleFirstInteraction);
      document.removeEventListener('scroll', handleFirstInteraction);
      document.removeEventListener('click', handleFirstInteraction);
      window.removeEventListener('load', addResourceHints);
    };
  }, [preloadImages, preloadFonts, preloadScripts, preloadStyles, criticalResources]);

  return null; // –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç
};

export default ResourcePreloader;