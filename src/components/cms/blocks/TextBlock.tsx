/**
 * –¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è CMS —Å–∏—Å—Ç–µ–º—ã WESHOW
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */

import React, { useState } from 'react';
import { BaseBlock } from './BaseBlock';
import { Button } from '../../ui/button';
import { cn } from '../../../lib/utils';
import {
  ContentBlock,
  TextBlockContent,
  MultiLanguageContent
} from '../../../types/cms';

// =============================================================================
// –¢–ò–ü–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´
// =============================================================================

interface TextBlockProps {
  /** –î–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ */
  block: ContentBlock & { content: TextBlockContent };
  
  /** –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */
  mode: 'edit' | 'preview' | 'live';
  
  /** –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ */
  screenSize?: 'mobile' | 'tablet' | 'desktop';
  
  /** –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ */
  language?: 'ru' | 'en';
  
  /** –í—ã–±—Ä–∞–Ω –ª–∏ –±–ª–æ–∫ */
  isSelected?: boolean;
  
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π */
  onSelect?: (blockId: string) => void;
  onEdit?: (blockId: string) => void;
  onDelete?: (blockId: string) => void;
  onMove?: (blockId: string, direction: 'up' | 'down') => void;
  onDuplicate?: (blockId: string) => void;
  onUpdate?: (blockId: string, updates: Partial<ContentBlock>) => void;
}

// =============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´
// =============================================================================

interface TextContentProps {
  content: TextBlockContent;
  language: 'ru' | 'en';
  mode: 'edit' | 'preview' | 'live';
}

const TextContent: React.FC<TextContentProps> = ({
  content,
  language,
  mode
}) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const getLocalizedText = (text: MultiLanguageContent): string => {
    return text[language] || text.ru || '';
  };

  const shouldShowReadMore = content.showReadMore && content.readMoreLimit && content.readMoreLimit > 0;
  const textContent = getLocalizedText(content.content);
  const isContentLong = textContent.length > (content.readMoreLimit || 0);
  const displayText = shouldShowReadMore && !isExpanded && isContentLong
    ? textContent.substring(0, content.readMoreLimit) + '...'
    : textContent;

  const renderContent = () => {
    switch (content.format) {
      case 'html':
        return (
          <div
            className="prose prose-lg max-w-none"
            dangerouslySetInnerHTML={{ __html: displayText }}
          />
        );
      
      case 'markdown':
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–µ—Ä Markdown, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        return (
          <div className="prose prose-lg max-w-none whitespace-pre-wrap">
            {displayText}
          </div>
        );
      
      case 'plain':
      default:
        return (
          <div className="whitespace-pre-wrap leading-relaxed">
            {displayText}
          </div>
        );
    }
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      {content.title && (
        <h2 className="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-900 mb-6">
          {getLocalizedText(content.title)}
        </h2>
      )}
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="text-gray-700 leading-relaxed">
        {renderContent()}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∞ "–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ" */}
      {shouldShowReadMore && isContentLong && mode === 'live' && (
        <div className="mt-4">
          <Button
            variant="outline"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded 
              ? (language === 'ru' ? '–°–≤–µ—Ä–Ω—É—Ç—å' : 'Collapse')
              : (language === 'ru' ? '–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ' : 'Read more')
            }
          </Button>
        </div>
      )}
    </div>
  );
};

// =============================================================================
// –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –¢–ï–ö–°–¢–û–í–û–ì–û –ë–õ–û–ö–ê
// =============================================================================

export const TextBlock: React.FC<TextBlockProps> = ({
  block,
  mode,
  screenSize = 'desktop',
  language = 'ru',
  isSelected,
  onSelect,
  onEdit,
  onDelete,
  onMove,
  onDuplicate,
  onUpdate
}) => {
  const content = block.content;

  return (
    <BaseBlock
      block={block}
      mode={mode}
      screenSize={screenSize}
      isSelected={isSelected}
      onSelect={onSelect}
      onEdit={onEdit}
      onDelete={onDelete}
      onMove={onMove}
      onDuplicate={onDuplicate}
      onUpdate={onUpdate}
      className="py-8"
    >
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <TextContent
          content={content}
          language={language}
          mode={mode}
        />
      </div>
    </BaseBlock>
  );
};

// =============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–õ–û–ö–ê
// =============================================================================

export const textBlockConfig = {
  type: 'text',
  name: {
    ru: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
    en: 'Text Block'
  },
  description: {
    ru: '–ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤',
    en: 'Block for displaying text content with support for different formats'
  },
  icon: 'üìù',
  category: 'content',
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  defaultContent: {
    title: {
      ru: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏',
      en: 'Section Title'
    },
    content: {
      ru: '–ó–¥–µ—Å—å —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, HTML –∏–ª–∏ Markdown.',
      en: 'Here is the main text content. You can use different formats: plain text, HTML or Markdown.'
    },
    format: 'plain',
    showReadMore: false,
    readMoreLimit: 300
  } as TextBlockContent,
  
  defaultSettings: {
    backgroundColor: 'transparent',
    textColor: '#374151',
    padding: { top: 32, right: 0, bottom: 32, left: 0 },
    width: 'container',
    alignment: 'left',
    responsive: {
      mobile: {
        padding: { top: 24, right: 16, bottom: 24, left: 16 }
      },
      tablet: {
        padding: { top: 28, right: 24, bottom: 28, left: 24 }
      }
    }
  },
  
  // –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  editableFields: [
    {
      name: 'title',
      type: 'multilang-text',
      label: { ru: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', en: 'Title' }
    },
    {
      name: 'content',
      type: 'multilang-textarea',
      label: { ru: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ', en: 'Content' },
      required: true,
      rows: 10
    },
    {
      name: 'format',
      type: 'select',
      label: { ru: '–§–æ—Ä–º–∞—Ç', en: 'Format' },
      options: [
        { value: 'plain', label: { ru: '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç', en: 'Plain text' } },
        { value: 'html', label: { ru: 'HTML', en: 'HTML' } },
        { value: 'markdown', label: { ru: 'Markdown', en: 'Markdown' } }
      ],
      defaultValue: 'plain'
    },
    {
      name: 'showReadMore',
      type: 'checkbox',
      label: { ru: '–ü–æ–∫–∞–∑–∞—Ç—å "–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ"', en: 'Show "Read more"' }
    },
    {
      name: 'readMoreLimit',
      type: 'number',
      label: { ru: '–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è "–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ"', en: 'Character limit for "Read more"' },
      min: 100,
      max: 1000,
      step: 50,
      dependsOn: { field: 'showReadMore', value: true }
    }
  ]
};

export default TextBlock;