// –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è production
// –°–æ–±–∏—Ä–∞–µ—Ç Core Web Vitals –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É

interface PerformanceMetric {
  name: string;
  value: number;
  rating: 'good' | 'needs-improvement' | 'poor';
  timestamp: number;
  url: string;
}

interface WebVitalsThresholds {
  LCP: { good: number; poor: number };
  FID: { good: number; poor: number };
  CLS: { good: number; poor: number };
  INP: { good: number; poor: number };
  TTFB: { good: number; poor: number };
  FCP: { good: number; poor: number };
}

// –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ Web Vitals
const THRESHOLDS: WebVitalsThresholds = {
  LCP: { good: 2500, poor: 4000 },
  FID: { good: 100, poor: 300 },
  CLS: { good: 0.1, poor: 0.25 },
  INP: { good: 200, poor: 500 },
  TTFB: { good: 800, poor: 1800 },
  FCP: { good: 1800, poor: 3000 },
};

class PerformanceMonitorService {
  private metrics: PerformanceMetric[] = [];
  private isProduction: boolean;
  private endpoint: string | null = null;

  constructor() {
    this.isProduction = import.meta.env.PROD;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫
   */
  setEndpoint(endpoint: string) {
    this.endpoint = endpoint;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫–∏
   */
  private getRating(name: string, value: number): 'good' | 'needs-improvement' | 'poor' {
    const threshold = THRESHOLDS[name as keyof WebVitalsThresholds];
    if (!threshold) return 'good';

    if (value <= threshold.good) return 'good';
    if (value <= threshold.poor) return 'needs-improvement';
    return 'poor';
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫—É
   */
  recordMetric(name: string, value: number) {
    const metric: PerformanceMetric = {
      name,
      value,
      rating: this.getRating(name, value),
      timestamp: Date.now(),
      url: window.location.href,
    };

    this.metrics.push(metric);

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤ dev —Ä–µ–∂–∏–º–µ
    if (!this.isProduction) {
      console.log(`üìä Performance Metric [${metric.rating}]:`, {
        metric: name,
        value: `${value.toFixed(2)}ms`,
        rating: metric.rating,
        url: metric.url,
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    this.sendToAnalytics(metric);
  }

  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç Core Web Vitals –∏—Å–ø–æ–ª—å–∑—É—è Performance Observer API
   */
  observeWebVitals() {
    // LCP (Largest Contentful Paint)
    this.observeLCP();

    // FID (First Input Delay) - deprecated, –∏—Å–ø–æ–ª—å–∑—É–µ–º INP
    this.observeINP();

    // CLS (Cumulative Layout Shift)
    this.observeCLS();

    // TTFB (Time to First Byte)
    this.observeTTFB();

    // FCP (First Contentful Paint)
    this.observeFCP();
  }

  private observeLCP() {
    if (!('PerformanceObserver' in window)) return;

    try {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1] as any;
        if (lastEntry) {
          this.recordMetric('LCP', lastEntry.renderTime || lastEntry.loadTime);
        }
      });

      observer.observe({ type: 'largest-contentful-paint', buffered: true });
    } catch (e) {
      console.warn('LCP observation not supported');
    }
  }

  private observeINP() {
    if (!('PerformanceObserver' in window)) return;

    try {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          const interactionEntry = entry as any;
          if (interactionEntry.duration) {
            this.recordMetric('INP', interactionEntry.duration);
          }
        }
      });

      observer.observe({ type: 'event', buffered: true, durationThreshold: 16 });
    } catch (e) {
      // INP –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
      console.warn('INP observation not supported');
    }
  }

  private observeCLS() {
    if (!('PerformanceObserver' in window)) return;

    try {
      let clsValue = 0;

      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          const layoutShift = entry as any;
          // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–¥–≤–∏–≥–∏ (–±–µ–∑ user input)
          if (!layoutShift.hadRecentInput) {
            clsValue += layoutShift.value;
            this.recordMetric('CLS', clsValue);
          }
        }
      });

      observer.observe({ type: 'layout-shift', buffered: true });
    } catch (e) {
      console.warn('CLS observation not supported');
    }
  }

  private observeTTFB() {
    if (!('PerformanceObserver' in window)) return;

    try {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry: any) => {
          if (entry.responseStart > 0) {
            const ttfb = entry.responseStart - entry.requestStart;
            this.recordMetric('TTFB', ttfb);
          }
        });
      });

      observer.observe({ type: 'navigation', buffered: true });
    } catch (e) {
      console.warn('TTFB observation not supported');
    }
  }

  private observeFCP() {
    if (!('PerformanceObserver' in window)) return;

    try {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry: any) => {
          if (entry.name === 'first-contentful-paint') {
            this.recordMetric('FCP', entry.startTime);
          }
        });
      });

      observer.observe({ type: 'paint', buffered: true });
    } catch (e) {
      console.warn('FCP observation not supported');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
   */
  private sendToAnalytics(metric: PerformanceMetric) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ production
    if (!this.isProduction) return;

    // Google Analytics 4
    if (typeof gtag !== 'undefined') {
      gtag('event', metric.name, {
        event_category: 'Web Vitals',
        event_label: metric.url,
        value: Math.round(metric.value),
        metric_rating: metric.rating,
        non_interaction: true,
      });
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π endpoint (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (this.endpoint) {
      this.sendToCustomEndpoint(metric);
    }

    // Sentry Performance Monitoring (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω)
    if (typeof Sentry !== 'undefined' && Sentry.metrics) {
      Sentry.metrics.distribution(metric.name, metric.value, {
        tags: {
          rating: metric.rating,
          url: metric.url,
        },
        unit: 'millisecond',
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π endpoint
   */
  private async sendToCustomEndpoint(metric: PerformanceMetric) {
    try {
      await fetch(this.endpoint!, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(metric),
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º keepalive –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keepalive: true,
      });
    } catch (error) {
      console.error('Failed to send performance metric:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
   */
  getMetrics(): PerformanceMetric[] {
    return [...this.metrics];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∏–º–µ–Ω–∏
   */
  getMetricsByName(name: string): PerformanceMetric[] {
    return this.metrics.filter((m) => m.name === name);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–µ—Ç—Ä–∏–∫—É
   */
  getLastMetric(name: string): PerformanceMetric | undefined {
    const metrics = this.getMetricsByName(name);
    return metrics[metrics.length - 1];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
   */
  getStats() {
    const stats: Record<string, { avg: number; min: number; max: number; count: number }> = {};

    this.metrics.forEach((metric) => {
      if (!stats[metric.name]) {
        stats[metric.name] = {
          avg: 0,
          min: Infinity,
          max: -Infinity,
          count: 0,
        };
      }

      const stat = stats[metric.name];
      stat.count++;
      stat.min = Math.min(stat.min, metric.value);
      stat.max = Math.max(stat.max, metric.value);
      stat.avg = (stat.avg * (stat.count - 1) + metric.value) / stat.count;
    });

    return stats;
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ long tasks (–∑–∞–¥–∞—á–∏ > 50ms)
   */
  monitorLongTasks() {
    if (!('PerformanceObserver' in window)) return;

    try {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          const taskEntry = entry as any;
          if (taskEntry.duration > 50) {
            console.warn(`‚ö†Ô∏è Long Task detected: ${taskEntry.duration.toFixed(2)}ms`, {
              name: taskEntry.name,
              startTime: taskEntry.startTime,
              duration: taskEntry.duration,
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ custom –º–µ—Ç—Ä–∏–∫—É
            this.recordMetric('LongTask', taskEntry.duration);
          }
        }
      });

      observer.observe({ type: 'longtask', buffered: true });
    } catch (e) {
      console.warn('Long task monitoring not supported');
    }
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  monitorResourceTiming() {
    if (!('PerformanceObserver' in window)) return;

    try {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          const resource = entry as PerformanceResourceTiming;
          
          // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (> 1 —Å–µ–∫)
          if (resource.duration > 1000) {
            console.warn(`‚ö†Ô∏è Slow Resource: ${resource.name}`, {
              duration: `${resource.duration.toFixed(2)}ms`,
              size: resource.transferSize,
              type: resource.initiatorType,
            });
          }
        }
      });

      observer.observe({ type: 'resource', buffered: true });
    } catch (e) {
      console.warn('Resource timing monitoring not supported');
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  logPagePerformance() {
    if (!this.isProduction) {
      console.log('üìä Performance Stats:', this.getStats());
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
   */
  cleanupMetrics() {
    if (this.metrics.length > 100) {
      this.metrics = this.metrics.slice(-100);
    }
  }
}

// Singleton instance
export const performanceMonitor = new PerformanceMonitorService();

// –•–µ–ª–ø–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const usePerformanceMonitoring = (enabled: boolean = true) => {
  useEffect(() => {
    if (!enabled) return;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    performanceMonitor.observeWebVitals();
    performanceMonitor.monitorLongTasks();
    performanceMonitor.monitorResourceTiming();

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      performanceMonitor.logPagePerformance();
      performanceMonitor.cleanupMetrics();
    };
  }, [enabled]);

  return performanceMonitor;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
export const recordCustomMetric = (name: string, value: number) => {
  performanceMonitor.recordMetric(name, value);
};

// –•–µ–ª–ø–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
export const measurePerformance = async <T>(
  name: string,
  fn: () => T | Promise<T>
): Promise<T> => {
  const start = performance.now();
  try {
    const result = await fn();
    const duration = performance.now() - start;
    performanceMonitor.recordMetric(name, duration);
    return result;
  } catch (error) {
    const duration = performance.now() - start;
    performanceMonitor.recordMetric(`${name}_error`, duration);
    throw error;
  }
};

// React
import { useEffect } from 'react';

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
  (window as any).__performanceMonitor = performanceMonitor;
}


