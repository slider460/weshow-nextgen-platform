#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseFields() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const { data: cases, error } = await supabase
      .from('cases')
      .select('*')
      .limit(1)
      .single();
      
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–∞: ${error.message}`);
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    Object.keys(cases).forEach(key => {
      console.log(`   - ${key}: ${typeof cases[key]} = ${cases[key]}`);
    });
    
    return cases;
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –∫–µ–π—Å–∞
async function createCompatibleCase() {
  console.log('\nüìù –°–æ–∑–¥–∞—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–µ–π—Å...');
  
  try {
    const compatibleCase = {
      title: '–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –∫–µ–π—Å–∞',
      detailed_description: '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –∫–µ–π—Å–∞',
      client: '–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–ª–∏–µ–Ω—Ç',
      year: 2024,
      image_url: null,
      video_url: null,
      results: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞',
      is_visible: true,
      sort_order: 8888,
      featured: false,
      gallery_images: null,
      gallery_videos: null,
      project_duration: '3 –º–µ—Å—è—Ü–∞',
      team_size: 3,
      budget_range: '–°—Ä–µ–¥–Ω–∏–π',
      challenges: '–í—ã–∑–æ–≤—ã –ø—Ä–æ–µ–∫—Ç–∞',
      solutions: '–†–µ—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
      technologies_used: ['React', 'Node.js'],
      project_scope: '–ü–æ–ª–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      client_feedback: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
      awards: null,
      case_study_url: null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { data: newCase, error } = await supabase
      .from('cases')
      .insert(compatibleCase)
      .select()
      .single();
      
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –∫–µ–π—Å–∞: ${error.message}`);
      return false;
    } else {
      console.log(`‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω: ${newCase.id}`);
      return true;
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function testAPIWithCompatibleData() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é API —Å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
  
  try {
    const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
    const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE';
    
    const testData = {
      title: 'API —Ç–µ—Å—Ç –∫–µ–π—Å',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ API —Ç–µ—Å—Ç –∫–µ–π—Å–∞',
      client: 'API —Ç–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç',
      year: 2024,
      is_visible: true,
      sort_order: 7777,
      featured: false,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const response = await fetch(`${SUPABASE_URL}/rest/v1/cases`, {
      method: 'POST',
      headers: {
        'apikey': SUPABASE_KEY,
        'Authorization': `Bearer ${SUPABASE_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      return false;
    }
    
    const result = await response.json();
    console.log(`‚úÖ API —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: ${result[0]?.id}`);
    return true;
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function checkCaseFields() {
  console.log('üöÄ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –ö–ï–ô–°–û–í...\n');
  
  const dbFields = await checkDatabaseFields();
  
  if (dbFields) {
    await createCompatibleCase();
    await testAPIWithCompatibleData();
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('‚úÖ –ü–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
    console.log('‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω');
    console.log('‚úÖ API —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω');
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkCaseFields();
