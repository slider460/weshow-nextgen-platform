#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ anon key
async function getCorrectAnonKey() {
  console.log('üîç –ü–æ–ª—É—á–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π anon key...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ anon keys
    const testKeys = [
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE', // –¢–µ–∫—É—â–∏–π
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.Vy7LdF6xJYVhVvQnKqBqJXzJYVhVvQnKqBqJXzJYVhVvQnKqBqJXz', // –¢–µ—Å—Ç–æ–≤—ã–π
    ];
    
    for (let i = 0; i < testKeys.length; i++) {
      const key = testKeys[i];
      console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –∫–ª—é—á ${i + 1}:`);
      
      const testClient = createClient(supabaseUrl, key);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
      const { data, error } = await testClient
        .from('cases')
        .select('count')
        .limit(1);
        
      if (error) {
        console.log(`‚ùå –ö–ª—é—á ${i + 1}: ${error.message}`);
      } else {
        console.log(`‚úÖ –ö–ª—é—á ${i + 1}: —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
        return key;
      }
    }
    
    return null;
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
async function testAuthWithCorrectKey(anonKey) {
  console.log('\nüîê –¢–µ—Å—Ç–∏—Ä—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º...');
  
  try {
    const client = createClient(supabaseUrl, anonKey);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { data: authData, error: authError } = await client.auth.signInWithPassword({
      email: 'admin@weshow.ru',
      password: 'password'
    });
    
    if (authError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`);
      return false;
    } else {
      console.log(`‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${authData.user?.email}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–µ–π—Å–æ–≤ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const { data: casesData, error: casesError } = await client
        .from('cases')
        .select('*')
        .order('sort_order', { ascending: true });
        
      if (casesError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤: ${casesError.message}`);
        return false;
      } else {
        console.log(`‚úÖ –ö–µ–π—Å—ã –ø–æ–ª—É—á–µ–Ω—ã: ${casesData?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
        return true;
      }
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function fixSupabaseConfig() {
  console.log('üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò SUPABASE...\n');
  
  const correctKey = await getCorrectAnonKey();
  
  if (!correctKey) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π anon key');
    return;
  }
  
  console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π anon key: ${correctKey.slice(0, 50)}...`);
  
  const authWorks = await testAuthWithCorrectKey(correctKey);
  
  if (authWorks) {
    console.log('\nüéâ –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!');
    console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π anon key –Ω–∞–π–¥–µ–Ω');
    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ö–µ–π—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
    console.log('\nüîß –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ src/config/supabase.ts');
    console.log(`\nüìù –ù–æ–≤—ã–π anon key: ${correctKey}`);
  } else {
    console.log('\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ anon key');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixSupabaseConfig();


