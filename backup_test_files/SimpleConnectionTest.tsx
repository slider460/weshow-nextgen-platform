import React, { useState } from 'react';

export const SimpleConnectionTest: React.FC = () => {
  const [results, setResults] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const addResult = (message: string) => {
    setResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const testDirectConnection = async () => {
    setIsLoading(true);
    setResults([]);

    const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
    const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE';

    try {
      addResult('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
      
      // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å
      addResult('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ /rest/v1...');
      
      const response = await fetch(`${SUPABASE_URL}/rest/v1/`, {
        method: 'GET',
        headers: {
          'apikey': SUPABASE_KEY,
          'Authorization': `Bearer ${SUPABASE_KEY}`,
          'Content-Type': 'application/json',
        },
      });

      addResult(`üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        addResult('‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        
        // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ logos
        addResult('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ logos...');
        
        const logosResponse = await fetch(`${SUPABASE_URL}/rest/v1/logos?select=*&limit=1`, {
          method: 'GET',
          headers: {
            'apikey': SUPABASE_KEY,
            'Authorization': `Bearer ${SUPABASE_KEY}`,
            'Content-Type': 'application/json',
          },
        });

        addResult(`üìä Logos –æ—Ç–≤–µ—Ç: ${logosResponse.status} ${logosResponse.statusText}`);
        
        if (logosResponse.ok) {
          const data = await logosResponse.json();
          addResult(`‚úÖ Logos –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${data.length} –∑–∞–ø–∏—Å–µ–π`);
          addResult(`üìã –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data)}`);
        } else {
          const errorText = await logosResponse.text();
          addResult(`‚ùå –û—à–∏–±–∫–∞ logos: ${errorText}`);
        }

        // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ homepage_equipment
        addResult('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ homepage_equipment...');
        
        const equipmentResponse = await fetch(`${SUPABASE_URL}/rest/v1/homepage_equipment?select=*&limit=1`, {
          method: 'GET',
          headers: {
            'apikey': SUPABASE_KEY,
            'Authorization': `Bearer ${SUPABASE_KEY}`,
            'Content-Type': 'application/json',
          },
        });

        addResult(`üìä Equipment –æ—Ç–≤–µ—Ç: ${equipmentResponse.status} ${equipmentResponse.statusText}`);
        
        if (equipmentResponse.ok) {
          const data = await equipmentResponse.json();
          addResult(`‚úÖ Equipment –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${data.length} –∑–∞–ø–∏—Å–µ–π`);
          addResult(`üìã –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data)}`);
        } else {
          const errorText = await equipmentResponse.text();
          addResult(`‚ùå –û—à–∏–±–∫–∞ equipment: ${errorText}`);
        }

      } else {
        const errorText = await response.text();
        addResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${errorText}`);
      }

    } catch (error) {
      addResult(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error}`);
    }

    setIsLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-6">
            üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          </h1>
          
          <div className="mb-6">
            <button
              onClick={testDirectConnection}
              disabled={isLoading}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
            </button>
          </div>

          <div className="bg-gray-100 p-4 rounded-lg">
            <h3 className="font-semibold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
            <div className="space-y-1 max-h-96 overflow-y-auto">
              {results.length === 0 ? (
                <p className="text-gray-500">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞</p>
              ) : (
                results.map((result, index) => (
                  <div key={index} className="text-sm font-mono bg-white p-2 rounded border">
                    {result}
                  </div>
                ))
              )}
            </div>
          </div>

          <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h3 className="font-semibold text-blue-900 mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>‚Ä¢ –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase REST API</li>
              <li>‚Ä¢ –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Supabase</li>
              <li>‚Ä¢ –ï—Å–ª–∏ —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
              <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Supabase Dashboard</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};
