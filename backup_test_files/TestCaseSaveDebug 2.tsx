import React, { useState } from 'react';
import { createCase, updateCase, getCases } from '../api/adminRest';

const TestCaseSaveDebug: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<string>('');
  const [error, setError] = useState<string>('');
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    setLogs(prev => [...prev, logMessage]);
    console.log(logMessage);
  };

  const clearLogs = () => {
    setLogs([]);
    setResult('');
    setError('');
  };

  const testCreateCase = async () => {
    setLoading(true);
    setError('');
    setResult('');
    addLog('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞...');

    try {
      const testData = {
        title: `–¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å ${Date.now()}`,
        client: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
        year: 2024,
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–µ–π—Å–∞',
        results: JSON.stringify(['–†–µ–∑—É–ª—å—Ç–∞—Ç 1', '–†–µ–∑—É–ª—å—Ç–∞—Ç 2']),
        is_visible: true,
        sort_order: 9999,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      addLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: ' + JSON.stringify(testData, null, 2));
      
      const startTime = Date.now();
      addLog('‚è±Ô∏è –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞...');
      
      const response = await createCase(testData);
      
      const endTime = Date.now();
      addLog(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${endTime - startTime}–º—Å`);
      addLog('üìã –û—Ç–≤–µ—Ç: ' + JSON.stringify(response, null, 2));
      
      setResult(`‚úÖ –ö–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${endTime - startTime}–º—Å\nID: ${response?.[0]?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
    } catch (err) {
      addLog('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞: ' + (err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞:', err);
      setError(`‚ùå –û—à–∏–±–∫–∞: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setLoading(false);
      addLog('üèÅ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  };

  const testUpdateCase = async () => {
    setLoading(true);
    setError('');
    setResult('');
    addLog('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ–π—Å–∞...');

    try {
      addLog('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤...');
      const cases = await getCases();
      
      if (!cases || cases.length === 0) {
        throw new Error('–ù–µ—Ç –∫–µ–π—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      }
      
      const firstCase = cases[0];
      addLog(`üìã –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ–π—Å: ${firstCase.id} - ${firstCase.title}`);
      
      const updateData = {
        title: `${firstCase.title} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${new Date().toLocaleTimeString()})`,
        updated_at: new Date().toISOString()
      };

      addLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + JSON.stringify(updateData, null, 2));
      
      const startTime = Date.now();
      addLog('‚è±Ô∏è –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
      
      const response = await updateCase(firstCase.id, updateData);
      
      const endTime = Date.now();
      addLog(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${endTime - startTime}–º—Å`);
      addLog('üìã –û—Ç–≤–µ—Ç: ' + JSON.stringify(response, null, 2));
      
      setResult(`‚úÖ –ö–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${endTime - startTime}–º—Å\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${response?.[0]?.title || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
    } catch (err) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ–π—Å–∞: ' + (err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ–π—Å–∞:', err);
      setError(`‚ùå –û—à–∏–±–∫–∞: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setLoading(false);
      addLog('üèÅ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  };

  const testFormData = () => {
    addLog('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã...');
    
    const testFormData = {
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å',
      client: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
      year: 2024,
      description: '–û–ø–∏—Å–∞–Ω–∏–µ',
      detailed_description: '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
      results: ['–†–µ–∑—É–ª—å—Ç–∞—Ç 1', '–†–µ–∑—É–ª—å—Ç–∞—Ç 2'],
      technologies_used: ['React', 'Node.js'],
      is_visible: true,
      sort_order: 1
    };

    addLog('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: ' + JSON.stringify(testFormData, null, 2));

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É results
    const resultsString = testFormData.results.length > 0 ? JSON.stringify(testFormData.results) : null;
    addLog('üìã Results –∫–∞–∫ JSON: ' + resultsString);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É technologies_used
    const technologiesString = testFormData.technologies_used.length > 0 ? testFormData.technologies_used : null;
    addLog('üìã Technologies: ' + JSON.stringify(technologiesString));

    setResult('‚úÖ –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏');
  };

  return (
    <div className="min-h-screen bg-slate-50 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-slate-900 mb-8">
          –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ–π—Å–æ–≤
        </h1>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <button
            onClick={testCreateCase}
            disabled={loading}
            className="bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 disabled:opacity-50"
          >
            {loading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è'}
          </button>
          
          <button
            onClick={testUpdateCase}
            disabled={loading}
            className="bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'}
          </button>
          
          <button
            onClick={testFormData}
            disabled={loading}
            className="bg-purple-600 text-white px-4 py-3 rounded-lg hover:bg-purple-700 disabled:opacity-50"
          >
            –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
          </button>

          <button
            onClick={clearLogs}
            className="bg-gray-600 text-white px-4 py-3 rounded-lg hover:bg-gray-700"
          >
            –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
          </button>
        </div>

        {loading && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
            <div className="flex items-center">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600 mr-3"></div>
              <p className="text-yellow-800">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç...</p>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          <div>
            <h3 className="text-lg font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
            
            {result && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                <pre className="text-green-800 whitespace-pre-wrap text-sm">{result}</pre>
              </div>
            )}

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                <pre className="text-red-800 whitespace-pre-wrap text-sm">{error}</pre>
              </div>
            )}
          </div>

          {/* –õ–æ–≥–∏ */}
          <div>
            <h3 className="text-lg font-semibold mb-4">–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
            <div className="bg-gray-900 text-green-400 rounded-lg p-4 h-96 overflow-y-auto">
              {logs.length === 0 ? (
                <p className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤</p>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className="text-sm font-mono mb-1">
                    {log}
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-2">
            –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
          </h3>
          <ul className="text-blue-800 space-y-1 text-sm">
            <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫</li>
            <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ</li>
            <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ Service Role –∫–ª—é—á–∞</li>
            <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ cases —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</li>
            <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ DevTools</li>
            <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default TestCaseSaveDebug;


