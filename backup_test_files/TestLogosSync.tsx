import React, { useState, useEffect } from 'react';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { useLogos } from '../contexts/LogosContextDB';
import { RefreshCw, CheckCircle, AlertCircle, Database, Globe, Settings } from 'lucide-react';

const TestLogosSync = () => {
  const { state, forceRefresh, addLogo, updateLogo, deleteLogo } = useLogos();
  const [testResults, setTestResults] = useState<string[]>([]);
  const [isRunning, setIsRunning] = useState(false);

  const addResult = (message: string, type: 'success' | 'error' | 'info' = 'info') => {
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è';
    setTestResults(prev => [...prev, `${icon} ${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const runSyncTest = async () => {
    setIsRunning(true);
    setTestResults([]);
    
    addResult('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤...');
    
    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      addResult('–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      await forceRefresh();
      addResult(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏–∑ –±–∞–∑—ã: ${state.logos.length}`, 'success');
      
      // –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
      addResult('–¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞...');
      const testLogo = {
        name: `–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${Date.now()}`,
        category: 'tech' as const,
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        website_url: 'https://example.com',
        is_active: true,
        logo_url: 'https://via.placeholder.com/100x50/4F46E5/FFFFFF?text=TEST'
      };
      
      await addLogo(testLogo);
      addResult('–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
      
      // –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
      addResult('–¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞...');
      const addedLogo = state.logos.find(logo => logo.name.includes('–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'));
      if (addedLogo) {
        await updateLogo(addedLogo.id, { 
          name: `${addedLogo.name} (–æ–±–Ω–æ–≤–ª–µ–Ω)`,
          description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞'
        });
        addResult('–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
      }
      
      // –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
      addResult('–¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞...');
      const updatedLogo = state.logos.find(logo => logo.name.includes('–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'));
      if (updatedLogo) {
        await deleteLogo(updatedLogo.id);
        addResult('–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø —É–¥–∞–ª–µ–Ω', 'success');
      }
      
      // –¢–µ—Å—Ç 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      addResult('–¢–µ—Å—Ç 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      await forceRefresh();
      addResult(`–§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ—Ç–∏–ø–æ–≤: ${state.logos.length}`, 'success');
      
      addResult('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'success');
      
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${error}`, 'error');
    } finally {
      setIsRunning(false);
    }
  };

  const clearResults = () => {
    setTestResults([]);
  };

  return (
    <div className="min-h-screen bg-slate-50 p-8">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900 mb-4">
            –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
          </h1>
          <p className="text-slate-600">
            –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é, –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∞–π—Ç–æ–º.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Database className="w-5 h-5 mr-2 text-blue-500" />
                –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-600">{state.logos.length}</div>
              <p className="text-sm text-slate-600">–õ–æ–≥–æ—Ç–∏–ø–æ–≤ –≤ –±–∞–∑–µ</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Settings className="w-5 h-5 mr-2 text-green-500" />
                –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">{state.logos.length}</div>
              <p className="text-sm text-slate-600">–õ–æ–≥–æ—Ç–∏–ø–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Globe className="w-5 h-5 mr-2 text-purple-500" />
                –°–∞–π—Ç
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-purple-600">{state.logos.length}</div>
              <p className="text-sm text-slate-600">–õ–æ–≥–æ—Ç–∏–ø–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ</p>
            </CardContent>
          </Card>
        </div>

        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span className="flex items-center">
                <RefreshCw className="w-5 h-5 mr-2" />
                –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              </span>
              <div className="flex gap-2">
                <Button 
                  onClick={runSyncTest} 
                  disabled={isRunning}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {isRunning ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç'}
                </Button>
                <Button 
                  onClick={clearResults} 
                  variant="outline"
                  disabled={isRunning}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {testResults.length > 0 ? (
              <div className="space-y-2 max-h-96 overflow-y-auto bg-slate-50 p-4 rounded-lg">
                {testResults.map((result, index) => (
                  <div key={index} className="text-sm font-mono">
                    {result}
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-slate-500 text-center py-8">
                –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex items-center">
                <div className={`w-3 h-3 rounded-full mr-3 ${state.loading ? 'bg-yellow-500' : 'bg-green-500'}`}></div>
                <span className="text-sm">
                  {state.loading ? '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...' : '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}
                </span>
              </div>
              
              <div className="flex items-center">
                <div className={`w-3 h-3 rounded-full mr-3 ${state.error ? 'bg-red-500' : 'bg-green-500'}`}></div>
                <span className="text-sm">
                  {state.error ? `–û—à–∏–±–∫–∞: ${state.error}` : '–û—à–∏–±–æ–∫ –Ω–µ—Ç'}
                </span>
              </div>
              
              <div className="flex items-center">
                <div className="w-3 h-3 bg-blue-500 rounded-full mr-3"></div>
                <span className="text-sm">
                  –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {isRunning ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ì–æ—Ç–æ–≤–∞'}
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        <div className="mt-8 flex gap-4">
          <Button asChild className="bg-green-600 hover:bg-green-700">
            <a href="/admin/logos">
              <Settings className="w-4 h-4 mr-2" />
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            </a>
          </Button>
          
          <Button variant="outline" asChild>
            <a href="/">
              <Globe className="w-4 h-4 mr-2" />
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </a>
          </Button>
        </div>
      </div>
    </div>
  );
};

export default TestLogosSync;
