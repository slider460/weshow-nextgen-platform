import React, { useState } from 'react';
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

const adminSupabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

const TestImageUpload: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<string>('');
  const [error, setError] = useState<string>('');
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    setLogs(prev => [...prev, logMessage]);
    console.log(logMessage);
  };

  const clearLogs = () => {
    setLogs([]);
    setResult('');
    setError('');
  };

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setLoading(true);
    setError('');
    setResult('');
    addLog('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');

    try {
      addLog(`üìÅ –§–∞–π–ª: ${file.name}, —Ä–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç, —Ç–∏–ø: ${file.type}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        throw new Error('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
      if (file.size > 10 * 1024 * 1024) {
        throw new Error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10MB');
      }

      const fileExt = file.name.split('.').pop();
      const fileName = `test-${Date.now()}.${fileExt}`;
      const filePath = `cases/images/${fileName}`;

      addLog(`üìÇ –ü—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${filePath}`);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      addLog('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage...');
      const { data: uploadData, error: uploadError } = await adminSupabase.storage
        .from('public')
        .upload(filePath, file);

      if (uploadError) {
        throw uploadError;
      }

      addLog(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${JSON.stringify(uploadData)}`);

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      addLog('üîó –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL...');
      const { data: urlData } = adminSupabase.storage
        .from('public')
        .getPublicUrl(filePath);

      addLog(`üåê –ü—É–±–ª–∏—á–Ω—ã–π URL: ${urlData.publicUrl}`);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      addLog('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ...');
      const testImage = new Image();
      
      await new Promise((resolve, reject) => {
        testImage.onload = () => {
          addLog('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
          resolve(true);
        };
        testImage.onerror = () => {
          addLog('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
          reject(new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è'));
        };
        testImage.src = urlData.publicUrl;
      });

      setResult(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\nURL: ${urlData.publicUrl}\n–†–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç`);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      addLog(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
      setError(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${errorMessage}`);
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', err);
    } finally {
      setLoading(false);
      addLog('üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  };

  const testStorageConnection = async () => {
    setLoading(true);
    setError('');
    setResult('');
    addLog('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase Storage...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ buckets
      addLog('üì¶ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ buckets...');
      const { data: buckets, error: bucketsError } = await adminSupabase.storage.listBuckets();

      if (bucketsError) {
        throw bucketsError;
      }

      addLog(`‚úÖ –ù–∞–π–¥–µ–Ω–æ buckets: ${buckets.length}`);
      buckets.forEach(bucket => {
        addLog(`  - ${bucket.name} (${bucket.public ? '–ø—É–±–ª–∏—á–Ω—ã–π' : '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π'})`);
      });

      const publicBucket = buckets.find(b => b.name === 'public');
      if (!publicBucket) {
        throw new Error('Bucket "public" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      addLog('‚úÖ Bucket "public" –Ω–∞–π–¥–µ–Ω');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket
      addLog('üìÅ –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket "public"...');
      const { data: files, error: filesError } = await adminSupabase.storage
        .from('public')
        .list('cases/images', { limit: 5 });

      if (filesError) {
        addLog(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ${filesError.message}`);
      } else {
        addLog(`üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files?.length || 0}`);
        files?.forEach(file => {
          addLog(`  - ${file.name} (${file.metadata?.size || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä'})`);
        });
      }

      setResult('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Storage —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      addLog(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
      setError(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-slate-900 mb-8">
          –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        </h1>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <div>
            <label className="block text-sm font-medium mb-2">
              –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            </label>
            <input
              type="file"
              accept="image/*"
              onChange={handleFileSelect}
              disabled={loading}
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 disabled:opacity-50"
            />
          </div>

          <button
            onClick={testStorageConnection}
            disabled={loading}
            className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 disabled:opacity-50"
          >
            {loading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
          </button>

          <button
            onClick={clearLogs}
            className="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700"
          >
            –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
          </button>
        </div>

        {loading && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
            <div className="flex items-center">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600 mr-3"></div>
              <p className="text-yellow-800">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç...</p>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          <div>
            <h3 className="text-lg font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
            
            {result && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                <pre className="text-green-800 whitespace-pre-wrap text-sm">{result}</pre>
              </div>
            )}

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                <pre className="text-red-800 whitespace-pre-wrap text-sm">{error}</pre>
              </div>
            )}
          </div>

          {/* –õ–æ–≥–∏ */}
          <div>
            <h3 className="text-lg font-semibold mb-4">–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
            <div className="bg-gray-900 text-green-400 rounded-lg p-4 h-96 overflow-y-auto">
              {logs.length === 0 ? (
                <p className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤</p>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className="text-sm font-mono mb-1">
                    {log}
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-2">
            –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
          </h3>
          <ul className="text-blue-800 space-y-1 text-sm">
            <li>‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (JPG, PNG, GIF)</li>
            <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫</li>
            <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase Storage –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ</li>
            <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ Service Role –∫–ª—é—á–∞</li>
            <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bucket "public" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</li>
            <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ DevTools</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default TestImageUpload;