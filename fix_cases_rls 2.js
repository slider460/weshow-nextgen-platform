#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è RLS –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã cases
async function disableCasesRLS() {
  console.log('üîß –û—Ç–∫–ª—é—á–∞—é RLS –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã cases...');
  
  try {
    // –û—Ç–∫–ª—é—á–∞–µ–º RLS
    const { error: disableError } = await supabase.rpc('exec_sql', {
      query: 'ALTER TABLE cases DISABLE ROW LEVEL SECURITY;'
    });
    
    if (disableError) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å RLS —á–µ—Ä–µ–∑ RPC: ${disableError.message}`);
      console.log('üí° –ü–æ–ø—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±...');
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const policies = [
        'CREATE POLICY IF NOT EXISTS "Allow all operations for authenticated users" ON cases FOR ALL TO authenticated USING (true) WITH CHECK (true);',
        'CREATE POLICY IF NOT EXISTS "Allow all operations for anon users" ON cases FOR ALL TO anon USING (true) WITH CHECK (true);'
      ];
      
      for (const policy of policies) {
        const { error: policyError } = await supabase.rpc('exec_sql', { query: policy });
        if (policyError) {
          console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É: ${policyError.message}`);
        } else {
          console.log('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
        }
      }
    } else {
      console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è cases');
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–µ–π—Å–∞ —Å service role
async function createTestCaseWithServiceRole() {
  console.log('\nüìù –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å —Å service role...');
  
  try {
    const testCase = {
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å RLS',
      description: '–≠—Ç–æ—Ç –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS',
      client: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç RLS',
      year: 2024,
      is_visible: true,
      sort_order: 9999,
      featured: false,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { data: newCase, error } = await supabase
      .from('cases')
      .insert(testCase)
      .select()
      .single();
      
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å service role: ${error.message}`);
      return false;
    } else {
      console.log(`‚úÖ –ö–µ–π—Å —Å–æ–∑–¥–∞–Ω —Å service role: ${newCase.id}`);
      return true;
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
async function testWithRegularClient() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º...');
  
  const regularClient = createClient(supabaseUrl, 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE');
  
  try {
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è
    const { data: authData, error: authError } = await regularClient.auth.signInWithPassword({
      email: 'admin@weshow.ru',
      password: 'password'
    });
    
    if (authError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`);
      return false;
    }
    
    console.log(`‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${authData.user?.email}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–µ–π—Å
    const testCase = {
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å Regular Client',
      description: '–≠—Ç–æ—Ç –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º',
      client: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Regular',
      year: 2024,
      is_visible: true,
      sort_order: 9998,
      featured: false,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { data: newCase, error: createError } = await regularClient
      .from('cases')
      .insert(testCase)
      .select()
      .single();
      
    if (createError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º: ${createError.message}`);
      return false;
    } else {
      console.log(`‚úÖ –ö–µ–π—Å —Å–æ–∑–¥–∞–Ω —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º: ${newCase.id}`);
      return true;
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function fixCasesRLS() {
  console.log('üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï RLS –î–õ–Ø –ö–ï–ô–°–û–í...\n');
  
  // 1. –û—Ç–∫–ª—é—á–∞–µ–º RLS
  await disableCasesRLS();
  
  // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å —Å service role
  const serviceRoleWorks = await createTestCaseWithServiceRole();
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
  const regularClientWorks = await testWithRegularClient();
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`‚úÖ Service role —Å–æ–∑–¥–∞–Ω–∏–µ: ${serviceRoleWorks ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
  console.log(`‚úÖ –û–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏–µ: ${regularClientWorks ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
  
  if (regularClientWorks) {
    console.log('\nüéâ RLS –ò–°–ü–†–ê–í–õ–ï–ù!');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
    console.log('‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å');
  } else {
    console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´ –û–°–¢–ê–õ–ò–°–¨');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixCasesRLS();


