#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ RLS
async function checkRLSStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å RLS –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ users
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .limit(1);
      
    if (usersError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ users: ${usersError.message}`);
    } else {
      console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ users: OK (${users?.length || 0} –∑–∞–ø–∏—Å–µ–π)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ user_profiles
    const { data: profiles, error: profilesError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(1);
      
    if (profilesError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ user_profiles: ${profilesError.message}`);
    } else {
      console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ user_profiles: OK (${profiles?.length || 0} –∑–∞–ø–∏—Å–µ–π)`);
    }
    
  } catch (error) {
    console.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkUsers() {
  console.log('\nüë• –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ...');
  
  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('id, email, created_at')
      .limit(5);
      
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users?.length || 0}`);
      users?.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email} (ID: ${user.id})`);
      });
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
async function checkProfiles() {
  console.log('\nüë§ –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  try {
    const { data: profiles, error } = await supabase
      .from('user_profiles')
      .select('id, user_id, full_name, role')
      .limit(5);
      
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: ${error.message}`);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profiles?.length || 0}`);
      profiles?.forEach((profile, index) => {
        console.log(`   ${index + 1}. ${profile.full_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (Role: ${profile.role || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})`);
      });
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–∞
async function testLogin() {
  console.log('\nüîê –¢–µ—Å—Ç–∏—Ä—É—é –≤—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const authClient = createClient(supabaseUrl, supabaseServiceKey);
    
    const { data, error } = await authClient.auth.signInWithPassword({
      email: 'admin@weshow.ru',
      password: 'password'
    });
    
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
    } else {
      console.log(`‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω –¥–ª—è: ${data.user?.email}`);
      console.log(`   User ID: ${data.user?.id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      const { data: profile, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', data.user?.id)
        .single();
        
      if (profileError) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${profileError.message}`);
      } else {
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: ${profile.full_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`);
      }
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–∞: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function diagnoseLoginIssue() {
  console.log('üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏ –≤—Ö–æ–¥–µ...\n');
  
  await checkRLSStatus();
  await checkUsers();
  await checkProfiles();
  await testLogin();
  
  console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('1. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ - RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥');
  console.log('2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞');
  console.log('3. –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏');
  console.log('\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç –≤ Supabase Dashboard');
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnoseLoginIssue();


