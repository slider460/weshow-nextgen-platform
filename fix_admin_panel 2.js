#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —á–µ—Ä–µ–∑ Supabase REST API
async function executeSQL(sqlQuery) {
  try {
    console.log('üîÑ –í—ã–ø–æ–ª–Ω—è—é SQL –∑–∞–ø—Ä–æ—Å...');
    
    const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
        'apikey': SUPABASE_SERVICE_ROLE_KEY
      },
      body: JSON.stringify({
        query: sqlQuery
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.text();
    console.log('‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–∞–º
async function executeDirectSQL(sqlQuery) {
  try {
    console.log('üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å...');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = sqlQuery.split(';').filter(q => q.trim());
    
    for (const query of queries) {
      if (query.trim()) {
        console.log(`\nüìù –í—ã–ø–æ–ª–Ω—è—é: ${query.trim().substring(0, 50)}...`);
        
        const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/sql`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
            'apikey': SUPABASE_SERVICE_ROLE_KEY
          },
          body: JSON.stringify({
            query: query.trim()
          })
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.log(`‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: ${response.status}`);
          console.log(`–û—Ç–≤–µ—Ç: ${errorText}`);
        } else {
          console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function fixAdminPanel() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlFile = path.join(__dirname, '–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï_–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï_–ê–î–ú–ò–ù_–ü–ê–ù–ï–õ–ò_–§–ò–ù–ê–õ–¨–ù–û–ï.sql');
    const sqlContent = fs.readFileSync(sqlFile, 'utf8');
    
    console.log('üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω SQL —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL
    await executeDirectSQL(sqlContent);
    
    console.log('\nüéâ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
    console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü');
    console.log('‚úÖ –í—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã');
    console.log('‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  fixAdminPanel();
}

module.exports = { executeSQL, executeDirectSQL, fixAdminPanel };


