import readline from 'readline';
import fs from 'fs';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Figma');
console.log('==========================================\n');

console.log('üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://www.figma.com/design/if9cW5Ga1xyeUTGYc2ea9K/HM?node-id=998-2&t=cso5IfHpnwawJG0S-4');
console.log('2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Figma');
console.log('3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É (Settings) –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É');
console.log('4. –í—ã–±–µ—Ä–∏—Ç–µ "Developer" –≤ –ª–µ–≤–æ–º –º–µ–Ω—é');
console.log('5. –ù–∞–∂–º–∏—Ç–µ "Create new token"');
console.log('6. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "WeShow Platform"');
console.log('7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n');

rl.question('üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Figma API —Ç–æ–∫–µ–Ω: ', async (token) => {
  if (!token || token.trim() === '') {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤–≤–µ–¥–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    rl.close();
    return;
  }

  console.log('\nüîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

  // –°–æ–∑–¥–∞–µ–º .env.local
  const envContent = `# Figma Configuration
FIGMA_ACCESS_TOKEN=${token.trim()}
FIGMA_DOCUMENT_ID=if9cW5Ga1xyeUTGYc2ea9K
FIGMA_NODE_ID=998-2
FIGMA_API_URL=https://api.figma.com/v1
FIGMA_TIMEOUT=10000
`;

  try {
    fs.writeFileSync('.env.local', envContent);
    console.log('‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env.local');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
    rl.close();
    return;
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Figma...');
  
  try {
    const { default: https } = await import('https');
    
    const testConnection = () => {
      return new Promise((resolve, reject) => {
        const options = {
          hostname: 'api.figma.com',
          port: 443,
          path: '/v1/files/if9cW5Ga1xyeUTGYc2ea9K',
          method: 'GET',
          headers: {
            'X-Figma-Token': token.trim(),
            'Content-Type': 'application/json'
          }
        };

        const req = https.request(options, (res) => {
          let data = '';
          
          res.on('data', (chunk) => {
            data += chunk;
          });
          
          res.on('end', () => {
            if (res.statusCode === 200) {
              resolve(JSON.parse(data));
            } else {
              reject(new Error(`HTTP ${res.statusCode}: ${data}`));
            }
          });
        });

        req.on('error', (error) => {
          reject(error);
        });

        req.setTimeout(10000, () => {
          req.destroy();
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'));
        });

        req.end();
      });
    };

    const documentData = await testConnection();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ${documentData.name}`);
    console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${new Date(documentData.lastModified).toLocaleString()}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–∑–ª–∞
    console.log('\nüéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–∞...');
    
    const getNodeData = () => {
      return new Promise((resolve, reject) => {
        const options = {
          hostname: 'api.figma.com',
          port: 443,
          path: '/v1/files/if9cW5Ga1xyeUTGYc2ea9K/nodes?ids=998-2',
          method: 'GET',
          headers: {
            'X-Figma-Token': token.trim(),
            'Content-Type': 'application/json'
          }
        };

        const req = https.request(options, (res) => {
          let data = '';
          
          res.on('data', (chunk) => {
            data += chunk;
          });
          
          res.on('end', () => {
            if (res.statusCode === 200) {
              resolve(JSON.parse(data));
            } else {
              reject(new Error(`HTTP ${res.statusCode}: ${data}`));
            }
          });
        });

        req.on('error', (error) => {
          reject(error);
        });

        req.setTimeout(10000, () => {
          req.destroy();
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–∞'));
        });

        req.end();
      });
    };

    const nodeData = await getNodeData();
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É–∑–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã!');
    
    if (nodeData.nodes && nodeData.nodes['998-2']) {
      const node = nodeData.nodes['998-2'].document;
      console.log(`üé® –£–∑–µ–ª: ${node.name} (${node.type})`);
      console.log(`üë• –î–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${node.children ? node.children.length : 0}`);
      
      if (node.children) {
        console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
        node.children.forEach((child, index) => {
          console.log(`  ${index + 1}. ${child.name} (${child.type})`);
        });
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const fullData = {
      document: documentData,
      node: nodeData,
      timestamp: new Date().toISOString(),
      token: token.trim()
    };

    fs.writeFileSync('figma-real-data.json', JSON.stringify(fullData, null, 2));
    console.log('\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ figma-real-data.json');

    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Figma');
    console.log('üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node figma-to-react-real.js');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    
    if (error.message.includes('401')) {
      console.log('\nüîë –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞');
      console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω');
      console.log('- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω');
    } else if (error.message.includes('403')) {
      console.log('\nüö´ –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º:');
      console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É');
    }
  }

  rl.close();
});



