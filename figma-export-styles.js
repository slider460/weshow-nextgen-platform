#!/usr/bin/env node

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π –∏ —Ü–≤–µ—Ç–æ–≤ –∏–∑ Figma
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join } from 'path';

console.log('üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π –∏–∑ Figma\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const FIGMA_API_BASE = 'https://api.figma.com/v1';
const FIGMA_DOCUMENT_ID = process.env.FIGMA_DOCUMENT_ID || 'if9cW5Ga1xyeUTGYc2ea9K';
const FIGMA_TOKEN = process.env.FIGMA_ACCESS_TOKEN;

if (!FIGMA_TOKEN || FIGMA_TOKEN === 'your_token_here') {
  console.log('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Figma API —Ç–æ–∫–µ–Ω');
  console.log('üí° –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env.local —Ñ–∞–π–ª');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∏–ª–µ–π
const stylesDir = join(process.cwd(), 'public', 'figma-exports', 'styles');
if (!existsSync(stylesDir)) {
  mkdirSync(stylesDir, { recursive: true });
  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${stylesDir}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞
function rgbToHex(r, g, b) {
  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞ –≤ HSL
function rgbToHsl(r, g, b) {
  r /= 255;
  g /= 255;
  b /= 255;
  
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h, s, l = (max + min) / 2;

  if (max === min) {
    h = s = 0;
  } else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
    }
    h /= 6;
  }

  return {
    h: Math.round(h * 360),
    s: Math.round(s * 100),
    l: Math.round(l * 100)
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ü–≤–µ—Ç–æ–≤
async function exportColors() {
  try {
    console.log('üé® –≠–∫—Å–ø–æ—Ä—Ç —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    const docResponse = await fetch(`${FIGMA_API_BASE}/files/${FIGMA_DOCUMENT_ID}`, {
      headers: {
        'X-Figma-Token': FIGMA_TOKEN
      }
    });

    if (!docResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docResponse.status}`);
    }

    const docData = await docResponse.json();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
    const colors = new Map();
    
    function extractColors(node) {
      if (node.fills) {
        node.fills.forEach(fill => {
          if (fill.type === 'SOLID' && fill.color) {
            const { r, g, b } = fill.color;
            const hex = rgbToHex(
              Math.round(r * 255),
              Math.round(g * 255),
              Math.round(b * 255)
            );
            
            if (!colors.has(hex)) {
              const hsl = rgbToHsl(r * 255, g * 255, b * 255);
              colors.set(hex, {
                hex,
                rgb: `rgb(${Math.round(r * 255)}, ${Math.round(g * 255)}, ${Math.round(b * 255)})`,
                hsl: `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`,
                r: Math.round(r * 255),
                g: Math.round(g * 255),
                b: Math.round(b * 255),
                h: hsl.h,
                s: hsl.s,
                l: hsl.l
              });
            }
          }
        });
      }
      
      if (node.children) {
        node.children.forEach(child => extractColors(child));
      }
    }

    extractColors(docData.document);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${colors.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª —Å —Ü–≤–µ—Ç–∞–º–∏
    let cssContent = `/* Figma Color Palette - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ */\n:root {\n`;
    
    const colorArray = Array.from(colors.values());
    colorArray.forEach((color, index) => {
      const colorName = `color-${index + 1}`;
      cssContent += `  --figma-${colorName}: ${color.hex};\n`;
      cssContent += `  --figma-${colorName}-rgb: ${color.r}, ${color.g}, ${color.b};\n`;
      cssContent += `  --figma-${colorName}-hsl: ${color.h}, ${color.s}%, ${color.l}%;\n`;
    });
    
    cssContent += `}\n\n/* –¶–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø—É */\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º
    const primaryColors = colorArray.filter(c => c.l > 50 && c.s > 50);
    const secondaryColors = colorArray.filter(c => c.l > 30 && c.l < 70);
    const accentColors = colorArray.filter(c => c.s > 70);
    const neutralColors = colorArray.filter(c => c.s < 30);
    
    if (primaryColors.length > 0) {
      cssContent += `/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ */\n`;
      primaryColors.forEach((color, index) => {
        cssContent += `.primary-${index + 1} { color: ${color.hex}; }\n`;
      });
      cssContent += `\n`;
    }
    
    if (secondaryColors.length > 0) {
      cssContent += `/* –í—Ç–æ—Ä–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ */\n`;
      secondaryColors.forEach((color, index) => {
        cssContent += `.secondary-${index + 1} { color: ${color.hex}; }\n`;
      });
      cssContent += `\n`;
    }
    
    if (accentColors.length > 0) {
      cssContent += `/* –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ */\n`;
      accentColors.forEach((color, index) => {
        cssContent += `.accent-${index + 1} { color: ${color.hex}; }\n`;
      });
      cssContent += `\n`;
    }
    
    if (neutralColors.length > 0) {
      cssContent += `/* –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ */\n`;
      neutralColors.forEach((color, index) => {
        cssContent += `.neutral-${index + 1} { color: ${color.hex}; }\n`;
      });
      cssContent += `\n`;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSS —Ñ–∞–π–ª
    const cssPath = join(stylesDir, 'figma-colors.css');
    writeFileSync(cssPath, cssContent);
    console.log(`‚úÖ CSS —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${cssPath}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª —Å —Ü–≤–µ—Ç–∞–º–∏
    const jsonContent = {
      palette: colorArray,
      categories: {
        primary: primaryColors,
        secondary: secondaryColors,
        accent: accentColors,
        neutral: neutralColors
      },
      generated: new Date().toISOString()
    };

    const jsonPath = join(stylesDir, 'figma-colors.json');
    writeFileSync(jsonPath, JSON.stringify(jsonContent, null, 2));
    console.log(`‚úÖ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${jsonPath}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Tailwind –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const tailwindConfig = {
      colors: {}
    };

    colorArray.forEach((color, index) => {
      const colorName = `figma-${index + 1}`;
      tailwindConfig.colors[colorName] = color.hex;
    });

    const tailwindPath = join(stylesDir, 'tailwind-colors.js');
    writeFileSync(tailwindPath, `module.exports = ${JSON.stringify(tailwindConfig, null, 2)};`);
    console.log(`‚úÖ Tailwind –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${tailwindPath}`);

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ü–≤–µ—Ç–æ–≤:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
async function exportTypography() {
  try {
    console.log('üìù –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏...');
    
    const docResponse = await fetch(`${FIGMA_API_BASE}/files/${FIGMA_DOCUMENT_ID}`, {
      headers: {
        'X-Figma-Token': FIGMA_TOKEN
      }
    });

    if (!docResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docResponse.status}`);
    }

    const docData = await docResponse.json();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    const textStyles = new Map();
    
    function extractTextStyles(node) {
      if (node.type === 'TEXT' && node.style) {
        const style = node.style;
        const key = `${style.fontFamily}-${style.fontSize}-${style.fontWeight}`;
        
        if (!textStyles.has(key)) {
          textStyles.set(key, {
            fontFamily: style.fontFamily,
            fontSize: style.fontSize,
            fontWeight: style.fontWeight,
            lineHeight: style.lineHeightPx,
            letterSpacing: style.letterSpacing,
            textAlign: style.textAlignHorizontal,
            textDecoration: style.textDecoration
          });
        }
      }
      
      if (node.children) {
        node.children.forEach(child => extractTextStyles(child));
      }
    }

    extractTextStyles(docData.document);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${textStyles.size} —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª —Å —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–æ–π
    let cssContent = `/* Figma Typography - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ */\n\n`;
    
    const styleArray = Array.from(textStyles.values());
    styleArray.forEach((style, index) => {
      const className = `text-style-${index + 1}`;
      cssContent += `.${className} {\n`;
      cssContent += `  font-family: "${style.fontFamily}", sans-serif;\n`;
      cssContent += `  font-size: ${style.fontSize}px;\n`;
      cssContent += `  font-weight: ${style.fontWeight};\n`;
      if (style.lineHeight) {
        cssContent += `  line-height: ${style.lineHeight}px;\n`;
      }
      if (style.letterSpacing) {
        cssContent += `  letter-spacing: ${style.letterSpacing}px;\n`;
      }
      if (style.textAlign) {
        cssContent += `  text-align: ${style.textAlign};\n`;
      }
      if (style.textDecoration) {
        cssContent += `  text-decoration: ${style.textDecoration};\n`;
      }
      cssContent += `}\n\n`;
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSS —Ñ–∞–π–ª
    const cssPath = join(stylesDir, 'figma-typography.css');
    writeFileSync(cssPath, cssContent);
    console.log(`‚úÖ CSS —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${cssPath}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª
    const jsonContent = {
      typography: styleArray,
      generated: new Date().toISOString()
    };

    const jsonPath = join(stylesDir, 'figma-typography.json');
    writeFileSync(jsonPath, JSON.stringify(jsonContent, null, 2));
    console.log(`‚úÖ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${jsonPath}`);

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
async function exportGradients() {
  try {
    console.log('üåà –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤...');
    
    const docResponse = await fetch(`${FIGMA_API_BASE}/files/${FIGMA_DOCUMENT_ID}`, {
      headers: {
        'X-Figma-Token': FIGMA_TOKEN
      }
    });

    if (!docResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docResponse.status}`);
    }

    const docData = await docResponse.json();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
    const gradients = new Map();
    
    function extractGradients(node) {
      if (node.fills) {
        node.fills.forEach(fill => {
          if (fill.type === 'GRADIENT_LINEAR' || fill.type === 'GRADIENT_RADIAL') {
            const gradientKey = JSON.stringify(fill.gradientStops);
            
            if (!gradients.has(gradientKey)) {
              const stops = fill.gradientStops.map(stop => {
                const { r, g, b } = stop.color;
                return {
                  color: rgbToHex(
                    Math.round(r * 255),
                    Math.round(g * 255),
                    Math.round(b * 255)
                  ),
                  position: stop.position
                };
              });
              
              gradients.set(gradientKey, {
                type: fill.type,
                stops,
                angle: fill.gradientTransform ? Math.atan2(fill.gradientTransform[1][0], fill.gradientTransform[0][0]) * 180 / Math.PI : 0
              });
            }
          }
        });
      }
      
      if (node.children) {
        node.children.forEach(child => extractGradients(child));
      }
    }

    extractGradients(docData.document);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${gradients.size} –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
    let cssContent = `/* Figma Gradients - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ */\n\n`;
    
    const gradientArray = Array.from(gradients.values());
    gradientArray.forEach((gradient, index) => {
      const className = `gradient-${index + 1}`;
      
      const stops = gradient.stops.map(stop => 
        `${stop.color} ${Math.round(stop.position * 100)}%`
      ).join(', ');
      
      if (gradient.type === 'GRADIENT_LINEAR') {
        cssContent += `.${className} {\n`;
        cssContent += `  background: linear-gradient(${gradient.angle}deg, ${stops});\n`;
        cssContent += `}\n\n`;
      } else if (gradient.type === 'GRADIENT_RADIAL') {
        cssContent += `.${className} {\n`;
        cssContent += `  background: radial-gradient(circle, ${stops});\n`;
        cssContent += `}\n\n`;
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSS —Ñ–∞–π–ª
    const cssPath = join(stylesDir, 'figma-gradients.css');
    writeFileSync(cssPath, cssContent);
    console.log(`‚úÖ CSS —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${cssPath}`);

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∏–ª–µ–π...\n');
  
  await exportColors();
  console.log('');
  await exportTypography();
  console.log('');
  await exportGradients();
  
  console.log('\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log(`üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${stylesDir}`);
  console.log('üé® –¶–≤–µ—Ç–∞: figma-colors.css');
  console.log('üìù –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞: figma-typography.css');
  console.log('üåà –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã: figma-gradients.css');
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);



