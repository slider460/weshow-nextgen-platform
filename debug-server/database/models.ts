import sqlite3 from 'sqlite3';
import { open, Database } from 'sqlite';
import path from 'path';

interface –ö–æ–Ω—Ñ–∏–≥–ë–î {
  type: 'sqlite' | 'postgresql';
  host?: string;
  port?: number;
  database: string;
  username?: string;
  password?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü
export interface –ú–µ—Ç—Ä–∏–∫–∞–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
  id?: number;
  url: string;
  pageLoadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  interactionToNextPaint: number;
  memoryUsed?: number;
  memoryTotal?: number;
  networkLatency?: number;
  renderTime?: number;
  bundleSize?: number;
  userAgent: string;
  timestamp: Date;
  sessionId?: string;
}

export interface –ó–∞–ø–∏—Å—å–û—à–∏–±–∫–∏ {
  id?: number;
  message: string;
  stack: string;
  componentStack?: string;
  url: string;
  line?: number;
  column?: number;
  userAgent: string;
  timestamp: Date;
  severity: 'low' | 'medium' | 'high' | 'critical';
  type: 'javascript' | 'network' | 'render' | 'memory' | 'permission';
  resolved: boolean;
  occurrences: number;
  firstSeen: Date;
  lastSeen: Date;
  sessionId?: string;
  userId?: string;
  buildVersion?: string;
  context?: string; // JSON —Å—Ç—Ä–æ–∫–∞
}

export interface –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞ {
  id?: number;
  testName: string;
  status: 'passed' | 'failed' | 'skipped' | 'timeout';
  duration: number;
  browser: string;
  error?: string;
  screenshot?: string;
  timestamp: Date;
  buildVersion?: string;
  environment?: string;
}

export interface –°–µ—Ç–µ–≤–∞—è–ú–µ—Ç—Ä–∏–∫–∞ {
  id?: number;
  url: string;
  method: string;
  status: number;
  duration: number;
  requestSize?: number;
  responseSize?: number;
  userAgent: string;
  timestamp: Date;
  error?: string;
  sessionId?: string;
}

export interface –ê–ª–µ—Ä—Ç {
  id?: number;
  type: 'critical' | 'warning' | 'info';
  message: string;
  component: string;
  timestamp: Date;
  resolved: boolean;
  resolvedAt?: Date;
  metadata?: string; // JSON —Å—Ç—Ä–æ–∫–∞
}

export class DatabaseManager {
  private config: –ö–æ–Ω—Ñ–∏–≥–ë–î;
  private db?: Database;

  constructor(config: –ö–æ–Ω—Ñ–∏–≥–ë–î) {
    this.config = config;
  }

  public async initialize(): Promise<void> {
    console.log('üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    if (this.config.type === 'sqlite') {
      await this.–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—åSQLite();
    } else {
      throw new Error('PostgreSQL –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }

    await this.—Å–æ–∑–¥–∞—Ç—å–¢–∞–±–ª–∏—Ü—ã();
    await this.—Å–æ–∑–¥–∞—Ç—å–ò–Ω–¥–µ–∫—Å—ã();

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  private async –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—åSQLite(): Promise<void> {
    const dbPath = path.resolve(this.config.database);
    
    this.db = await open({
      filename: dbPath,
      driver: sqlite3.Database
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SQLite
    await this.db.exec(`
      PRAGMA journal_mode = WAL;
      PRAGMA synchronous = NORMAL;
      PRAGMA cache_size = -64000;
      PRAGMA temp_store = MEMORY;
      PRAGMA mmap_size = 268435456;
    `);
  }

  private async —Å–æ–∑–¥–∞—Ç—å–¢–∞–±–ª–∏—Ü—ã(): Promise<void> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    // –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await this.db.exec(`
      CREATE TABLE IF NOT EXISTS performance_metrics (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        url TEXT NOT NULL,
        pageLoadTime INTEGER NOT NULL,
        firstContentfulPaint INTEGER NOT NULL,
        largestContentfulPaint INTEGER NOT NULL,
        cumulativeLayoutShift REAL NOT NULL,
        interactionToNextPaint INTEGER NOT NULL,
        memoryUsed INTEGER,
        memoryTotal INTEGER,
        networkLatency INTEGER,
        renderTime INTEGER,
        bundleSize INTEGER,
        userAgent TEXT NOT NULL,
        timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        sessionId TEXT
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –æ—à–∏–±–æ–∫
    await this.db.exec(`
      CREATE TABLE IF NOT EXISTS errors (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message TEXT NOT NULL,
        stack TEXT,
        componentStack TEXT,
        url TEXT NOT NULL,
        line INTEGER,
        column INTEGER,
        userAgent TEXT NOT NULL,
        timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        severity TEXT NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')),
        type TEXT NOT NULL CHECK (type IN ('javascript', 'network', 'render', 'memory', 'permission')),
        resolved BOOLEAN NOT NULL DEFAULT FALSE,
        occurrences INTEGER NOT NULL DEFAULT 1,
        firstSeen DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        lastSeen DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        sessionId TEXT,
        userId TEXT,
        buildVersion TEXT,
        context TEXT
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    await this.db.exec(`
      CREATE TABLE IF NOT EXISTS test_results (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        testName TEXT NOT NULL,
        status TEXT NOT NULL CHECK (status IN ('passed', 'failed', 'skipped', 'timeout')),
        duration INTEGER NOT NULL,
        browser TEXT NOT NULL,
        error TEXT,
        screenshot TEXT,
        timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        buildVersion TEXT,
        environment TEXT
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    await this.db.exec(`
      CREATE TABLE IF NOT EXISTS network_metrics (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        url TEXT NOT NULL,
        method TEXT NOT NULL,
        status INTEGER NOT NULL,
        duration INTEGER NOT NULL,
        requestSize INTEGER,
        responseSize INTEGER,
        userAgent TEXT NOT NULL,
        timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        error TEXT,
        sessionId TEXT
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∞–ª–µ—Ä—Ç–æ–≤
    await this.db.exec(`
      CREATE TABLE IF NOT EXISTS alerts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT NOT NULL CHECK (type IN ('critical', 'warning', 'info')),
        message TEXT NOT NULL,
        component TEXT NOT NULL,
        timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        resolved BOOLEAN NOT NULL DEFAULT FALSE,
        resolvedAt DATETIME,
        metadata TEXT
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π
    await this.db.exec(`
      CREATE TABLE IF NOT EXISTS sessions (
        id TEXT PRIMARY KEY,
        userAgent TEXT,
        startTime DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        endTime DATETIME,
        pageViews INTEGER DEFAULT 0,
        errorsCount INTEGER DEFAULT 0,
        lastActivity DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
  }

  private async —Å–æ–∑–¥–∞—Ç—å–ò–Ω–¥–µ–∫—Å—ã(): Promise<void> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const –∏–Ω–¥–µ–∫—Å—ã = [
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      'CREATE INDEX IF NOT EXISTS idx_performance_timestamp ON performance_metrics(timestamp)',
      'CREATE INDEX IF NOT EXISTS idx_performance_url ON performance_metrics(url)',
      'CREATE INDEX IF NOT EXISTS idx_performance_session ON performance_metrics(sessionId)',
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—à–∏–±–æ–∫
      'CREATE INDEX IF NOT EXISTS idx_errors_timestamp ON errors(timestamp)',
      'CREATE INDEX IF NOT EXISTS idx_errors_severity ON errors(severity)',
      'CREATE INDEX IF NOT EXISTS idx_errors_resolved ON errors(resolved)',
      'CREATE INDEX IF NOT EXISTS idx_errors_url ON errors(url)',
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      'CREATE INDEX IF NOT EXISTS idx_tests_timestamp ON test_results(timestamp)',
      'CREATE INDEX IF NOT EXISTS idx_tests_status ON test_results(status)',
      'CREATE INDEX IF NOT EXISTS idx_tests_browser ON test_results(browser)',
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
      'CREATE INDEX IF NOT EXISTS idx_network_timestamp ON network_metrics(timestamp)',
      'CREATE INDEX IF NOT EXISTS idx_network_status ON network_metrics(status)',
      'CREATE INDEX IF NOT EXISTS idx_network_url ON network_metrics(url)',
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
      'CREATE INDEX IF NOT EXISTS idx_alerts_timestamp ON alerts(timestamp)',
      'CREATE INDEX IF NOT EXISTS idx_alerts_type ON alerts(type)',
      'CREATE INDEX IF NOT EXISTS idx_alerts_resolved ON alerts(resolved)'
    ];

    for (const –∏–Ω–¥–µ–∫—Å of –∏–Ω–¥–µ–∫—Å—ã) {
      await this.db.exec(–∏–Ω–¥–µ–∫—Å);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  public async —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å–ú–µ—Ç—Ä–∏–∫—É–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏(–º–µ—Ç—Ä–∏–∫–∞: –ú–µ—Ç—Ä–∏–∫–∞–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏): Promise<number> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const result = await this.db.run(`
      INSERT INTO performance_metrics (
        url, pageLoadTime, firstContentfulPaint, largestContentfulPaint,
        cumulativeLayoutShift, interactionToNextPaint, memoryUsed, memoryTotal,
        networkLatency, renderTime, bundleSize, userAgent, timestamp, sessionId
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      –º–µ—Ç—Ä–∏–∫–∞.url,
      –º–µ—Ç—Ä–∏–∫–∞.pageLoadTime,
      –º–µ—Ç—Ä–∏–∫–∞.firstContentfulPaint,
      –º–µ—Ç—Ä–∏–∫–∞.largestContentfulPaint,
      –º–µ—Ç—Ä–∏–∫–∞.cumulativeLayoutShift,
      –º–µ—Ç—Ä–∏–∫–∞.interactionToNextPaint,
      –º–µ—Ç—Ä–∏–∫–∞.memoryUsed,
      –º–µ—Ç—Ä–∏–∫–∞.memoryTotal,
      –º–µ—Ç—Ä–∏–∫–∞.networkLatency,
      –º–µ—Ç—Ä–∏–∫–∞.renderTime,
      –º–µ—Ç—Ä–∏–∫–∞.bundleSize,
      –º–µ—Ç—Ä–∏–∫–∞.userAgent,
      –º–µ—Ç—Ä–∏–∫–∞.timestamp.toISOString(),
      –º–µ—Ç—Ä–∏–∫–∞.sessionId
    ]);

    return result.lastID!;
  }

  public async –ø–æ–ª—É—á–∏—Ç—å–ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏(
    –ª–∏–º–∏—Ç: number = 100,
    —Å–º–µ—â–µ–Ω–∏–µ: number = 0,
    —Ñ–∏–ª—å—Ç—Ä?: { url?: string; sessionId?: string; —Å?: Date; –ø–æ?: Date }
  ): Promise<–ú–µ—Ç—Ä–∏–∫–∞–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏[]> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    let –∑–∞–ø—Ä–æ—Å = 'SELECT * FROM performance_metrics WHERE 1=1';
    const –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: any[] = [];

    if (—Ñ–∏–ª—å—Ç—Ä?.url) {
      –∑–∞–ø—Ä–æ—Å += ' AND url LIKE ?';
      –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(`%${—Ñ–∏–ª—å—Ç—Ä.url}%`);
    }

    if (—Ñ–∏–ª—å—Ç—Ä?.sessionId) {
      –∑–∞–ø—Ä–æ—Å += ' AND sessionId = ?';
      –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(—Ñ–∏–ª—å—Ç—Ä.sessionId);
    }

    if (—Ñ–∏–ª—å—Ç—Ä?.—Å) {
      –∑–∞–ø—Ä–æ—Å += ' AND timestamp >= ?';
      –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(—Ñ–∏–ª—å—Ç—Ä.—Å.toISOString());
    }

    if (—Ñ–∏–ª—å—Ç—Ä?.–ø–æ) {
      –∑–∞–ø—Ä–æ—Å += ' AND timestamp <= ?';
      –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(—Ñ–∏–ª—å—Ç—Ä.–ø–æ.toISOString());
    }

    –∑–∞–ø—Ä–æ—Å += ' ORDER BY timestamp DESC LIMIT ? OFFSET ?';
    –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(–ª–∏–º–∏—Ç, —Å–º–µ—â–µ–Ω–∏–µ);

    const —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã = await this.db.all(–∑–∞–ø—Ä–æ—Å, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã);
    
    return —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.map(—ç—Ç–∞–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å–ú–µ—Ç—Ä–∏–∫—É–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—à–∏–±–æ–∫
  public async —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å–û—à–∏–±–∫—É(–æ—à–∏–±–∫–∞: –ó–∞–ø–∏—Å—å–û—à–∏–±–∫–∏): Promise<number> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –æ—à–∏–±–∫–∞
    const —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è = await this.db.get(`
      SELECT id, occurrences FROM errors 
      WHERE message = ? AND url = ? AND resolved = FALSE
    `, [–æ—à–∏–±–∫–∞.message, –æ—à–∏–±–∫–∞.url]);

    if (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—à–∏–±–∫—É
      await this.db.run(`
        UPDATE errors 
        SET occurrences = occurrences + 1, lastSeen = ? 
        WHERE id = ?
      `, [–æ—à–∏–±–∫–∞.timestamp.toISOString(), —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è.id]);
      
      return —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è.id;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const result = await this.db.run(`
        INSERT INTO errors (
          message, stack, componentStack, url, line, column, userAgent,
          timestamp, severity, type, resolved, occurrences, firstSeen, 
          lastSeen, sessionId, userId, buildVersion, context
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        –æ—à–∏–±–∫–∞.message,
        –æ—à–∏–±–∫–∞.stack,
        –æ—à–∏–±–∫–∞.componentStack,
        –æ—à–∏–±–∫–∞.url,
        –æ—à–∏–±–∫–∞.line,
        –æ—à–∏–±–∫–∞.column,
        –æ—à–∏–±–∫–∞.userAgent,
        –æ—à–∏–±–∫–∞.timestamp.toISOString(),
        –æ—à–∏–±–∫–∞.severity,
        –æ—à–∏–±–∫–∞.type,
        –æ—à–∏–±–∫–∞.resolved,
        –æ—à–∏–±–∫–∞.occurrences,
        –æ—à–∏–±–∫–∞.firstSeen.toISOString(),
        –æ—à–∏–±–∫–∞.lastSeen.toISOString(),
        –æ—à–∏–±–∫–∞.sessionId,
        –æ—à–∏–±–∫–∞.userId,
        –æ—à–∏–±–∫–∞.buildVersion,
        –æ—à–∏–±–∫–∞.context
      ]);

      return result.lastID!;
    }
  }

  public async –ø–æ–ª—É—á–∏—Ç—å–û—à–∏–±–∫–∏(
    –ª–∏–º–∏—Ç: number = 50,
    —Ñ–∏–ª—å—Ç—Ä?: { severity?: string; resolved?: boolean; —Å?: Date; –ø–æ?: Date }
  ): Promise<–ó–∞–ø–∏—Å—å–û—à–∏–±–∫–∏[]> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    let –∑–∞–ø—Ä–æ—Å = 'SELECT * FROM errors WHERE 1=1';
    const –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: any[] = [];

    if (—Ñ–∏–ª—å—Ç—Ä?.severity) {
      –∑–∞–ø—Ä–æ—Å += ' AND severity = ?';
      –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(—Ñ–∏–ª—å—Ç—Ä.severity);
    }

    if (—Ñ–∏–ª—å—Ç—Ä?.resolved !== undefined) {
      –∑–∞–ø—Ä–æ—Å += ' AND resolved = ?';
      –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(—Ñ–∏–ª—å—Ç—Ä.resolved);
    }

    if (—Ñ–∏–ª—å—Ç—Ä?.—Å) {
      –∑–∞–ø—Ä–æ—Å += ' AND timestamp >= ?';
      –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(—Ñ–∏–ª—å—Ç—Ä.—Å.toISOString());
    }

    if (—Ñ–∏–ª—å—Ç—Ä?.–ø–æ) {
      –∑–∞–ø—Ä–æ—Å += ' AND timestamp <= ?';
      –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(—Ñ–∏–ª—å—Ç—Ä.–ø–æ.toISOString());
    }

    –∑–∞–ø—Ä–æ—Å += ' ORDER BY lastSeen DESC LIMIT ?';
    –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.push(–ª–∏–º–∏—Ç);

    const —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã = await this.db.all(–∑–∞–ø—Ä–æ—Å, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã);
    
    return —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.map(–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å–û—à–∏–±–∫—É);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
  public async —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å–†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞(—Ç–µ—Å—Ç: –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞): Promise<number> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const result = await this.db.run(`
      INSERT INTO test_results (
        testName, status, duration, browser, error, screenshot,
        timestamp, buildVersion, environment
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      —Ç–µ—Å—Ç.testName,
      —Ç–µ—Å—Ç.status,
      —Ç–µ—Å—Ç.duration,
      —Ç–µ—Å—Ç.browser,
      —Ç–µ—Å—Ç.error,
      —Ç–µ—Å—Ç.screenshot,
      —Ç–µ—Å—Ç.timestamp.toISOString(),
      —Ç–µ—Å—Ç.buildVersion,
      —Ç–µ—Å—Ç.environment
    ]);

    return result.lastID!;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
  public async —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å–°–µ—Ç–µ–≤—É—é–ú–µ—Ç—Ä–∏–∫—É(–º–µ—Ç—Ä–∏–∫–∞: –°–µ—Ç–µ–≤–∞—è–ú–µ—Ç—Ä–∏–∫–∞): Promise<number> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const result = await this.db.run(`
      INSERT INTO network_metrics (
        url, method, status, duration, requestSize, responseSize,
        userAgent, timestamp, error, sessionId
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      –º–µ—Ç—Ä–∏–∫–∞.url,
      –º–µ—Ç—Ä–∏–∫–∞.method,
      –º–µ—Ç—Ä–∏–∫–∞.status,
      –º–µ—Ç—Ä–∏–∫–∞.duration,
      –º–µ—Ç—Ä–∏–∫–∞.requestSize,
      –º–µ—Ç—Ä–∏–∫–∞.responseSize,
      –º–µ—Ç—Ä–∏–∫–∞.userAgent,
      –º–µ—Ç—Ä–∏–∫–∞.timestamp.toISOString(),
      –º–µ—Ç—Ä–∏–∫–∞.error,
      –º–µ—Ç—Ä–∏–∫–∞.sessionId
    ]);

    return result.lastID!;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
  public async —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å–ê–ª–µ—Ä—Ç(–∞–ª–µ—Ä—Ç: –ê–ª–µ—Ä—Ç): Promise<number> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const result = await this.db.run(`
      INSERT INTO alerts (type, message, component, timestamp, resolved, metadata)
      VALUES (?, ?, ?, ?, ?, ?)
    `, [
      –∞–ª–µ—Ä—Ç.type,
      –∞–ª–µ—Ä—Ç.message,
      –∞–ª–µ—Ä—Ç.component,
      –∞–ª–µ—Ä—Ç.timestamp.toISOString(),
      –∞–ª–µ—Ä—Ç.resolved,
      –∞–ª–µ—Ä—Ç.metadata
    ]);

    return result.lastID!;
  }

  // –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
  public async –ø–æ–ª—É—á–∏—Ç—å–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏(–ø–µ—Ä–∏–æ–¥: Date): Promise<any> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const —Ä–µ–∑—É–ª—å—Ç–∞—Ç = await this.db.get(`
      SELECT 
        AVG(pageLoadTime) as avgPageLoadTime,
        AVG(firstContentfulPaint) as avgFCP,
        AVG(largestContentfulPaint) as avgLCP,
        AVG(cumulativeLayoutShift) as avgCLS,
        COUNT(*) as totalMeasurements,
        COUNT(DISTINCT sessionId) as uniqueSessions
      FROM performance_metrics 
      WHERE timestamp >= ?
    `, [–ø–µ—Ä–∏–æ–¥.toISOString()]);

    return —Ä–µ–∑—É–ª—å—Ç–∞—Ç;
  }

  public async –ø–æ–ª—É—á–∏—Ç—å–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É–û—à–∏–±–æ–∫(–ø–µ—Ä–∏–æ–¥: Date): Promise<any> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const —Ä–µ–∑—É–ª—å—Ç–∞—Ç = await this.db.all(`
      SELECT 
        severity,
        type,
        COUNT(*) as count,
        SUM(occurrences) as totalOccurrences
      FROM errors 
      WHERE timestamp >= ?
      GROUP BY severity, type
      ORDER BY totalOccurrences DESC
    `, [–ø–µ—Ä–∏–æ–¥.toISOString()]);

    return —Ä–µ–∑—É–ª—å—Ç–∞—Ç;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  public async –æ—á–∏—Å—Ç–∏—Ç—å–°—Ç–∞—Ä—ã–µ–î–∞–Ω–Ω—ã–µ(–¥–Ω–µ–π–•—Ä–∞–Ω–µ–Ω–∏—è: number = 30): Promise<void> {
    if (!this.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    const cutoffDate = new Date(Date.now() - –¥–Ω–µ–π * 24 * 60 * 60 * 1000);
    const cutoffString = cutoffDate.toISOString();

    const —Ç–∞–±–ª–∏—Ü—ã–î–ª—è–û—á–∏—Å—Ç–∫–∏ = [
      'performance_metrics',
      'network_metrics', 
      'test_results'
    ];

    for (const —Ç–∞–±–ª–∏—Ü–∞ of —Ç–∞–±–ª–∏—Ü—ã–î–ª—è–û—á–∏—Å—Ç–∫–∏) {
      const result = await this.db.run(
        `DELETE FROM ${—Ç–∞–±–ª–∏—Ü–∞} WHERE timestamp < ?`,
        [cutoffString]
      );
      
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${result.changes} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ${—Ç–∞–±–ª–∏—Ü–∞}`);
    }

    // –î–ª—è –æ—à–∏–±–æ–∫ –∏ –∞–ª–µ—Ä—Ç–æ–≤ —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–Ω—ã–µ
    const errorsResult = await this.db.run(
      'DELETE FROM errors WHERE timestamp < ? AND resolved = TRUE',
      [cutoffString]
    );
    
    const alertsResult = await this.db.run(
      'DELETE FROM alerts WHERE timestamp < ? AND resolved = TRUE',
      [cutoffString]
    );

    console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${errorsResult.changes} —Ä–µ—à–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫`);
    console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${alertsResult.changes} —Ä–µ—à–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤`);

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await this.db.exec('VACUUM');
  }

  public async close(): Promise<void> {
    if (this.db) {
      await this.db.close();
      console.log('üóÑÔ∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
function –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å–ú–µ—Ç—Ä–∏–∫—É–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏(—Å—Ç—Ä–æ–∫–∞: any): –ú–µ—Ç—Ä–∏–∫–∞–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
  return {
    ...—Å—Ç—Ä–æ–∫–∞,
    timestamp: new Date(—Å—Ç—Ä–æ–∫–∞.timestamp),
    cumulativeLayoutShift: parseFloat(—Å—Ç—Ä–æ–∫–∞.cumulativeLayoutShift)
  };
}

function –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å–û—à–∏–±–∫—É(—Å—Ç—Ä–æ–∫–∞: any): –ó–∞–ø–∏—Å—å–û—à–∏–±–∫–∏ {
  return {
    ...—Å—Ç—Ä–æ–∫–∞,
    timestamp: new Date(—Å—Ç—Ä–æ–∫–∞.timestamp),
    firstSeen: new Date(—Å—Ç—Ä–æ–∫–∞.firstSeen),
    lastSeen: new Date(—Å—Ç—Ä–æ–∫–∞.lastSeen),
    resolved: Boolean(—Å—Ç—Ä–æ–∫–∞.resolved),
    context: —Å—Ç—Ä–æ–∫–∞.context ? JSON.parse(—Å—Ç—Ä–æ–∫–∞.context) : undefined
  };
}