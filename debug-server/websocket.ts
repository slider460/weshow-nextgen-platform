import { Server as SocketIOServer, Socket } from 'socket.io';

interface –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è–û–±–û—à–∏–±–∫–µ {
  message: string;
  stack: string;
  componentStack?: string;
  url: string;
  timestamp: Date;
  userAgent: string;
}

interface –ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
  pageLoadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  interactionToNextPaint: number;
}

interface –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞ {
  testName: string;
  status: 'passed' | 'failed' | 'skipped';
  duration: number;
  error?: string;
}

interface –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è–û–±–ê–ª–µ—Ä—Ç–µ {
  type: 'critical' | 'warning' | 'info';
  message: string;
  timestamp: Date;
  component: string;
}

interface –°–æ–±—ã—Ç–∏—èWebSocket {
  'error-occurred': –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è–û–±–û—à–∏–±–∫–µ;
  'performance-update': –ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏;
  'test-result': –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞;
  'system-alert': –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è–û–±–ê–ª–µ—Ä—Ç–µ;
  'autonomous-error-detected': any;
  'auto-fix-attempt': any;
  'health-check': any;
}

export class WebSocketManager {
  private io: SocketIOServer;
  private connectedClients: Map<string, Socket> = new Map();

  constructor(io: SocketIOServer) {
    this.io = io;
  }

  public setupEventHandlers(): void {
    this.io.on('connection', (socket: Socket) => {
      console.log(`üì° –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
      this.connectedClients.set(socket.id, socket);

      this.handleClientConnection(socket);

      socket.on('disconnect', () => {
        console.log(`üì° WebSocket –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
        this.connectedClients.delete(socket.id);
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
      socket.on('subscribe-to-metrics', (data) => {
        socket.join('metrics-room');
        console.log(`üìä –ö–ª–∏–µ–Ω—Ç ${socket.id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏`);
      });

      socket.on('subscribe-to-errors', (data) => {
        socket.join('errors-room');
        console.log(`üö® –ö–ª–∏–µ–Ω—Ç ${socket.id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ—à–∏–±–∫–∏`);
      });

      socket.on('subscribe-to-tests', (data) => {
        socket.join('tests-room');
        console.log(`üß™ –ö–ª–∏–µ–Ω—Ç ${socket.id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ç–µ—Å—Ç—ã`);
      });

      socket.on('request-dashboard-data', async () => {
        try {
          const dashboardData = await this.gatherDashboardData();
          socket.emit('dashboard-data', dashboardData);
        } catch (error) {
          socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö dashboard' });
        }
      });

      socket.on('run-manual-test', async (testConfig) => {
        try {
          socket.emit('test-started', { testName: testConfig.name });
          // –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ TestScheduler
        } catch (error) {
          socket.emit('test-error', { error: error.message });
        }
      });
    });
  }

  private handleClientConnection(socket: Socket): void {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    this.sendInitialData(socket);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
    const interval = setInterval(() => {
      this.sendHeartbeat(socket);
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    socket.on('disconnect', () => {
      clearInterval(interval);
    });
  }

  private async sendInitialData(socket: Socket): Promise<void> {
    try {
      const initialData = {
        timestamp: new Date(),
        status: 'connected',
        availableRooms: ['metrics-room', 'errors-room', 'tests-room']
      };
      
      socket.emit('connection-established', initialData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  private sendHeartbeat(socket: Socket): void {
    socket.emit('heartbeat', {
      timestamp: new Date(),
      serverTime: process.uptime()
    });
  }

  public broadcastToClients<K extends keyof –°–æ–±—ã—Ç–∏—èWebSocket>(
    event: K,
    data: –°–æ–±—ã—Ç–∏—èWebSocket[K]
  ): void {
    this.io.emit(event, data);
  }

  public broadcastToRoom<K extends keyof –°–æ–±—ã—Ç–∏—èWebSocket>(
    room: string,
    event: K,
    data: –°–æ–±—ã—Ç–∏—èWebSocket[K]
  ): void {
    this.io.to(room).emit(event, data);
  }

  public sendToClient<K extends keyof –°–æ–±—ã—Ç–∏—èWebSocket>(
    clientId: string,
    event: K,
    data: –°–æ–±—ã—Ç–∏—èWebSocket[K]
  ): void {
    const socket = this.connectedClients.get(clientId);
    if (socket) {
      socket.emit(event, data);
    }
  }

  private async gatherDashboardData(): Promise<any> {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è dashboard
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    return {
      timestamp: new Date(),
      metrics: {
        activeConnections: this.connectedClients.size,
        serverUptime: process.uptime()
      },
      recent: {
        errors: [],
        tests: [],
        performance: {}
      }
    };
  }

  public getConnectedClientsCount(): number {
    return this.connectedClients.size;
  }

  public isClientConnected(clientId: string): boolean {
    return this.connectedClients.has(clientId);
  }

  public disconnectClient(clientId: string): void {
    const socket = this.connectedClients.get(clientId);
    if (socket) {
      socket.disconnect();
      this.connectedClients.delete(clientId);
    }
  }

  public disconnectAllClients(): void {
    this.connectedClients.forEach((socket) => {
      socket.disconnect();
    });
    this.connectedClients.clear();
  }
}