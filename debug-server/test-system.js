#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
 */

import { promises as fs } from 'fs';
import path from 'path';
import { spawn } from 'child_process';

console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏...\n');

const tests = [
  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤',
    test: async () => {
      const requiredFiles = [
        'server.ts',
        'websocket.ts',
        'monitoring/performance.ts',
        'monitoring/errors.ts',
        'monitoring/network.ts',
        'testing/scheduler.ts',
        'testing/runner.ts',
        'autonomous/error-detector.ts',
        'self-healing/healing-system.ts',
        'database/models.ts'
      ];

      for (const file of requiredFiles) {
        try {
          await fs.access(path.join('.', file));
          console.log(`  ‚úÖ ${file}`);
        } catch (error) {
          throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: ${file}`);
        }
      }
    }
  },

  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
    test: async () => {
      try {
        const packageJson = JSON.parse(await fs.readFile('package.json', 'utf8'));
        const requiredDeps = ['express', 'socket.io', 'sqlite3', '@playwright/test'];
        
        for (const dep of requiredDeps) {
          if (packageJson.dependencies && packageJson.dependencies[dep]) {
            console.log(`  ‚úÖ ${dep}: ${packageJson.dependencies[dep]}`);
          } else {
            throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${dep}`);
          }
        }
      } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`);
      }
    }
  },

  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤',
    test: async () => {
      const checkPort = (port) => {
        return new Promise((resolve) => {
          const net = require('net');
          const server = net.createServer();
          
          server.listen(port, () => {
            server.once('close', () => {
              resolve(true);
            });
            server.close();
          });
          
          server.on('error', () => {
            resolve(false);
          });
        });
      };

      const ports = [3001, 5173];
      for (const port of ports) {
        const available = await checkPort(port);
        if (available) {
          console.log(`  ‚úÖ –ü–æ—Ä—Ç ${port} –¥–æ—Å—Ç—É–ø–µ–Ω`);
        } else {
          console.log(`  ‚ö†Ô∏è –ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç`);
        }
      }
    }
  },

  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏',
    test: async () => {
      return new Promise((resolve, reject) => {
        const tsc = spawn('npx', ['tsc', '--noEmit'], { stdio: 'pipe' });
        
        let output = '';
        tsc.stdout.on('data', (data) => output += data);
        tsc.stderr.on('data', (data) => output += data);
        
        tsc.on('close', (code) => {
          if (code === 0) {
            console.log(`  ‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`);
            resolve();
          } else {
            console.log(`  ‚ùå –û—à–∏–±–∫–∏ TypeScript:\n${output}`);
            reject(new Error('TypeScript compilation failed'));
          }
        });
      });
    }
  },

  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ dashboard —Ñ–∞–π–ª–æ–≤',
    test: async () => {
      const dashboardFiles = [
        '../debug-dashboard/index.html',
        '../debug-dashboard/dashboard.js'
      ];

      for (const file of dashboardFiles) {
        try {
          await fs.access(path.join('.', file));
          console.log(`  ‚úÖ ${file}`);
        } catch (error) {
          throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª dashboard: ${file}`);
        }
      }
    }
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
let passed = 0;
let failed = 0;

for (const testCase of tests) {
  try {
    console.log(`\nüîç ${testCase.name}:`);
    await testCase.test();
    passed++;
    console.log(`  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω`);
  } catch (error) {
    failed++;
    console.log(`  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`);
  }
}

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
console.log(`  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
console.log(`  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
console.log(`  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / tests.length) * 100)}%`);

if (failed === 0) {
  console.log(`\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É.`);
  console.log(`\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:`);
  console.log(`   npm install  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π`);
  console.log(`   npm run dev  # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ª–∞–¥–∫–∏`);
} else {
  console.log(`\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.`);
  process.exit(1);
}