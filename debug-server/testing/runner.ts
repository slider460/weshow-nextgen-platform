import { chromium, firefox, webkit, Browser, BrowserContext, Page } from '@playwright/test';
import fs from 'fs/promises';
import path from 'path';

interface –ö–æ–Ω—Ñ–∏–≥–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—èPlaywright {
  browser: string;
  testFiles: string[];
  baseURL: string;
  parallel: boolean;
  timeout?: number;
  retries?: number;
}

interface –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞ {
  testName: string;
  status: 'passed' | 'failed' | 'skipped' | 'timeout';
  duration: number;
  error?: string;
  screenshot?: string;
  timestamp: Date;
  browser: string;
}

export class PlaywrightTestRunner {
  private browsers: Map<string, Browser> = new Map();

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  }

  public async runTestsForBrowser(config: –ö–æ–Ω—Ñ–∏–≥–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—èPlaywright): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[]> {
    const browser = await this.getBrowser(config.browser);
    const results: –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[] = [];

    try {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
      const context = await browser.newContext({
        viewport: { width: 1920, height: 1080 },
        ignoreHTTPSErrors: true
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
      for (const testFile of config.testFiles) {
        const testResults = await this.runTestFile(context, testFile, config);
        results.push(...testResults);
      }

      await context.close();

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ ${config.browser}:`, error);
      
      results.push({
        testName: `Browser ${config.browser} initialization`,
        status: 'failed',
        duration: 0,
        error: error.message,
        timestamp: new Date(),
        browser: config.browser
      });
    }

    return results;
  }

  private async getBrowser(browserName: string): Promise<Browser> {
    if (this.browsers.has(browserName)) {
      return this.browsers.get(browserName)!;
    }

    let browser: Browser;

    switch (browserName.toLowerCase()) {
      case 'chromium':
      case 'chrome':
        browser = await chromium.launch({ 
          headless: true,
          args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        break;
      case 'firefox':
        browser = await firefox.launch({ headless: true });
        break;
      case 'webkit':
      case 'safari':
        browser = await webkit.launch({ headless: true });
        break;
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±—Ä–∞—É–∑–µ—Ä: ${browserName}`);
    }

    this.browsers.set(browserName, browser);
    return browser;
  }

  private async runTestFile(
    context: BrowserContext, 
    testFile: string, 
    config: –ö–æ–Ω—Ñ–∏–≥–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—èPlaywright
  ): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[]> {
    const results: –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[] = [];
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞
      const fullPath = path.resolve(testFile);
      await fs.access(fullPath);

      console.log(`üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: ${testFile} –≤ –±—Ä–∞—É–∑–µ—Ä–µ ${config.browser}`);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const page = await context.newPage();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupPageHandlers(page);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
      const testResult = await this.executeBasicTests(page, config);
      results.push(...testResult);

      await page.close();

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ ${testFile}:`, error);
      
      results.push({
        testName: testFile,
        status: 'failed',
        duration: 0,
        error: error.message,
        timestamp: new Date(),
        browser: config.browser
      });
    }

    return results;
  }

  private setupPageHandlers(page: Page): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ JavaScript
    page.on('pageerror', (error) => {
      console.error('–û—à–∏–±–∫–∞ JavaScript –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', error.message);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    page.on('requestfailed', (request) => {
      console.warn('–ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', request.url(), request.failure()?.errorText);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    page.on('console', (msg) => {
      if (msg.type() === 'error') {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏:', msg.text());
      }
    });
  }

  private async executeBasicTests(page: Page, config: –ö–æ–Ω—Ñ–∏–≥–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—èPlaywright): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[]> {
    const results: –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[] = [];
    const baseURL = config.baseURL;

    // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    results.push(await this.testPageLoad(page, baseURL, config.browser));

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    results.push(await this.testBasicElements(page, config.browser));

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    results.push(await this.testGameFunctionality(page, config.browser));

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    results.push(await this.testPerformance(page, config.browser));

    return results;
  }

  private async testPageLoad(page: Page, url: string, browser: string): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞> {
    const startTime = Date.now();
    
    try {
      console.log(`üìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);
      
      await page.goto(url, { 
        waitUntil: 'networkidle',
        timeout: 30000 
      });

      const duration = Date.now() - startTime;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
      const title = await page.title();
      if (!title || title.toLowerCase().includes('error')) {
        throw new Error(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}`);
      }

      return {
        testName: '–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        status: 'passed',
        duration,
        timestamp: new Date(),
        browser
      };

    } catch (error) {
      return {
        testName: '–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        status: 'failed',
        duration: Date.now() - startTime,
        error: error.message,
        timestamp: new Date(),
        browser
      };
    }
  }

  private async testBasicElements(page: Page, browser: string): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞> {
    const startTime = Date.now();
    
    try {
      console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const navigation = await page.locator('nav').first();
      await navigation.waitFor({ timeout: 5000 });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
      const content = await page.locator('main, [role="main"], .main-content').first();
      await content.waitFor({ timeout: 5000 });

      return {
        testName: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        status: 'passed',
        duration: Date.now() - startTime,
        timestamp: new Date(),
        browser
      };

    } catch (error) {
      return {
        testName: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        status: 'failed',
        duration: Date.now() - startTime,
        error: error.message,
        timestamp: new Date(),
        browser
      };
    }
  }

  private async testGameFunctionality(page: Page, browser: string): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞> {
    const startTime = Date.now();
    
    try {
      console.log('üéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã...');

      // –ò—â–µ–º canvas —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const gameElement = await page.locator('canvas, .game-container, #game').first();
      
      if (await gameElement.count() === 0) {
        return {
          testName: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã',
          status: 'skipped',
          duration: Date.now() - startTime,
          error: '–ò–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          timestamp: new Date(),
          browser
        };
      }

      await gameElement.waitFor({ timeout: 10000 });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º
      const isVisible = await gameElement.isVisible();
      if (!isVisible) {
        throw new Error('–ò–≥—Ä–æ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≤–∏–¥–∏–º');
      }

      return {
        testName: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã',
        status: 'passed',
        duration: Date.now() - startTime,
        timestamp: new Date(),
        browser
      };

    } catch (error) {
      return {
        testName: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã',
        status: 'failed',
        duration: Date.now() - startTime,
        error: error.message,
        timestamp: new Date(),
        browser
      };
    }
  }

  private async testPerformance(page: Page, browser: string): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞> {
    const startTime = Date.now();
    
    try {
      console.log('‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');

      // –ò–∑–º–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const performanceMetrics = await page.evaluate(() => {
        const performance = window.performance;
        const timing = performance.timing;
        
        return {
          loadTime: timing.loadEventEnd - timing.navigationStart,
          domContentLoaded: timing.domContentLoadedEventEnd - timing.navigationStart,
          firstPaint: performance.getEntriesByType('paint')
            .find(entry => entry.name === 'first-contentful-paint')?.startTime || 0
        };
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (performanceMetrics.loadTime > 5000) {
        throw new Error(`–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${performanceMetrics.loadTime}ms`);
      }

      return {
        testName: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        status: 'passed',
        duration: Date.now() - startTime,
        timestamp: new Date(),
        browser
      };

    } catch (error) {
      return {
        testName: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        status: 'failed',
        duration: Date.now() - startTime,
        error: error.message,
        timestamp: new Date(),
        browser
      };
    }
  }

  public async cleanup(): Promise<void> {
    console.log('üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤...');
    
    for (const [browserName, browser] of this.browsers) {
      try {
        await browser.close();
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${browserName} –∑–∞–∫—Ä—ã—Ç`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ ${browserName}:`, error);
      }
    }
    
    this.browsers.clear();
  }
}