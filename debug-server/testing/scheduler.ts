import { test, Page, Browser, BrowserContext } from '@playwright/test';
import { PlaywrightTestRunner } from './runner.js';

interface –ö–æ–Ω—Ñ–∏–≥–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {
  autoRunInterval: number;
  browsers: string[];
  baseURL?: string;
  testFiles?: string[];
  parallel?: boolean;
}

interface –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞ {
  testName: string;
  status: 'passed' | 'failed' | 'skipped' | 'timeout';
  duration: number;
  error?: string;
  screenshot?: string;
  timestamp: Date;
  browser: string;
}

interface –†–µ–∑—É–ª—å—Ç–∞—Ç—ã–¢–µ—Å—Ç–æ–≤ {
  totalTests: number;
  passed: number;
  failed: number;
  skipped: number;
  duration: number;
  timestamp: Date;
  results: –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[];
}

export class TestScheduler {
  private config: –ö–æ–Ω—Ñ–∏–≥–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è;
  private runner: PlaywrightTestRunner;
  private schedulerInterval?: NodeJS.Timeout;
  private isRunning: boolean = false;
  private lastResults: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã–¢–µ—Å—Ç–æ–≤ | null = null;

  constructor(config: –ö–æ–Ω—Ñ–∏–≥–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) {
    this.config = {
      baseURL: 'http://localhost:5173',
      testFiles: ['tests/**/*.spec.ts'],
      parallel: true,
      ...config
    };
    this.runner = new PlaywrightTestRunner();
  }

  public async start(): Promise<void> {
    console.log('üß™ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å—Ä–∞–∑—É
    await this.runScheduledTests();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    this.schedulerInterval = setInterval(async () => {
      if (!this.isRunning) {
        await this.runScheduledTests();
      }
    }, this.config.autoRunInterval);

    console.log(`‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.config.autoRunInterval / 1000}—Å)`);
  }

  public async stop(): Promise<void> {
    if (this.schedulerInterval) {
      clearInterval(this.schedulerInterval);
      this.schedulerInterval = undefined;
    }
    console.log('‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  private async runScheduledTests(): Promise<void> {
    if (this.isRunning) {
      console.log('‚è≥ –¢–µ—Å—Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    try {
      this.isRunning = true;
      console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...');

      const results = await this.runTests();
      this.lastResults = results;

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      await this.analyzeResults(results);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    } finally {
      this.isRunning = false;
    }
  }

  public async runTests(specificSuite?: string): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç—ã–¢–µ—Å—Ç–æ–≤> {
    const startTime = Date.now();
    const results: –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[] = [];

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
      const testFiles = specificSuite ? [specificSuite] : this.config.testFiles!;
      
      for (const browser of this.config.browsers) {
        console.log(`üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: ${browser}`);
        
        const browserResults = await this.runner.runTestsForBrowser({
          browser,
          testFiles,
          baseURL: this.config.baseURL!,
          parallel: this.config.parallel!
        });

        results.push(...browserResults);
      }

      const duration = Date.now() - startTime;
      const testResults: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã–¢–µ—Å—Ç–æ–≤ = {
        totalTests: results.length,
        passed: results.filter(r => r.status === 'passed').length,
        failed: results.filter(r => r.status === 'failed').length,
        skipped: results.filter(r => r.status === 'skipped').length,
        duration,
        timestamp: new Date(),
        results
      };

      console.log(`‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${testResults.passed}/${testResults.totalTests} –ø—Ä–æ—à–ª–∏ (${duration}ms)`);
      return testResults;

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
      throw error;
    }
  }

  private async analyzeResults(results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã–¢–µ—Å—Ç–æ–≤): Promise<void> {
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    const successRate = (results.passed / results.totalTests) * 100;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    if (successRate < 80) {
      const alert = {
        type: 'warning' as const,
        message: `–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤: ${successRate.toFixed(1)}% (${results.passed}/${results.totalTests})`,
        timestamp: new Date(),
        component: 'test-scheduler'
      };
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
      console.warn(`‚ö†Ô∏è ${alert.message}`);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–∞–ª—ã
    const criticalFailures = results.results.filter(r => 
      r.status === 'failed' && r.testName.includes('critical')
    );

    if (criticalFailures.length > 0) {
      const alert = {
        type: 'critical' as const,
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: ${criticalFailures.map(f => f.testName).join(', ')}`,
        timestamp: new Date(),
        component: 'test-scheduler'
      };
      
      console.error(`üö® ${alert.message}`);
    }
  }

  public async getLatestResults(): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç—ã–¢–µ—Å—Ç–æ–≤ | null> {
    return this.lastResults;
  }

  public async getTestHistory(days: number = 7): Promise<any> {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
    return {
      period: `${days} –¥–Ω–µ–π`,
      totalRuns: 0,
      averageSuccessRate: 0,
      trends: []
    };
  }

  public async runSpecificTest(testPath: string): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[]> {
    console.log(`üéØ –ó–∞–ø—É—Å–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞: ${testPath}`);
    
    const results: –†–µ–∑—É–ª—å—Ç–∞—Ç–¢–µ—Å—Ç–∞[] = [];
    
    for (const browser of this.config.browsers) {
      const browserResults = await this.runner.runTestsForBrowser({
        browser,
        testFiles: [testPath],
        baseURL: this.config.baseURL!,
        parallel: false
      });
      
      results.push(...browserResults);
    }
    
    return results;
  }

  public async runCriticalPathTests(): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç—ã–¢–µ—Å—Ç–æ–≤> {
    console.log('üî• –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
    const criticalTests = [
      'tests/game-basic.spec.ts',
      'tests/canvas-test.spec.ts'
    ];
    
    return await this.runTests(criticalTests.join(','));
  }

  public updateConfig(newConfig: Partial<–ö–æ–Ω—Ñ–∏–≥–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è>): void {
    this.config = { ...this.config, ...newConfig };
    console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', this.config);
  }

  public isCurrentlyRunning(): boolean {
    return this.isRunning;
  }

  public getConfig(): –ö–æ–Ω—Ñ–∏–≥–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {
    return { ...this.config };
  }
}