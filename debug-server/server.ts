import express from 'express';
import cors from 'cors';
import http from 'http';
import { Server as SocketIOServer } from 'socket.io';
import { WebSocketManager } from './websocket.js';
import { PerformanceMonitor } from './monitoring/performance.js';
import { ErrorHandler } from './monitoring/errors.js';
import { NetworkMonitor } from './monitoring/network.js';
import { TestScheduler } from './testing/scheduler.js';
import { DatabaseManager } from './database/models.js';
import { –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π–ú–æ–Ω–∏—Ç–æ—Ä } from './autonomous/error-detector.js';
import { –°–∏—Å—Ç–µ–º–∞–°–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è } from './self-healing/healing-system.js';

interface –ö–æ–Ω—Ñ–∏–≥–°–µ—Ä–≤–µ—Ä–∞–û—Ç–ª–∞–¥–∫–∏ {
  port: number;
  corsOrigins: string[];
  database: {
    type: 'sqlite' | 'postgresql';
    host?: string;
    port?: number;
    database: string;
    username?: string;
    password?: string;
  };
  monitoring: {
    intervalMs: number;
    metricsRetentionDays: number;
  };
  testing: {
    autoRunInterval: number;
    browsers: string[];
  };
}

export class –°–µ—Ä–≤–µ—Ä–û—Ç–ª–∞–¥–∫–∏ {
  private app: express.Application;
  private server: http.Server;
  private io: SocketIOServer;
  private wsManager: WebSocketManager;
  private performanceMonitor: PerformanceMonitor;
  private errorHandler: ErrorHandler;
  private networkMonitor: NetworkMonitor;
  private testScheduler: TestScheduler;
  private dbManager: DatabaseManager;
  private –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π–ú–æ–Ω–∏—Ç–æ—Ä: –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π–ú–æ–Ω–∏—Ç–æ—Ä;
  private —Å–∏—Å—Ç–µ–º–∞–°–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è: –°–∏—Å—Ç–µ–º–∞–°–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è;
  private config: –ö–æ–Ω—Ñ–∏–≥–°–µ—Ä–≤–µ—Ä–∞–û—Ç–ª–∞–¥–∫–∏;

  constructor(config: –ö–æ–Ω—Ñ–∏–≥–°–µ—Ä–≤–µ—Ä–∞–û—Ç–ª–∞–¥–∫–∏) {
    this.config = config;
    this.app = express();
    this.server = http.createServer(this.app);
    this.io = new SocketIOServer(this.server, {
      cors: {
        origin: config.corsOrigins,
        methods: ['GET', 'POST']
      }
    });

    this.initializeComponents();
    this.setupMiddleware();
    this.setupRoutes();
    this.setupWebSocket();
  }

  private initializeComponents(): void {
    this.dbManager = new DatabaseManager(this.config.database);
    this.wsManager = new WebSocketManager(this.io);
    this.performanceMonitor = new PerformanceMonitor(this.wsManager);
    this.errorHandler = new ErrorHandler(this.wsManager);
    this.networkMonitor = new NetworkMonitor(this.wsManager);
    this.testScheduler = new TestScheduler(this.config.testing);
    this.–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π–ú–æ–Ω–∏—Ç–æ—Ä = new –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π–ú–æ–Ω–∏—Ç–æ—Ä();
    this.—Å–∏—Å—Ç–µ–º–∞–°–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è = new –°–∏—Å—Ç–µ–º–∞–°–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è();
  }

  private setupMiddleware(): void {
    this.app.use(cors({
      origin: this.config.corsOrigins,
      credentials: true
    }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: true }));
  }

  private setupRoutes(): void {
    // API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    this.app.get('/api/metrics/performance', async (req, res) => {
      try {
        const metrics = await this.performanceMonitor.getMetrics();
        res.json(metrics);
      } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' });
      }
    });

    this.app.get('/api/metrics/errors', async (req, res) => {
      try {
        const errors = await this.errorHandler.getRecentErrors();
        res.json(errors);
      } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫' });
      }
    });

    this.app.get('/api/tests/results', async (req, res) => {
      try {
        const results = await this.testScheduler.getLatestResults();
        res.json(results);
      } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤' });
      }
    });

    // API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∏–µ–Ω—Ç–∞
    this.app.post('/api/metrics/performance', async (req, res) => {
      try {
        await this.performanceMonitor.recordMetrics(req.body);
        res.json({ success: true });
      } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫' });
      }
    });

    this.app.post('/api/errors/report', async (req, res) => {
      try {
        await this.errorHandler.reportError(req.body);
        res.json({ success: true });
      } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–∫–∏' });
      }
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏
    this.app.post('/api/tests/run', async (req, res) => {
      try {
        const result = await this.testScheduler.runTests(req.body.testSuite);
        res.json(result);
      } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤' });
      }
    });

    // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    this.app.get('/api/system/health', async (req, res) => {
      try {
        const health = await this.—Å–∏—Å—Ç–µ–º–∞–°–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è.–ø—Ä–æ–≤–µ—Ä–∏—Ç—å–ó–¥–æ—Ä–æ–≤—å–µ–°–∏—Å—Ç–µ–º—ã();
        res.json(health);
      } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã' });
      }
    });

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è dashboard
    this.app.use('/dashboard', express.static('../debug-dashboard'));
  }

  private setupWebSocket(): void {
    this.wsManager.setupEventHandlers();
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫ WebSocket
    this.–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π–ú–æ–Ω–∏—Ç–æ—Ä.onErrorDetected((error) => {
      this.wsManager.broadcastToClients('autonomous-error-detected', error);
    });

    this.–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π–ú–æ–Ω–∏—Ç–æ—Ä.onAutoFixAttempt((fixAttempt) => {
      this.wsManager.broadcastToClients('auto-fix-attempt', fixAttempt);
    });
  }

  public async start(): Promise<void> {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.dbManager.initialize();
      
      // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      await this.startMonitoring();
      
      // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      await this.–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π–ú–æ–Ω–∏—Ç–æ—Ä.–Ω–∞—á–∞—Ç—å–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥();
      
      // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è
      await this.—Å–∏—Å—Ç–µ–º–∞–°–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è.–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å–ó–¥–æ—Ä–æ–≤—å–µ();
      
      // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      this.server.listen(this.config.port, () => {
        console.log(`üîß –°–µ—Ä–≤–µ—Ä –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.config.port}`);
        console.log(`üìä Dashboard –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${this.config.port}/dashboard`);
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
      process.exit(1);
    }
  }

  private async startMonitoring(): void {
    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
    await this.testScheduler.start();
    
    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.performanceMonitor.startMonitoring();
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.networkMonitor.startMonitoring();
    
    console.log('‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω—ã');
  }

  public async stop(): Promise<void> {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ª–∞–¥–∫–∏...');
    
    await this.testScheduler.stop();
    await this.performanceMonitor.stop();
    await this.networkMonitor.stop();
    await this.–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π–ú–æ–Ω–∏—Ç–æ—Ä.–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥();
    await this.dbManager.close();
    
    this.server.close();
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–ª–∞–¥–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultConfig: –ö–æ–Ω—Ñ–∏–≥–°–µ—Ä–≤–µ—Ä–∞–û—Ç–ª–∞–¥–∫–∏ = {
  port: 3001,
  corsOrigins: ['http://localhost:5173', 'http://localhost:3000'],
  database: {
    type: 'sqlite',
    database: './debug-data.db'
  },
  monitoring: {
    intervalMs: 5000,
    metricsRetentionDays: 30
  },
  testing: {
    autoRunInterval: 1800000, // 30 –º–∏–Ω—É—Ç
    browsers: ['chromium', 'firefox', 'webkit']
  }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  const —Å–µ—Ä–≤–µ—Ä = new –°–µ—Ä–≤–µ—Ä–û—Ç–ª–∞–¥–∫–∏(defaultConfig);
  
  process.on('SIGTERM', async () => {
    await —Å–µ—Ä–≤–µ—Ä.stop();
    process.exit(0);
  });
  
  process.on('SIGINT', async () => {
    await —Å–µ—Ä–≤–µ—Ä.stop();
    process.exit(0);
  });
  
  —Å–µ—Ä–≤–µ—Ä.start().catch(console.error);
}