import { WebSocketManager } from '../websocket.js';

export interface –ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
  pageLoadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  cumulativeLayoutShift: number;
  interactionToNextPaint: number;
  memoryUsage?: {
    used: number;
    total: number;
  };
  networkLatency?: number;
  renderTime?: number;
  bundleSize?: number;
  timestamp: Date;
  url: string;
  userAgent: string;
}

interface –ü–æ—Ä–æ–≥–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
  pageLoadTime: number; // –º—Å
  firstContentfulPaint: number; // –º—Å
  largestContentfulPaint: number; // –º—Å
  cumulativeLayoutShift: number; // –±–µ–∑—Ä–∞–∑–º–µ—Ä–Ω–æ–µ
  interactionToNextPaint: number; // –º—Å
}

export class PerformanceMonitor {
  private wsManager: WebSocketManager;
  private metrics: –ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏[] = [];
  private monitoringInterval?: NodeJS.Timeout;
  private thresholds: –ü–æ—Ä–æ–≥–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ = {
    pageLoadTime: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã
    firstContentfulPaint: 1800, // 1.8 —Å–µ–∫—É–Ω–¥—ã
    largestContentfulPaint: 2500, // 2.5 —Å–µ–∫—É–Ω–¥—ã
    cumulativeLayoutShift: 0.1, // 0.1 –µ–¥–∏–Ω–∏—Ü—ã
    interactionToNextPaint: 200 // 200 –º—Å
  };

  constructor(wsManager: WebSocketManager) {
    this.wsManager = wsManager;
  }

  public startMonitoring(): void {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    this.monitoringInterval = setInterval(() => {
      this.collectServerMetrics();
    }, 10000);
  }

  public stop(): Promise<void> {
    return new Promise((resolve) => {
      if (this.monitoringInterval) {
        clearInterval(this.monitoringInterval);
        this.monitoringInterval = undefined;
      }
      console.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      resolve();
    });
  }

  public async recordMetrics(metrics: –ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏): Promise<void> {
    // –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!metrics.timestamp) {
      metrics.timestamp = new Date();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    this.metrics.push(metrics);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
    if (this.metrics.length > 1000) {
      this.metrics = this.metrics.slice(-1000);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º
    await this.analyzePerformance(metrics);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    this.wsManager.broadcastToRoom('metrics-room', 'performance-update', metrics);

    console.log(`üìä –ó–∞–ø–∏—Å–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è ${metrics.url}`);
  }

  private async analyzePerformance(metrics: –ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏): Promise<void> {
    const issues: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ—Ç–∏–≤ –ø–æ—Ä–æ–≥–æ–≤
    if (metrics.pageLoadTime > this.thresholds.pageLoadTime) {
      issues.push(`–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${metrics.pageLoadTime}–º—Å (–Ω–æ—Ä–º–∞: ${this.thresholds.pageLoadTime}–º—Å)`);
    }

    if (metrics.firstContentfulPaint > this.thresholds.firstContentfulPaint) {
      issues.push(`–ú–µ–¥–ª–µ–Ω–Ω—ã–π FCP: ${metrics.firstContentfulPaint}–º—Å (–Ω–æ—Ä–º–∞: ${this.thresholds.firstContentfulPaint}–º—Å)`);
    }

    if (metrics.largestContentfulPaint > this.thresholds.largestContentfulPaint) {
      issues.push(`–ú–µ–¥–ª–µ–Ω–Ω—ã–π LCP: ${metrics.largestContentfulPaint}–º—Å (–Ω–æ—Ä–º–∞: ${this.thresholds.largestContentfulPaint}–º—Å)`);
    }

    if (metrics.cumulativeLayoutShift > this.thresholds.cumulativeLayoutShift) {
      issues.push(`–í—ã—Å–æ–∫–∏–π CLS: ${metrics.cumulativeLayoutShift} (–Ω–æ—Ä–º–∞: ${this.thresholds.cumulativeLayoutShift})`);
    }

    if (metrics.interactionToNextPaint > this.thresholds.interactionToNextPaint) {
      issues.push(`–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${metrics.interactionToNextPaint}–º—Å (–Ω–æ—Ä–º–∞: ${this.thresholds.interactionToNextPaint}–º—Å)`);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
    if (issues.length > 0) {
      const alert = {
        type: 'warning' as const,
        message: `–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ ${metrics.url}: ${issues.join(', ')}`,
        timestamp: new Date(),
        component: 'performance-monitor'
      };

      this.wsManager.broadcastToClients('system-alert', alert);
      console.warn(`‚ö†Ô∏è ${alert.message}`);
    }
  }

  private collectServerMetrics(): void {
    const memUsage = process.memoryUsage();
    const cpuUsage = process.cpuUsage();

    const serverMetrics = {
      timestamp: new Date(),
      memory: {
        rss: memUsage.rss,
        heapTotal: memUsage.heapTotal,
        heapUsed: memUsage.heapUsed,
        external: memUsage.external
      },
      cpu: {
        user: cpuUsage.user,
        system: cpuUsage.system
      },
      uptime: process.uptime()
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    this.wsManager.broadcastToRoom('metrics-room', 'performance-update', {
      ...serverMetrics,
      pageLoadTime: 0,
      firstContentfulPaint: 0,
      largestContentfulPaint: 0,
      cumulativeLayoutShift: 0,
      interactionToNextPaint: 0,
      url: 'server',
      userAgent: 'debug-server'
    } as –ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏);
  }

  public async getMetrics(limit: number = 100): Promise<–ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏[]> {
    return this.metrics.slice(-limit);
  }

  public async getAverageMetrics(timeRangeMinutes: number = 60): Promise<any> {
    const cutoffTime = new Date(Date.now() - timeRangeMinutes * 60 * 1000);
    const recentMetrics = this.metrics.filter(m => m.timestamp >= cutoffTime);

    if (recentMetrics.length === 0) {
      return null;
    }

    const totals = recentMetrics.reduce((acc, metric) => ({
      pageLoadTime: acc.pageLoadTime + metric.pageLoadTime,
      firstContentfulPaint: acc.firstContentfulPaint + metric.firstContentfulPaint,
      largestContentfulPaint: acc.largestContentfulPaint + metric.largestContentfulPaint,
      cumulativeLayoutShift: acc.cumulativeLayoutShift + metric.cumulativeLayoutShift,
      interactionToNextPaint: acc.interactionToNextPaint + metric.interactionToNextPaint
    }), {
      pageLoadTime: 0,
      firstContentfulPaint: 0,
      largestContentfulPaint: 0,
      cumulativeLayoutShift: 0,
      interactionToNextPaint: 0
    });

    const count = recentMetrics.length;
    return {
      count,
      averages: {
        pageLoadTime: Math.round(totals.pageLoadTime / count),
        firstContentfulPaint: Math.round(totals.firstContentfulPaint / count),
        largestContentfulPaint: Math.round(totals.largestContentfulPaint / count),
        cumulativeLayoutShift: Number((totals.cumulativeLayoutShift / count).toFixed(3)),
        interactionToNextPaint: Math.round(totals.interactionToNextPaint / count)
      },
      timeRange: `${timeRangeMinutes} –º–∏–Ω—É—Ç`
    };
  }

  public getPerformanceScore(metrics: –ú–µ—Ç—Ä–∏–∫–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏): number {
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0-100)
    let score = 100;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤
    if (metrics.pageLoadTime > this.thresholds.pageLoadTime) {
      score -= 20;
    }
    if (metrics.firstContentfulPaint > this.thresholds.firstContentfulPaint) {
      score -= 15;
    }
    if (metrics.largestContentfulPaint > this.thresholds.largestContentfulPaint) {
      score -= 20;
    }
    if (metrics.cumulativeLayoutShift > this.thresholds.cumulativeLayoutShift) {
      score -= 25;
    }
    if (metrics.interactionToNextPaint > this.thresholds.interactionToNextPaint) {
      score -= 20;
    }

    return Math.max(0, score);
  }

  public updateThresholds(newThresholds: Partial<–ü–æ—Ä–æ–≥–∏–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏>): void {
    this.thresholds = { ...this.thresholds, ...newThresholds };
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Ä–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', this.thresholds);
  }
}