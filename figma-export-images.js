#!/usr/bin/env node

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Figma
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join } from 'path';

console.log('üñºÔ∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Figma\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const FIGMA_API_BASE = 'https://api.figma.com/v1';
const FIGMA_DOCUMENT_ID = process.env.FIGMA_DOCUMENT_ID || 'if9cW5Ga1xyeUTGYc2ea9K';
const FIGMA_NODE_ID = process.env.FIGMA_NODE_ID || '287-2';
const FIGMA_TOKEN = process.env.FIGMA_ACCESS_TOKEN;

if (!FIGMA_TOKEN || FIGMA_TOKEN === 'your_token_here') {
  console.log('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Figma API —Ç–æ–∫–µ–Ω');
  console.log('üí° –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env.local —Ñ–∞–π–ª');
  console.log('   FIGMA_ACCESS_TOKEN=your_actual_token_here');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
const exportDir = join(process.cwd(), 'public', 'figma-exports');
const imagesDir = join(exportDir, 'images');
const iconsDir = join(exportDir, 'icons');

[exportDir, imagesDir, iconsDir].forEach(dir => {
  if (!existsSync(dir)) {
    mkdirSync(dir, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dir}`);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function exportImages() {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    const docResponse = await fetch(`${FIGMA_API_BASE}/files/${FIGMA_DOCUMENT_ID}`, {
      headers: {
        'X-Figma-Token': FIGMA_TOKEN
      }
    });

    if (!docResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docResponse.status}`);
    }

    const docData = await docResponse.json();
    console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç: ${docData.name}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–∑–ª–∞
    console.log('üñºÔ∏è  –≠–∫—Å–ø–æ—Ä—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    const imagesResponse = await fetch(`${FIGMA_API_BASE}/images/${FIGMA_DOCUMENT_ID}?ids=${FIGMA_NODE_ID}&format=png&scale=2`, {
      headers: {
        'X-Figma-Token': FIGMA_TOKEN
      }
    });

    if (!imagesResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imagesResponse.status}`);
    }

    const imagesData = await imagesResponse.json();
    
    if (imagesData.images && imagesData.images[FIGMA_NODE_ID]) {
      const imageUrl = imagesData.images[FIGMA_NODE_ID];
      console.log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageUrl}`);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageResponse = await fetch(imageUrl);
      const imageBuffer = await imageResponse.arrayBuffer();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imagePath = join(imagesDir, `node-${FIGMA_NODE_ID}.png`);
      writeFileSync(imagePath, Buffer.from(imageBuffer));
      
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${imagePath}`);
    } else {
      console.log('‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞');
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('üîÑ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ...');
    await exportAllImages(docData);

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function exportAllImages(docData) {
  const imageNodes = [];
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤—Å–µ —É–∑–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  function findImageNodes(node) {
    if (node.type === 'RECTANGLE' && node.fills) {
      const hasImage = node.fills.some(fill => fill.type === 'IMAGE');
      if (hasImage) {
        imageNodes.push(node.id);
      }
    }
    
    if (node.children) {
      node.children.forEach(child => findImageNodes(child));
    }
  }

  findImageNodes(docData.document);
  
  if (imageNodes.length === 0) {
    console.log('‚ÑπÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ');
    return;
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${imageNodes.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const nodeIds = imageNodes.join(',');
  const imagesResponse = await fetch(`${FIGMA_API_BASE}/images/${FIGMA_DOCUMENT_ID}?ids=${nodeIds}&format=png&scale=2`, {
    headers: {
      'X-Figma-Token': FIGMA_TOKEN
    }
  });

  if (!imagesResponse.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imagesResponse.status}`);
  }

  const imagesData = await imagesResponse.json();
  
  let exportedCount = 0;
  for (const [nodeId, imageUrl] of Object.entries(imagesData.images)) {
    if (imageUrl) {
      try {
        const imageResponse = await fetch(imageUrl);
        const imageBuffer = await imageResponse.arrayBuffer();
        
        const imagePath = join(imagesDir, `image-${nodeId}.png`);
        writeFileSync(imagePath, Buffer.from(imageBuffer));
        
        console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: image-${nodeId}.png`);
        exportedCount++;
      } catch (error) {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ ${nodeId}:`, error.message);
      }
    }
  }

  console.log(`üéâ –£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${exportedCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∫–æ–Ω–æ–∫ –≤ SVG
async function exportIcons() {
  try {
    console.log('üéØ –≠–∫—Å–ø–æ—Ä—Ç –∏–∫–æ–Ω–æ–∫ –≤ SVG...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    const docResponse = await fetch(`${FIGMA_API_BASE}/files/${FIGMA_DOCUMENT_ID}`, {
      headers: {
        'X-Figma-Token': FIGMA_TOKEN
      }
    });

    if (!docResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docResponse.status}`);
    }

    const docData = await docResponse.json();
    
    // –ò—â–µ–º –∏–∫–æ–Ω–∫–∏ (–æ–±—ã—á–Ω–æ —ç—Ç–æ FRAME –∏–ª–∏ COMPONENT —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏)
    const iconNodes = [];
    
    function findIconNodes(node) {
      if ((node.type === 'FRAME' || node.type === 'COMPONENT') && 
          node.absoluteBoundingBox && 
          node.absoluteBoundingBox.width < 100 && 
          node.absoluteBoundingBox.height < 100) {
        iconNodes.push(node.id);
      }
      
      if (node.children) {
        node.children.forEach(child => findIconNodes(child));
      }
    }

    findIconNodes(docData.document);
    
    if (iconNodes.length === 0) {
      console.log('‚ÑπÔ∏è  –ò–∫–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${iconNodes.length} –∏–∫–æ–Ω–æ–∫`);

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ –≤ SVG
    const nodeIds = iconNodes.join(',');
    const iconsResponse = await fetch(`${FIGMA_API_BASE}/images/${FIGMA_DOCUMENT_ID}?ids=${nodeIds}&format=svg`, {
      headers: {
        'X-Figma-Token': FIGMA_TOKEN
      }
    });

    if (!iconsResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∫–æ–Ω–æ–∫: ${iconsResponse.status}`);
    }

    const iconsData = await iconsResponse.json();
    
    let exportedCount = 0;
    for (const [nodeId, iconUrl] of Object.entries(iconsData.images)) {
      if (iconUrl) {
        try {
          const iconResponse = await fetch(iconUrl);
          const iconSvg = await iconResponse.text();
          
          const iconPath = join(iconsDir, `icon-${nodeId}.svg`);
          writeFileSync(iconPath, iconSvg);
          
          console.log(`‚úÖ –ò–∫–æ–Ω–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: icon-${nodeId}.svg`);
          exportedCount++;
        } catch (error) {
          console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∫–æ–Ω–∫–∏ ${nodeId}:`, error.message);
        }
      }
    }

    console.log(`üéâ –£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${exportedCount} –∏–∫–æ–Ω–æ–∫`);

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∫–æ–Ω–æ–∫:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞...\n');
  
  await exportImages();
  console.log('');
  await exportIcons();
  
  console.log('\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log(`üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${exportDir}`);
  console.log('üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: public/figma-exports/images/');
  console.log('üéØ –ò–∫–æ–Ω–∫–∏: public/figma-exports/icons/');
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);



