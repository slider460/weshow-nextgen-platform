#!/usr/bin/env node

// –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co'
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API
async function sendToSupabase(table, method, data, params) {
  try {
    const url = `${SUPABASE_URL}/rest/v1/${table}${params ? '?' + params : ''}`
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'apikey': SUPABASE_KEY,
        'Authorization': `Bearer ${SUPABASE_KEY}`,
        'Content-Type': 'application/json'
      },
      body: data ? JSON.stringify(data) : undefined
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    const text = await response.text()
    if (!text) {
      return null // –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è DELETE –æ–ø–µ—Ä–∞—Ü–∏–π
    }
    
    return JSON.parse(text)
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ ${table}:`, error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è createCase
async function createCase(data) {
  try {
    return await sendToSupabase('cases', 'POST', data)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞:', error)
    throw error
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function testMinimalCase() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
  
  try {
    const minimalCase = {
      title: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ',
      client: '–¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç',
      year: 2024,
      is_visible: true,
      sort_order: 9999
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ:', minimalCase);
    
    const result = await createCase(minimalCase);
    console.log('‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω:', result);
    
    return result;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–µ–π—Å–∞: ${error.message}`);
    return null;
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function testFullCase() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
  
  try {
    const fullCase = {
      title: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ù–æ–≤—ã–π –≥–æ–¥ Samsung',
      description: '–ü–æ–ª–Ω–æ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
      detailed_description: '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
      client: 'Samsung',
      year: 2025,
      project_duration: '3-6 –º–µ—Å—è—Ü–µ–≤',
      challenges: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã',
      solutions: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è',
      results: JSON.stringify(['–†–µ–∑—É–ª—å—Ç–∞—Ç 1', '–†–µ–∑—É–ª—å—Ç–∞—Ç 2']),
      technologies_used: ['React', 'Node.js', 'Supabase'],
      is_visible: true,
      sort_order: 9998,
      featured: false,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ:', fullCase);
    
    const result = await createCase(fullCase);
    console.log('‚úÖ –ü–æ–ª–Ω—ã–π –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω:', result);
    
    return result;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–µ–π—Å–∞: ${error.message}`);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testCaseFormIssues() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–£–Æ –ü–†–û–ë–õ–ï–ú–´ –° –§–û–†–ú–û–ô –ö–ï–ô–°–û–í...\n');
  
  const minimalResult = await testMinimalCase();
  const fullResult = await testFullCase();
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–µ–π—Å: ${minimalResult ? '–°–û–ó–î–ê–ù' : '–û–®–ò–ë–ö–ê'}`);
  console.log(`‚úÖ –ü–æ–ª–Ω—ã–π –∫–µ–π—Å: ${fullResult ? '–°–û–ó–î–ê–ù' : '–û–®–ò–ë–ö–ê'}`);
  
  if (minimalResult && fullResult) {
    console.log('\nüéâ API –†–ê–ë–û–¢–ê–ï–¢!');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤ —á–µ—Ä–µ–∑ API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ React - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É');
  } else {
    console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´ –° API');
    console.log('üí° –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ RLS');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testCaseFormIssues();


