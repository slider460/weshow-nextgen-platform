const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function checkCasesRLS() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã cases...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ RLS –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã cases
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å RLS –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã cases...');
    
    const { data: rlsStatus, error: rlsError } = await supabase
      .rpc('sql', {
        query: `
          SELECT schemaname, tablename, rowsecurity 
          FROM pg_tables 
          WHERE tablename = 'cases' AND schemaname = 'public';
        `
      });

    if (rlsError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å RLS —Å—Ç–∞—Ç—É—Å:', rlsError.message);
    } else {
      console.log('üìã RLS —Å—Ç–∞—Ç—É—Å:', rlsStatus);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏...');
    
    const { data: policies, error: policiesError } = await supabase
      .rpc('sql', {
        query: `
          SELECT policyname, permissive, roles, cmd, qual, with_check
          FROM pg_policies 
          WHERE tablename = 'cases' AND schemaname = 'public';
        `
      });

    if (policiesError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏:', policiesError.message);
    } else {
      console.log('üîí –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏:', policies.length);
      policies.forEach(policy => {
        console.log(`  - ${policy.policyname}: ${policy.cmd} –¥–ª—è ${policy.roles}`);
      });
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Service Role...');
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è
    const testData = {
      title: `RLS —Ç–µ—Å—Ç ${Date.now()}`,
      client: 'RLS —Ç–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç',
      year: 2024,
      description: '–¢–µ—Å—Ç RLS –ø–æ–ª–∏—Ç–∏–∫',
      is_visible: true,
      sort_order: 9999
    };

    console.log('üì§ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–µ–π—Å —Å Service Role...');
    const { data: createResult, error: createError } = await supabase
      .from('cases')
      .insert(testData)
      .select();

    if (createError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å Service Role:', createError);
    } else {
      console.log('‚úÖ –ö–µ–π—Å —Å–æ–∑–¥–∞–Ω —Å Service Role:', createResult?.[0]?.id);
      
      // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      console.log('üì§ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ–π—Å...');
      const { data: updateResult, error: updateError } = await supabase
        .from('cases')
        .update({ title: `${testData.title} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)` })
        .eq('id', createResult[0].id)
        .select();

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError);
      } else {
        console.log('‚úÖ –ö–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', updateResult?.[0]?.title);
      }

      // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
      console.log('üì§ –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å...');
      const { error: deleteError } = await supabase
        .from('cases')
        .delete()
        .eq('id', createResult[0].id);

      if (deleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', deleteError);
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å —É–¥–∞–ª–µ–Ω');
      }
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å anon –∫–ª—é—á–æ–º
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å anon –∫–ª—é—á–æ–º...');
    
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE';
    
    const anonSupabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
    console.log('üì§ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–µ–π—Å—ã —Å anon –∫–ª—é—á–æ–º...');
    const { data: readResult, error: readError } = await anonSupabase
      .from('cases')
      .select('*')
      .eq('is_visible', true)
      .limit(1);

    if (readError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å anon –∫–ª—é—á–æ–º:', readError);
    } else {
      console.log('‚úÖ –ß—Ç–µ–Ω–∏–µ —Å anon –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç:', readResult?.length || 0, '–∫–µ–π—Å–æ–≤');
    }

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å anon –∫–ª—é—á–æ–º (–¥–æ–ª–∂–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
    console.log('üì§ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–µ–π—Å —Å anon –∫–ª—é—á–æ–º (–¥–æ–ª–∂–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)...');
    const { data: anonCreateResult, error: anonCreateError } = await anonSupabase
      .from('cases')
      .insert(testData)
      .select();

    if (anonCreateError) {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å anon –∫–ª—é—á–æ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å):', anonCreateError.message);
    } else {
      console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å anon –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ):', anonCreateResult);
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkCasesRLS();


