#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–µ–π—Å–æ–≤ –∫–∞–∫ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async function testCasesAPI() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é API –∫–µ–π—Å–æ–≤ –∫–∞–∫ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å service role –∫–ª—é—á–æ–º:');
    const { data: serviceData, error: serviceError } = await supabase
      .from('cases')
      .select('*')
      .order('sort_order', { ascending: true });
      
    if (serviceError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å service role: ${serviceError.message}`);
    } else {
      console.log(`‚úÖ Service role: –Ω–∞–π–¥–µ–Ω–æ ${serviceData?.length || 0} –∫–µ–π—Å–æ–≤`);
      if (serviceData && serviceData.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ –∫–µ–π—Å—ã:');
        serviceData.slice(0, 3).forEach((caseItem, index) => {
          console.log(`   ${index + 1}. ${caseItem.title} (${caseItem.client})`);
        });
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º (–∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º:');
    const regularClient = createClient(supabaseUrl, 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.Vy7LdF6xJYVhVvQnKqBqJXzJYVhVvQnKqBqJXzJYVhVvQnKqBqJXz');
    
    const { data: regularData, error: regularError } = await regularClient
      .from('cases')
      .select('*')
      .order('sort_order', { ascending: true });
      
    if (regularError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º: ${regularError.message}`);
    } else {
      console.log(`‚úÖ –û–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: –Ω–∞–π–¥–µ–Ω–æ ${regularData?.length || 0} –∫–µ–π—Å–æ–≤`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
    const { data: authData, error: authError } = await regularClient.auth.signInWithPassword({
      email: 'admin@weshow.ru',
      password: 'password'
    });
    
    if (authError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`);
    } else {
      console.log(`‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${authData.user?.email}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–µ–π—Å–æ–≤ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const { data: authCasesData, error: authCasesError } = await regularClient
        .from('cases')
        .select('*')
        .order('sort_order', { ascending: true });
        
      if (authCasesError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authCasesError.message}`);
      } else {
        console.log(`‚úÖ –ü–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–∞–π–¥–µ–Ω–æ ${authCasesData?.length || 0} –∫–µ–π—Å–æ–≤`);
      }
    }
    
    return {
      serviceRole: !serviceError,
      regularClient: !regularError,
      authenticated: !authError,
      authCases: !authError && !authCasesError
    };
    
  } catch (error) {
    console.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    return {
      serviceRole: false,
      regularClient: false,
      authenticated: false,
      authCases: false
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS –ø–æ–ª–∏—Ç–∏–∫
async function checkRLSPolicies() {
  console.log('\nüîí –ü—Ä–æ–≤–µ—Ä—è—é RLS –ø–æ–ª–∏—Ç–∏–∫–∏...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ RLS
    const { data: rlsData, error: rlsError } = await supabase
      .from('pg_tables')
      .select('tablename, rowsecurity')
      .eq('tablename', 'cases')
      .eq('schemaname', 'public');
      
    if (rlsError) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å RLS: ${rlsError.message}`);
    } else {
      console.log(`üìä RLS —Å—Ç–∞—Ç—É—Å: ${rlsData?.[0]?.rowsecurity ? '–í–ö–õ–Æ–ß–ï–ù' : '–û–¢–ö–õ–Æ–ß–ï–ù'}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏
    const { data: policiesData, error: policiesError } = await supabase
      .from('pg_policies')
      .select('policyname, permissive, roles, cmd, qual')
      .eq('tablename', 'cases')
      .eq('schemaname', 'public');
      
    if (policiesError) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏: ${policiesError.message}`);
    } else {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–∏—Ç–∏–∫: ${policiesData?.length || 0}`);
      policiesData?.forEach((policy, index) => {
        console.log(`   ${index + 1}. ${policy.policyname} (${policy.cmd})`);
      });
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è RLS
async function fixCasesRLS() {
  console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª—è—é RLS –¥–ª—è –∫–µ–π—Å–æ–≤...');
  
  try {
    // –û—Ç–∫–ª—é—á–∞–µ–º RLS –¥–ª—è cases
    const { error: disableError } = await supabase.rpc('exec_sql', {
      query: 'ALTER TABLE cases DISABLE ROW LEVEL SECURITY;'
    });
    
    if (disableError) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å RLS —á–µ—Ä–µ–∑ RPC: ${disableError.message}`);
    } else {
      console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è cases');
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è cases
    const policies = [
      'Enable read access for all users',
      'Enable insert for authenticated users only',
      'Enable update for authenticated users only',
      'Enable delete for authenticated users only',
      'Allow public read access',
      'Allow anonymous read access',
      'Allow authenticated full access'
    ];
    
    for (const policy of policies) {
      const { error: dropError } = await supabase.rpc('exec_sql', {
        query: `DROP POLICY IF EXISTS "${policy}" ON cases;`
      });
      
      if (!dropError) {
        console.log(`‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ "${policy}" —É–¥–∞–ª–µ–Ω–∞`);
      }
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è RLS: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–µ–π—Å–∞
async function createTestCase() {
  console.log('\nüìù –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å...');
  
  try {
    const testCase = {
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å API',
      description: '–≠—Ç–æ—Ç –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API',
      client: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç API',
      year: 2024,
      is_visible: true,
      sort_order: 999,
      featured: false,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { data: newCase, error } = await supabase
      .from('cases')
      .insert(testCase)
      .select()
      .single();
      
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–µ–π—Å–∞: ${error.message}`);
      return false;
    } else {
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω: ${newCase.id}`);
      return true;
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function diagnoseCasesAPI() {
  console.log('üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ö–ï–ô–°–û–í...\n');
  
  const results = await testCasesAPI();
  
  await checkRLSPolicies();
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
  if (!results.authCases) {
    console.log('\nüîß –ü—ã—Ç–∞—é—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã...');
    await fixCasesRLS();
    
    // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç
    console.log('\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç...');
    const newResults = await testCasesAPI();
    
    if (!newResults.authCases) {
      console.log('\nüìù –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...');
      await createTestCase();
    }
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
  console.log(`‚úÖ Service role –¥–æ—Å—Ç—É–ø: ${results.serviceRole ? '–î–ê' : '–ù–ï–¢'}`);
  console.log(`‚úÖ –û–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø: ${results.regularClient ? '–î–ê' : '–ù–ï–¢'}`);
  console.log(`‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${results.authenticated ? '–î–ê' : '–ù–ï–¢'}`);
  console.log(`‚úÖ –ö–µ–π—Å—ã –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${results.authCases ? '–î–ê' : '–ù–ï–¢'}`);
  
  if (results.authCases) {
    console.log('\nüéâ API –ö–ï–ô–°–û–í –†–ê–ë–û–¢–ê–ï–¢!');
    console.log('‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–µ–π—Å—ã');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
  } else {
    console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´ –° API –ö–ï–ô–°–û–í');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ RLS');
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnoseCasesAPI();


