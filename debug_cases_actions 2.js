#!/usr/bin/env node

// –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ–π—Å–æ–≤
const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co'
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API (–∫–∞–∫ –≤ adminRest.ts)
async function sendToSupabase(table, method, data, params) {
  try {
    const url = `${SUPABASE_URL}/rest/v1/${table}${params ? '?' + params : ''}`
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'apikey': SUPABASE_KEY,
        'Authorization': `Bearer ${SUPABASE_KEY}`,
        'Content-Type': 'application/json'
      },
      body: data ? JSON.stringify(data) : undefined
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`)
    }

    return await response.json()
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ ${table}:`, error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è createCase –∫–∞–∫ –≤ adminRest.ts
async function createCase(data) {
  try {
    return await sendToSupabase('cases', 'POST', data)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è updateCase –∫–∞–∫ –≤ adminRest.ts
async function updateCase(id, data) {
  try {
    return await sendToSupabase('cases', 'PUT', data, `id=eq.${id}`)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ–π—Å–∞:', error)
    throw error
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–∞
async function testCreateCase() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–∞...');
  
  try {
    const testCaseData = {
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–µ–π—Å–∞',
      client: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
      year: 2024,
      is_visible: true,
      sort_order: 1000,
      featured: false,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', testCaseData);
    
    const result = await createCase(testCaseData);
    console.log('‚úÖ –ö–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', result);
    
    return result;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞: ${error.message}`);
    return null;
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞
async function testUpdateCase(caseId) {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞...');
  
  try {
    const updateData = {
      title: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å',
      description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
      updated_at: new Date().toISOString()
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateData);
    
    const result = await updateCase(caseId, updateData);
    console.log('‚úÖ –ö–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
    
    return result;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ–π—Å–∞: ${error.message}`);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testCasesActions() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–£–Æ –î–ï–ô–°–¢–í–ò–Ø –° –ö–ï–ô–°–ê–ú–ò...\n');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
  const newCase = await testCreateCase();
  
  if (newCase && newCase[0] && newCase[0].id) {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await testUpdateCase(newCase[0].id);
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ API —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    console.log('\nüí° –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ (React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö)');
  } else {
    console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê –° API');
    console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üí° –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testCasesActions();


