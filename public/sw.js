// Service Worker –¥–ª—è WESHOW - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
const CACHE_NAME = 'weshow-media-v1';
const STATIC_CACHE = 'weshow-static-v1';
const MEDIA_CACHE = 'weshow-media-v1';

// –§–∞–π–ª—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const STATIC_FILES = [
  '/',
  '/index.html',
  '/static/js/bundle.js',
  '/static/css/main.css',
  '/weshow-logo-2025.svg',
  '/placeholder.svg'
];

// –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_STRATEGIES = {
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  STATIC: 'cache-first',
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
  MEDIA: 'cache-first-with-size-limit',
  // API –∑–∞–ø—Ä–æ—Å—ã
  API: 'network-first'
};

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫—ç—à–∞
const CACHE_LIMITS = {
  MEDIA_MAX_SIZE: 100 * 1024 * 1024, // 100 MB
  MEDIA_MAX_AGE: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
  STATIC_MAX_AGE: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('üöÄ WESHOW Service Worker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  
  event.waitUntil(
    Promise.all([
      // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
      caches.open(STATIC_CACHE).then((cache) => {
        console.log('üìÅ –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã');
        return cache.addAll(STATIC_FILES);
      }),
      // –°–æ–∑–¥–∞–µ–º –∫—ç—à –¥–ª—è –º–µ–¥–∏–∞
      caches.open(MEDIA_CACHE).then((cache) => {
        console.log('üé¨ –°–æ–∑–¥–∞–Ω –∫—ç—à –¥–ª—è –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        return cache;
      })
    ])
  );
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Service Worker —Å—Ä–∞–∑—É
  self.skipWaiting();
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('‚ö° WESHOW Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  
  event.waitUntil(
    Promise.all([
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE && cacheName !== MEDIA_CACHE) {
              console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      }),
      // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –º–µ–¥–∏–∞ –∫—ç—à–µ
      cleanExpiredMediaCache(),
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–¥ –≤—Å–µ–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
      self.clients.claim()
    ])
  );
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  if (isStaticFile(request)) {
    event.respondWith(handleStaticFile(request));
  } else if (isMediaFile(request)) {
    event.respondWith(handleMediaFile(request));
  } else if (isAPIRequest(request)) {
    event.respondWith(handleAPIRequest(request));
  } else {
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º network-first
    event.respondWith(handleNetworkFirst(request));
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
function isStaticFile(request) {
  const url = new URL(request.url);
  return STATIC_FILES.some(file => url.pathname === file) ||
         url.pathname.startsWith('/static/') ||
         url.pathname.endsWith('.js') ||
         url.pathname.endsWith('.css') ||
         url.pathname.endsWith('.svg');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
function isMediaFile(request) {
  const url = new URL(request.url);
  return url.pathname.startsWith('/media/') ||
         /\.(jpg|jpeg|png|gif|webp|avif|mp4|webm|ogg)$/i.test(url.pathname);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
function isAPIRequest(request) {
  const url = new URL(request.url);
  return url.pathname.startsWith('/api/') ||
         url.pathname.includes('vercel') ||
         url.pathname.includes('cdn');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (cache-first)
async function handleStaticFile(request) {
  const cache = await caches.open(STATIC_CACHE);
  const cachedResponse = await cache.match(request);
  
  if (cachedResponse) {
    return cachedResponse;
  }
  
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
    return new Response('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', { status: 500 });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (cache-first —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞)
async function handleMediaFile(request) {
  const cache = await caches.open(MEDIA_CACHE);
  const cachedResponse = await cache.match(request);
  
  if (cachedResponse) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞
    const cacheTime = new Date(cachedResponse.headers.get('sw-cache-time'));
    if (Date.now() - cacheTime.getTime() < CACHE_LIMITS.MEDIA_MAX_AGE) {
      return cachedResponse;
    }
  }
  
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const contentLength = networkResponse.headers.get('content-length');
      if (contentLength && parseInt(contentLength) < CACHE_LIMITS.MEDIA_MAX_SIZE) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const responseClone = networkResponse.clone();
        const headers = new Headers(responseClone.headers);
        headers.set('sw-cache-time', new Date().toISOString());
        
        const responseToCache = new Response(responseClone.body, {
          status: responseClone.status,
          statusText: responseClone.statusText,
          headers: headers
        });
        
        cache.put(request, responseToCache);
      }
    }
    return networkResponse;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cachedResponse) {
      return cachedResponse;
    }
    return new Response('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞', { status: 500 });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ (network-first)
async function handleAPIRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ API –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
      const cache = await caches.open(STATIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    const cache = await caches.open(STATIC_CACHE);
    const cachedResponse = await cache.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    throw error;
  }
}

// Network-first —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
async function handleNetworkFirst(request) {
  try {
    const networkResponse = await fetch(request);
    return networkResponse;
  } catch (error) {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∫—ç—à–µ
    const cache = await caches.open(STATIC_CACHE);
    const cachedResponse = await cache.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    throw error;
  }
}

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
async function cleanExpiredMediaCache() {
  const cache = await caches.open(MEDIA_CACHE);
  const requests = await cache.keys();
  
  for (const request of requests) {
    const response = await cache.match(request);
    if (response) {
      const cacheTime = new Date(response.headers.get('sw-cache-time'));
      if (Date.now() - cacheTime.getTime() > CACHE_LIMITS.MEDIA_MAX_AGE) {
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ–¥–∏–∞ —Ñ–∞–π–ª:', request.url);
        await cache.delete(request);
      }
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
self.addEventListener('message', (event) => {
  const { type, data } = event.data;
  
  switch (type) {
    case 'SKIP_WAITING':
      self.skipWaiting();
      break;
      
    case 'CLEAR_CACHE':
      clearAllCaches();
      break;
      
    case 'GET_CACHE_INFO':
      getCacheInfo().then(info => {
        event.ports[0].postMessage(info);
      });
      break;
      
    case 'PRELOAD_MEDIA':
      preloadMedia(data.urls);
      break;
  }
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
async function clearAllCaches() {
  const cacheNames = await caches.keys();
  await Promise.all(
    cacheNames.map(name => caches.delete(name))
  );
  console.log('üßπ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
async function getCacheInfo() {
  const cacheNames = await caches.keys();
  const info = {};
  
  for (const name of cacheNames) {
    const cache = await caches.open(name);
    const requests = await cache.keys();
    info[name] = {
      count: requests.length,
      size: 0
    };
  }
  
  return info;
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
async function preloadMedia(urls) {
  const cache = await caches.open(MEDIA_CACHE);
  
  for (const url of urls) {
    try {
      const response = await fetch(url);
      if (response.ok) {
        cache.put(url, response);
        console.log('üì• –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω –º–µ–¥–∏–∞ —Ñ–∞–π–ª:', url);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', url, error);
    }
  }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
setInterval(cleanExpiredMediaCache, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å

console.log('üéØ WESHOW Service Worker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
