#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π REST API
async function executeDirectSQL(sqlQuery) {
  try {
    console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è—é: ${sqlQuery.substring(0, 60)}...`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π REST API –∑–∞–ø—Ä–æ—Å
    const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseServiceKey}`,
        'apikey': supabaseServiceKey
      },
      body: JSON.stringify({
        sql: sqlQuery
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      return false;
    }

    const result = await response.text();
    console.log('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã user_profiles
async function fixUserProfilesStructure() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_profiles...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const { data: currentStructure, error: structureError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(1);
      
    if (structureError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: ${structureError.message}`);
      return false;
    }
    
    console.log('üìä –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:', Object.keys(currentStructure[0] || {}));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ user_id
    const hasUserId = currentStructure[0] && 'user_id' in currentStructure[0];
    
    if (!hasUserId) {
      console.log('üîß –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É user_id...');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É —á–µ—Ä–µ–∑ ALTER TABLE
      const alterResponse = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${supabaseServiceKey}`,
          'apikey': supabaseServiceKey
        },
        body: JSON.stringify({
          sql: 'ALTER TABLE user_profiles ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;'
        })
      });
      
      if (alterResponse.ok) {
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ user_id –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      } else {
        console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É —á–µ—Ä–µ–∑ REST API');
        // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
        return await addUserIdColumnAlternative();
      }
    } else {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ user_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    return true;
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
async function addUserIdColumnAlternative() {
  console.log('üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS user_profiles_new (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
        full_name TEXT,
        company_name TEXT,
        phone TEXT,
        role TEXT DEFAULT 'user',
        avatar_url TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;
    
    const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseServiceKey}`,
        'apikey': supabaseServiceKey
      },
      body: JSON.stringify({
        sql: createTableSQL
      })
    });
    
    if (response.ok) {
      console.log('‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ user_profiles_new —Å–æ–∑–¥–∞–Ω–∞');
      
      // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
      const { data: oldData, error: oldError } = await supabase
        .from('user_profiles')
        .select('*');
        
      if (!oldError && oldData && oldData.length > 0) {
        console.log(`üìã –ö–æ–ø–∏—Ä—É—é ${oldData.length} –∑–∞–ø–∏—Å–µ–π...`);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const newData = oldData.map(record => ({
          id: record.id,
          user_id: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
          full_name: record.full_name,
          company_name: record.company_name,
          phone: record.phone,
          role: record.role || 'user',
          created_at: record.created_at,
          updated_at: record.updated_at
        }));
        
        const { error: insertError } = await supabase
          .from('user_profiles_new')
          .insert(newData);
          
        if (insertError) {
          console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${insertError.message}`);
        } else {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É');
        }
      }
      
      return true;
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É: ${response.status}`);
      return false;
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è RLS
async function disableRLSForUserProfiles() {
  console.log('üîì –û—Ç–∫–ª—é—á–∞—é RLS –¥–ª—è user_profiles...');
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å RLS —á–µ—Ä–µ–∑ REST API
    const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseServiceKey}`,
        'apikey': supabaseServiceKey
      },
      body: JSON.stringify({
        sql: 'ALTER TABLE user_profiles DISABLE ROW LEVEL SECURITY;'
      })
    });
    
    if (response.ok) {
      console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è user_profiles');
      return true;
    } else {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å RLS —á–µ—Ä–µ–∑ REST API: ${response.status}`);
      return false;
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function createAdminProfile() {
  console.log('üëë –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email');
      
    if (usersError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersError.message}`);
      return false;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users?.length || 0}`);
    users?.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email} (ID: ${user.id})`);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminUser = users?.find(user => user.email === 'admin@weshow.ru');
    
    if (!adminUser) {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å email admin@weshow.ru –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: ${adminUser.id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
    const { data: existingProfile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', adminUser.id)
      .single();
      
    if (profileError && profileError.message.includes('No rows')) {
      console.log('üìù –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
      
      const { data: newProfile, error: createError } = await supabase
        .from('user_profiles')
        .insert({
          user_id: adminUser.id,
          full_name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          role: 'admin',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single();
        
      if (createError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${createError.message}`);
        return false;
      } else {
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω: ${newProfile.id}`);
        return true;
      }
      
    } else if (existingProfile) {
      console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingProfile.id}`);
      return true;
    } else {
      console.log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${profileError?.message}`);
      return false;
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
async function finalTest() {
  console.log('\nüß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Ö–æ–¥–∞...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(1);
      
    if (profileError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é: ${profileError.message}`);
      return false;
    } else {
      console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é: OK (${profile?.length || 0} –∑–∞–ø–∏—Å–µ–π)`);
      if (profile && profile.length > 0) {
        console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${Object.keys(profile[0]).join(', ')}`);
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
    const authClient = createClient(supabaseUrl, supabaseServiceKey);
    const { data: authData, error: authError } = await authClient.auth.signInWithPassword({
      email: 'admin@weshow.ru',
      password: 'password'
    });
    
    if (authError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${authError.message}`);
      return false;
    } else {
      console.log(`‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω: ${authData.user?.email}`);
      console.log(`   User ID: ${authData.user?.id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      const { data: userProfile, error: userProfileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', authData.user?.id)
        .single();
        
      if (userProfileError) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userProfileError.message}`);
        return false;
      } else {
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω: ${userProfile.full_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`);
        return true;
      }
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function fixAdminPanelDirectly() {
  console.log('üöÄ –ü–†–Ø–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò –ß–ï–†–ï–ó SUPABASE...\n');
  
  const results = {
    structure: false,
    rls: false,
    profile: false,
    test: false
  };
  
  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
  results.structure = await fixUserProfilesStructure();
  
  // 2. –û—Ç–∫–ª—é—á–∞–µ–º RLS
  results.rls = await disableRLSForUserProfiles();
  
  // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  results.profile = await createAdminProfile();
  
  // 4. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
  results.test = await finalTest();
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: ${results.structure ? '–ò–°–ü–†–ê–í–õ–ï–ù–ê' : '–û–®–ò–ë–ö–ê'}`);
  console.log(`‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω: ${results.rls ? '–î–ê' : '–û–®–ò–ë–ö–ê'}`);
  console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞: ${results.profile ? '–°–û–ó–î–ê–ù' : '–û–®–ò–ë–ö–ê'}`);
  console.log(`‚úÖ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞: ${results.test ? '–£–°–ü–ï–®–ï–ù' : '–û–®–ò–ë–ö–ê'}`);
  
  if (results.test) {
    console.log('\nüéâ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
    console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω');
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω');
    console.log('‚úÖ –í—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π!');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–ë–õ–ï–ú–´ –û–°–¢–ê–õ–ò–°–¨');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ Supabase Dashboard');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixAdminPanelDirectly();


