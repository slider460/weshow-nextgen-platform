#!/usr/bin/env node

// –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å service role –∫–ª—é—á–æ–º
const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co'
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API —Å service role
async function sendToSupabaseWithServiceRole(table, method, data, params) {
  try {
    const url = `${SUPABASE_URL}/rest/v1/${table}${params ? '?' + params : ''}`
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
        'Content-Type': 'application/json'
      },
      body: data ? JSON.stringify(data) : undefined
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    const text = await response.text()
    if (!text) {
      return null // –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è DELETE –æ–ø–µ—Ä–∞—Ü–∏–π
    }
    
    return JSON.parse(text)
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ ${table}:`, error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è createCase —Å service role
async function createCaseWithServiceRole(data) {
  try {
    return await sendToSupabaseWithServiceRole('cases', 'POST', data)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞:', error)
    throw error
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–∞ —Å service role
async function testServiceRoleCase() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–∞ —Å service role...');
  
  try {
    const testCase = {
      title: 'Service Role —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ service role –∫–µ–π—Å–∞',
      client: 'Service Role –∫–ª–∏–µ–Ω—Ç',
      year: 2024,
      is_visible: true,
      sort_order: 7777
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ:', testCase);
    
    const result = await createCaseWithServiceRole(testCase);
    console.log('‚úÖ Service role –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω:', result);
    
    return result;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è service role –∫–µ–π—Å–∞: ${error.message}`);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function testServiceRoleAPI() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–£–Æ SERVICE ROLE API...\n');
  
  const result = await testServiceRoleCase();
  
  if (result) {
    console.log('\nüéâ SERVICE ROLE API –†–ê–ë–û–¢–ê–ï–¢!');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤ —Å service role —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
  } else {
    console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´ –° SERVICE ROLE API');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testServiceRoleAPI();


