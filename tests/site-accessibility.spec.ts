import { test, expect } from '@playwright/test';

test.describe('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞', () => {
  test('–°–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É URL', async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('/');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = await page.title();
    expect(title).toContain('WESHOW');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    const bodyContent = await page.locator('body').textContent();
    expect(bodyContent).toBeTruthy();
    expect(bodyContent!.length).toBeGreaterThan(100);
    
    console.log('‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}`);
    console.log(`üìù –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${bodyContent!.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–∞–π—Ç–∞', async ({ page }) => {
    const sections = [
      { path: '/', name: '–ì–ª–∞–≤–Ω–∞—è' },
      { path: '/about', name: '–û –∫–æ–º–ø–∞–Ω–∏–∏' },
      { path: '/services', name: '–£—Å–ª—É–≥–∏' },
      { path: '/portfolio', name: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ' },
      { path: '/contact', name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' }
    ];

    for (const section of sections) {
      await page.goto(section.path);
      await page.waitForLoadState('networkidle');
      
      const title = await page.title();
      expect(title).toBeTruthy();
      
      console.log(`‚úÖ ${section.name} (${section.path}) - ${title}`);
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫', async ({ page }) => {
    const consoleErrors: string[] = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      }
    });

    await page.goto('/');
    await page.waitForLoadState('networkidle');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    const criticalErrors = consoleErrors.filter(error => 
      !error.includes('favicon') && 
      !error.includes('manifest') &&
      !error.includes('Service Worker')
    );
    
    console.log(`üìä –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏: ${criticalErrors.length}`);
    if (criticalErrors.length > 0) {
      console.log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:', criticalErrors);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    expect(criticalErrors.length).toBe(0);
  });
});













