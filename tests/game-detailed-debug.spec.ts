import { test, expect } from '@playwright/test';

test('–¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏–≥—Ä—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞', async ({ page }) => {
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã
  await page.goto('/game');
  
  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  await page.waitForTimeout(3000);
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  await expect(page.getByRole('heading', { name: /üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã–µ –≥–æ–Ω–∫–∏/ })).toBeVisible();
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Canvas
  const canvas = page.locator('canvas');
  await expect(canvas).toBeVisible();
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  const startButton = page.getByRole('button', { name: /–ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É/ });
  await expect(startButton).toBeVisible();
  
  // 4. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  await page.screenshot({ path: 'test-results/detailed-debug-initial.png' });
  
  console.log('–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
  
  // 5. –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  await startButton.click();
  
  console.log('–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –∂–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã...');
  
  // 6. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
  await page.waitForTimeout(3000);
  
  // 7. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  await page.screenshot({ path: 'test-results/detailed-debug-after-start.png' });
  
  // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Canvas –≤—Å–µ –µ—â–µ –≤–∏–¥–∏–º
  await expect(canvas).toBeVisible();
  
  // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏—Å—á–µ–∑–ª–∞
  await expect(startButton).not.toBeVisible();
  
  // 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å
  await expect(page.getByText(/–ì–æ–Ω–∫–∞ –∏–¥–µ—Ç!/)).toBeVisible();
  await expect(page.getByText(/–û—á–∫–∏:/)).toBeVisible();
  await expect(page.getByText(/–í—Ä–µ–º—è:/)).toBeVisible();
  await expect(page.getByText(/–ö–æ–º–±–æ:/)).toBeVisible();
  
  // 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º Canvas –¥–∞–Ω–Ω—ã–µ
  const canvasElement = await canvas.elementHandle();
  if (canvasElement) {
    const canvasData = await page.evaluate((canvas) => {
      const canvasElement = canvas as HTMLCanvasElement;
      const ctx = canvasElement.getContext('2d');
      if (ctx) {
        const imageData = ctx.getImageData(0, 0, canvasElement.width, canvasElement.height);
        return {
          width: canvasElement.width,
          height: canvasElement.height,
          hasData: imageData.data.some(pixel => pixel !== 0),
          dataLength: imageData.data.length,
          firstPixels: imageData.data.slice(0, 20)
        };
      }
      return null;
    }, canvasElement);
    
    console.log('Canvas –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', canvasData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Canvas –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–µ
    expect(canvasData?.hasData).toBe(true);
  }
  
  // 12. –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
  await page.waitForTimeout(3000);
  
  // 13. –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
  await page.screenshot({ path: 'test-results/detailed-debug-final.png' });
  
  console.log('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
});
