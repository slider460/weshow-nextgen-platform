import { test, expect } from '@playwright/test';

test.describe('–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ process', () => {
  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–∫–∏ process –≤ –∫–æ–Ω—Å–æ–ª–∏', async ({ page }) => {
    const consoleErrors: string[] = [];
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏:', msg.text());
      }
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await page.screenshot({ path: 'test-results/process-error-fix.png', fullPage: true });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å process
    const processErrors = consoleErrors.filter(error => 
      error.includes('process') || 
      error.includes('Can\'t find variable') ||
      error.includes('process is not defined')
    );
    
    if (processErrors.length > 0) {
      console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ process:', processErrors);
      throw new Error('–û—à–∏–±–∫–∞ process –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
    }
    
    console.log('‚úÖ –û—à–∏–±–∫–∞ process –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
    console.log('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏:', consoleErrors.length);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (consoleErrors.length > 0) {
      console.log('–í—Å–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏:', consoleErrors.slice(0, 10));
    }
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ process
    expect(processErrors.length).toBe(0);
  });
  
  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', async ({ page }) => {
    const pages = [
      { url: '/', name: '–ì–ª–∞–≤–Ω–∞—è' },
      { url: '/about', name: '–û –Ω–∞—Å' },
      { url: '/services', name: '–£—Å–ª—É–≥–∏' },
      { url: '/portfolio', name: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ' },
      { url: '/contact', name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' }
    ];
    
    for (const pageInfo of pages) {
      const consoleErrors: string[] = [];
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      page.on('console', msg => {
        if (msg.type() === 'error') {
          consoleErrors.push(msg.text());
        }
      });
      
      await page.goto(pageInfo.url);
      await page.waitForLoadState('networkidle');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      const criticalErrors = consoleErrors.filter(error => 
        error.includes('process') || 
        error.includes('Can\'t find variable') ||
        error.includes('process is not defined')
      );
      
      if (criticalErrors.length > 0) {
        console.log(`‚ùå –û—à–∏–±–∫–∏ process –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageInfo.name}:`, criticalErrors);
        throw new Error(`–û—à–∏–±–∫–∞ process –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageInfo.name}`);
      }
      
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageInfo.name} —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ process`);
    }
    
    console.log('üéâ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ process!');
  });
});






