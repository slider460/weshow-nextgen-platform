import { test, expect } from '@playwright/test';

test.describe('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WESHOW', () => {
  test('–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∞–π—Ç–∞', async ({ page }) => {
    const consoleErrors: string[] = [];
    const consoleWarnings: string[] = [];
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      } else if (msg.type() === 'warning') {
        consoleWarnings.push(msg.text());
      }
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.screenshot({ path: 'test-results/final-homepage.png', fullPage: true });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await expect(page).toHaveTitle(/WESHOW/);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await expect(page.locator('header')).toBeVisible();
    await expect(page.locator('nav').first()).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const navLinks = page.locator('nav a[href]');
    const linkCount = await navLinks.count();
    expect(linkCount).toBeGreaterThan(3);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${linkCount} –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    const pages = [
      { url: '/about', name: '–û –Ω–∞—Å' },
      { url: '/services', name: '–£—Å–ª—É–≥–∏' },
      { url: '/portfolio', name: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ' },
      { url: '/team', name: '–ö–æ–º–∞–Ω–¥–∞' },
      { url: '/contact', name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' }
    ];
    
    for (const pageInfo of pages) {
      await page.goto(pageInfo.url);
      await page.waitForLoadState('networkidle');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
      const pageContent = await page.locator('body').textContent();
      expect(pageContent?.length).toBeGreaterThan(100);
      
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageInfo.name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const buttons = page.locator('button');
    const buttonCount = await buttons.count();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${buttonCount} –∫–Ω–æ–ø–æ–∫`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const forms = page.locator('form');
    const formCount = await forms.count();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${formCount} —Ñ–æ—Ä–º`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const images = page.locator('img');
    const imageCount = await images.count();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${imageCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    
    // –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'test-results/final-app-overview.png', fullPage: true });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\n=== –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
    console.log('–û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏:', consoleErrors.length);
    console.log('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏:', consoleWarnings.length);
    console.log('–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:', linkCount);
    console.log('–ö–Ω–æ–ø–æ–∫:', buttonCount);
    console.log('–§–æ—Ä–º:', formCount);
    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', imageCount);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Leaflet)
    const criticalErrors = consoleErrors.filter(error => 
      !error.includes('leaflet') && 
      !error.includes('integrity') &&
      !error.includes('digest')
    );
    
    if (criticalErrors.length > 0) {
      console.log('\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:', criticalErrors.slice(0, 5));
    }
    
    // –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    expect(criticalErrors.length).toBeLessThan(5);
    
    console.log('\nüéâ –ü–æ–ª–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WESHOW —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  });
  
  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    const startTime = Date.now();
    
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    
    const loadTime = Date.now() - startTime;
    console.log(`‚ö° –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${loadTime}ms`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
    expect(loadTime).toBeLessThan(10000); // –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageContent = await page.locator('body').textContent();
    expect(pageContent?.length).toBeGreaterThan(1000); // —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  });
});
