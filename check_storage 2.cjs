const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function checkStorage() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase Storage...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ buckets
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ buckets...');
    
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();

    if (bucketsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è buckets:', bucketsError);
      return;
    }

    console.log('üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ buckets:');
    buckets.forEach(bucket => {
      console.log(`  - ${bucket.name} (${bucket.public ? '–ø—É–±–ª–∏—á–Ω—ã–π' : '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π'})`);
    });

    const publicBucket = buckets.find(b => b.name === 'public');
    if (!publicBucket) {
      console.log('\n‚ùå Bucket "public" –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      console.log('üìù –°–æ–∑–¥–∞–µ–º bucket "public"...');
      
      const { data: newBucket, error: createError } = await supabase.storage.createBucket('public', {
        public: true,
        allowedMimeTypes: ['image/*', 'video/*'],
        fileSizeLimit: 50 * 1024 * 1024 // 50MB
      });

      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket:', createError);
      } else {
        console.log('‚úÖ Bucket "public" —Å–æ–∑–¥–∞–Ω');
      }
    } else {
      console.log('‚úÖ Bucket "public" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket "public"
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket "public"...');
    
    const { data: files, error: filesError } = await supabase.storage
      .from('public')
      .list('cases/images', {
        limit: 10,
        sortBy: { column: 'created_at', order: 'desc' }
      });

    if (filesError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', filesError.message);
      
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
      console.log('üìù –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É cases/images...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const testContent = new Blob(['test'], { type: 'text/plain' });
      const { error: testUploadError } = await supabase.storage
        .from('public')
        .upload('cases/images/.gitkeep', testContent);

      if (testUploadError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫:', testUploadError.message);
      } else {
        console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞');
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        await supabase.storage
          .from('public')
          .remove(['cases/images/.gitkeep']);
      }
    } else {
      console.log('üìÅ –§–∞–π–ª–æ–≤ –≤ cases/images:', files.length);
      
      if (files.length > 0) {
        console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:');
        files.slice(0, 5).forEach(file => {
          console.log(`  - ${file.name} (${file.metadata?.size || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä'})`);
        });
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ–π—Å—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ–π—Å—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...');
    
    const { data: cases, error: casesError } = await supabase
      .from('cases')
      .select('id, title, image_url')
      .not('image_url', 'is', null)
      .limit(5);

    if (casesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤:', casesError);
    } else {
      console.log('üìä –ö–µ–π—Å–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:', cases.length);
      
      if (cases.length > 0) {
        console.log('üìã –ö–µ–π—Å—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:');
        cases.forEach(caseItem => {
          console.log(`  - ${caseItem.title}: ${caseItem.image_url}`);
        });
      }
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...');
    
    const testImageContent = new Blob(['fake-image-content'], { type: 'image/jpeg' });
    const testFileName = `test-${Date.now()}.jpg`;
    const testPath = `cases/images/${testFileName}`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('public')
      .upload(testPath, testImageContent);

    if (uploadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', uploadError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadData.path);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: urlData } = supabase.storage
        .from('public')
        .getPublicUrl(testPath);
      
      console.log('üîó –ü—É–±–ª–∏—á–Ω—ã–π URL:', urlData.publicUrl);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      await supabase.storage
        .from('public')
        .remove([testPath]);
      
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ Storage –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkStorage();


