#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ CSV —Ñ–∞–π–ª–∞
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π CSV —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è Excel
 */

import fs from 'fs';
import path from 'path';

const exportDir = './equipment-catalog-export';

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É CSV —Ñ–∞–π–ª–∞...');

function fixCSVEncoding() {
  try {
    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π CSV —Ñ–∞–π–ª
    const csvPath = path.join(exportDir, 'equipment_catalog.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf8');
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º CSV
    const lines = csvContent.split('\\n');
    const headers = lines[0].split(',').map(h => h.replace(/"/g, ''));
    
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    let newCsvContent = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
    newCsvContent += '\\uFEFF';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    newCsvContent += headers.map(h => `"${h}"`).join(',') + '\\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for (let i = 1; i < lines.length; i++) {
      if (lines[i].trim()) {
        const values = lines[i].split(',').map(v => v.replace(/"/g, ''));
        newCsvContent += values.map(v => `"${v}"`).join(',') + '\\n';
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    const newCsvPath = path.join(exportDir, 'equipment_catalog_fixed.csv');
    fs.writeFileSync(newCsvPath, newCsvContent, 'utf8');
    
    console.log('‚úÖ –ù–æ–≤—ã–π CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: equipment_catalog_fixed.csv');
    console.log('üí° –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ Excel - –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
  }
}

fixCSVEncoding();



