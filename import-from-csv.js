#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ CSV —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ Supabase
 * –ß–∏—Ç–∞–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π equipment_catalog.csv –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMzkzMjMsImV4cCI6MjA3NDcxNTMyM30.L9M4qQ_gkoyLj7oOwKZgyOVHoGv4JMJw-8m91IJAZjE';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

const exportDir = './equipment-catalog-export';

console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ CSV —Ñ–∞–π–ª–∞...');

function parseCSV(csvContent) {
  const lines = csvContent.split('\\n');
  const headers = lines[0].split(',').map(h => h.replace(/"/g, ''));
  const data = [];

  for (let i = 1; i < lines.length; i++) {
    if (lines[i].trim()) {
      const values = lines[i].split(',').map(v => v.replace(/"/g, ''));
      const row = {};
      headers.forEach((header, index) => {
        row[header] = values[index] || '';
      });
      data.push(row);
    }
  }

  return data;
}

async function importFromCSV() {
  try {
    const csvPath = path.join(exportDir, 'equipment_catalog.csv');
    
    if (!fs.existsSync(csvPath)) {
      console.error('‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ equipment_catalog.csv');
      process.exit(1);
    }

    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvContent = fs.readFileSync(csvPath, 'utf8');
    const equipmentData = parseCSV(csvContent);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${equipmentData.length} –ø–æ–∑–∏—Ü–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    const { data: categories } = await supabase
      .from('equipment_categories')
      .select('id, name');

    const categoryMap = {};
    categories.forEach(cat => {
      categoryMap[cat.name] = cat.id;
    });

    let successCount = 0;
    let errorCount = 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    for (const item of equipmentData) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const categoryId = categoryMap[item['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']] || null;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
        const isActive = item['–ê–∫—Ç–∏–≤–Ω–æ'] === '–î–∞';
        const featured = item['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ'] === '–î–∞';

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const pricePerDay = item['–¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å'] ? parseFloat(item['–¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å']) : null;
        const stockQuantity = item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ'] ? parseInt(item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ']) : 0;

        const { error } = await supabase
          .from('equipment_catalog')
          .update({
            name: item['–ù–∞–∑–≤–∞–Ω–∏–µ'],
            description: item['–û–ø–∏—Å–∞–Ω–∏–µ'],
            category_id: categoryId,
            price_per_day: pricePerDay,
            stock_quantity: stockQuantity,
            is_active: isActive,
            featured: featured,
            updated_at: new Date().toISOString()
          })
          .eq('id', item['ID']);

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${item['–ù–∞–∑–≤–∞–Ω–∏–µ']}:`, error.message);
          errorCount++;
        } else {
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${item['–ù–∞–∑–≤–∞–Ω–∏–µ']}`);
          successCount++;
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${item['–ù–∞–∑–≤–∞–Ω–∏–µ']}:`, error.message);
        errorCount++;
      }
    }

    console.log('\\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount} –ø–æ–∑–∏—Ü–∏–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} –ø–æ–∑–∏—Ü–∏–π`);

    if (errorCount > 0) {
      console.log('\\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª–µ.');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importFromCSV();


