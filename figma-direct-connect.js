import https from 'https';
import fs from 'fs';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Figma
const FIGMA_ACCESS_TOKEN = process.env.FIGMA_ACCESS_TOKEN || 'your_token_here';
const FIGMA_DOCUMENT_ID = 'if9cW5Ga1xyeUTGYc2ea9K';
const FIGMA_NODE_ID = '998-2'; // –ù–æ–≤—ã–π node ID –∏–∑ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Figma API
function makeFigmaRequest(endpoint) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.figma.com',
      port: 443,
      path: endpoint,
      method: 'GET',
      headers: {
        'X-Figma-Token': FIGMA_ACCESS_TOKEN,
        'Content-Type': 'application/json'
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve(jsonData);
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`));
        }
      });
    });

    req.on('error', (error) => {
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`));
    });

    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
    });

    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function connectToFigma() {
  console.log('üé® –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Figma...');
  console.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç ID: ${FIGMA_DOCUMENT_ID}`);
  console.log(`üéØ Node ID: ${FIGMA_NODE_ID}`);
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    console.log('\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ...');
    const documentInfo = await makeFigmaRequest(`/v1/files/${FIGMA_DOCUMENT_ID}`);
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω:', documentInfo.name);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —É–∑–ª–µ
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É–∑–ª–µ...');
    const nodeInfo = await makeFigmaRequest(`/v1/files/${FIGMA_DOCUMENT_ID}/nodes?ids=${FIGMA_NODE_ID}`);
    console.log('‚úÖ –£–∑–µ–ª –ø–æ–ª—É—á–µ–Ω');
    
    // 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π...');
    const styles = await makeFigmaRequest(`/v1/files/${FIGMA_DOCUMENT_ID}/styles`);
    console.log('‚úÖ –°—Ç–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã');
    
    // 4. –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    const images = await makeFigmaRequest(`/v1/files/${FIGMA_DOCUMENT_ID}/images?ids=${FIGMA_NODE_ID}`);
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const figmaData = {
      document: documentInfo,
      node: nodeInfo,
      styles: styles,
      images: images,
      timestamp: new Date().toISOString()
    };
    
    fs.writeFileSync('figma-data.json', JSON.stringify(figmaData, null, 2));
    console.log('\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ figma-data.json');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');
    if (nodeInfo.nodes && nodeInfo.nodes[FIGMA_NODE_ID]) {
      const node = nodeInfo.nodes[FIGMA_NODE_ID].document;
      console.log(`- –¢–∏–ø —É–∑–ª–∞: ${node.type}`);
      console.log(`- –ò–º—è: ${node.name}`);
      console.log(`- –î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${node.children ? node.children.length : 0}`);
      
      if (node.children) {
        console.log('\nüîç –î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
        node.children.forEach((child, index) => {
          console.log(`  ${index + 1}. ${child.name} (${child.type})`);
        });
      }
    }
    
    console.log('\nüéâ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Figma!');
    return figmaData;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Figma:', error.message);
    
    if (error.message.includes('401')) {
      console.log('\nüîë –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞:');
      console.log('1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ Figma: Settings > Developer > Personal Access Tokens');
      console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export FIGMA_ACCESS_TOKEN=your_token');
      console.log('3. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local —Å FIGMA_ACCESS_TOKEN=your_token');
    }
    
    return null;
  }
}

// –ó–∞–ø—É—Å–∫
if (FIGMA_ACCESS_TOKEN === 'your_token_here') {
  console.log('‚ö†Ô∏è  –¢–æ–∫–µ–Ω Figma –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Figma');
  console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings > Developer > Personal Access Tokens');
  console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω');
  console.log('4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('   export FIGMA_ACCESS_TOKEN=your_token_here');
  console.log('5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞: node figma-direct-connect.js');
} else {
  connectToFigma();
}



