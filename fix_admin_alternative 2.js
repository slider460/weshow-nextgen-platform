#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://zbykhdjqrtqftfitbvbt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpieWtoZGpxcnRxZnRmaXRidmJ0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEzOTMyMywiZXhwIjoyMDc0NzE1MzIzfQ.KOCzZQGNqpGmuXxhuCjAtUPcD8qHr9Alti_uVejrRFs';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ auth.users
async function getAllAuthUsers() {
  console.log('üë• –ü–æ–ª—É—á–∞—é –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ auth.users...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const authClient = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ auth API
    const { data: { users }, error } = await authClient.auth.admin.listUsers();
    
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
      return [];
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth.users: ${users?.length || 0}`);
    users?.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email} (ID: ${user.id})`);
    });
    
    return users || [];
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
async function createAdminProfileInExistingStructure() {
  console.log('üëë –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ auth
    const authUsers = await getAllAuthUsers();
    
    // –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminUser = authUsers.find(user => user.email === 'admin@weshow.ru');
    
    if (!adminUser) {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å email admin@weshow.ru –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ auth.users');
      return false;
    }
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω –≤ auth.users: ${adminUser.id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ email –≤ full_name –∏–ª–∏ company_name)
    const { data: existingProfiles, error: profilesError } = await supabase
      .from('user_profiles')
      .select('*');
      
    if (profilesError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profilesError.message}`);
      return false;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ user_profiles: ${existingProfiles?.length || 0}`);
    
    // –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminProfile = existingProfiles?.find(profile => 
      profile.full_name?.includes('admin') || 
      profile.full_name?.includes('Admin') ||
      profile.company_name?.includes('admin') ||
      profile.role === 'admin'
    );
    
    if (adminProfile) {
      console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${adminProfile.id}`);
      console.log(`   –ò–º—è: ${adminProfile.full_name}`);
      console.log(`   –†–æ–ª—å: ${adminProfile.role}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ admin –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (adminProfile.role !== 'admin') {
        const { error: updateError } = await supabase
          .from('user_profiles')
          .update({ 
            role: 'admin',
            updated_at: new Date().toISOString()
          })
          .eq('id', adminProfile.id);
          
        if (updateError) {
          console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å: ${updateError.message}`);
        } else {
          console.log('‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ admin');
        }
      }
      
      return true;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log('üìù –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    
    const { data: newProfile, error: createError } = await supabase
      .from('user_profiles')
      .insert({
        full_name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        company_name: 'WeShow',
        role: 'admin',
        phone: '+7 (000) 000-00-00',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();
      
    if (createError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${createError.message}`);
      return false;
    } else {
      console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω: ${newProfile.id}`);
      console.log(`   –ò–º—è: ${newProfile.full_name}`);
      console.log(`   –†–æ–ª—å: ${newProfile.role}`);
      return true;
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
async function updateExistingRecords() {
  console.log('üîß –û–±–Ω–æ–≤–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
    const { data: profiles, error: profilesError } = await supabase
      .from('user_profiles')
      .select('*');
      
    if (profilesError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profilesError.message}`);
      return false;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${profiles?.length || 0}`);
    
    if (!profiles || profiles.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return true;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ auth
    const authUsers = await getAllAuthUsers();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    for (const profile of profiles) {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è—é –ø—Ä–æ—Ñ–∏–ª—å: ${profile.full_name || profile.id}`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ –¥—Ä—É–≥–∏–º –¥–∞–Ω–Ω—ã–º
      let matchingUser = null;
      
      // –ò—â–µ–º –ø–æ full_name
      if (profile.full_name) {
        matchingUser = authUsers.find(user => 
          user.email?.includes(profile.full_name.toLowerCase()) ||
          profile.full_name.toLowerCase().includes(user.email?.split('@')[0])
        );
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!matchingUser && authUsers.length > 0) {
        matchingUser = authUsers[0];
        console.log(`   –ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${matchingUser.email}`);
      }
      
      if (matchingUser) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const { error: updateError } = await supabase
          .from('user_profiles')
          .update({
            full_name: profile.full_name || matchingUser.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            role: profile.role || 'user',
            updated_at: new Date().toISOString()
          })
          .eq('id', profile.id);
          
        if (updateError) {
          console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: ${updateError.message}`);
        } else {
          console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${matchingUser.email}`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`);
      }
    }
    
    return true;
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–∞ –±–µ–∑ user_id
async function testLoginWithoutUserId() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –≤—Ö–æ–¥ –±–µ–∑ user_id...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
    const authClient = createClient(supabaseUrl, supabaseServiceKey);
    const { data: authData, error: authError } = await authClient.auth.signInWithPassword({
      email: 'admin@weshow.ru',
      password: 'password'
    });
    
    if (authError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${authError.message}`);
      return false;
    } else {
      console.log(`‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω: ${authData.user?.email}`);
      console.log(`   User ID: ${authData.user?.id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ user_id)
      const { data: profiles, error: profilesError } = await supabase
        .from('user_profiles')
        .select('*');
        
      if (profilesError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º: ${profilesError.message}`);
        return false;
      } else {
        console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º: OK (${profiles?.length || 0} –∑–∞–ø–∏—Å–µ–π)`);
        
        // –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminProfile = profiles?.find(profile => profile.role === 'admin');
        if (adminProfile) {
          console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω: ${adminProfile.full_name}`);
          return true;
        } else {
          console.log(`‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return false;
        }
      }
    }
    
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function fixAdminPanelAlternative() {
  console.log('üöÄ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò...\n');
  
  const results = {
    profile: false,
    records: false,
    test: false
  };
  
  // 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  results.profile = await createAdminProfileInExistingStructure();
  
  // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
  results.records = await updateExistingRecords();
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
  results.test = await testLoginWithoutUserId();
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞: ${results.profile ? '–°–û–ó–î–ê–ù' : '–û–®–ò–ë–ö–ê'}`);
  console.log(`‚úÖ –ó–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${results.records ? '–î–ê' : '–û–®–ò–ë–ö–ê'}`);
  console.log(`‚úÖ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞: ${results.test ? '–£–°–ü–ï–®–ï–ù' : '–û–®–ò–ë–ö–ê'}`);
  
  if (results.test) {
    console.log('\nüéâ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω');
    console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    console.log('‚úÖ –í—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π!');
    console.log('üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –±–µ–∑ user_id');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–ë–õ–ï–ú–´ –û–°–¢–ê–õ–ò–°–¨');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixAdminPanelAlternative();


