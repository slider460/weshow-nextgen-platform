class DashboardManager {
    constructor() {
        this.socket = null;
        this.currentSection = 'overview';
        this.data = {
            performance: [],
            errors: [],
            tests: [],
            system: {},
            logs: []
        };
        this.init();
    }

    init() {
        this.connectToServer();
        this.setupNavigation();
        this.loadSection('overview');
        setInterval(() => this.fetchData(), 30000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
    }

    connectToServer() {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –æ—Ç–ª–∞–¥–∫–∏...');
        
        this.socket = io('http://localhost:3001');

        this.socket.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É –æ—Ç–ª–∞–¥–∫–∏');
            this.updateStatus(true);
            this.subscribeToUpdates();
        });

        this.socket.on('disconnect', () => {
            console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ª–∞–¥–∫–∏');
            this.updateStatus(false);
        });

        this.socket.on('connect_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.updateStatus(false);
        });

        // Real-time updates
        this.socket.on('performance-update', (data) => {
            this.data.performance.unshift(data);
            if (this.data.performance.length > 100) {
                this.data.performance = this.data.performance.slice(0, 100);
            }
            if (this.currentSection === 'performance') {
                this.renderPerformance();
            }
        });

        this.socket.on('error-occurred', (data) => {
            this.data.errors.unshift(data);
            if (this.data.errors.length > 50) {
                this.data.errors = this.data.errors.slice(0, 50);
            }
            if (this.currentSection === 'errors') {
                this.renderErrors();
            }
            this.showAlert('error', `–ù–æ–≤–∞—è –æ—à–∏–±–∫–∞: ${data.message.substring(0, 50)}...`);
        });

        this.socket.on('test-result', (data) => {
            this.data.tests.unshift(data);
            if (this.currentSection === 'tests') {
                this.renderTests();
            }
        });

        this.socket.on('system-alert', (data) => {
            this.showAlert(data.type, data.message);
        });
    }

    subscribeToUpdates() {
        this.socket.emit('subscribe-to-metrics');
        this.socket.emit('subscribe-to-errors');
        this.socket.emit('subscribe-to-tests');
    }

    updateStatus(connected) {
        const dot = document.getElementById('statusDot');
        const text = document.getElementById('statusText');
        
        if (connected) {
            dot.classList.remove('offline');
            text.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
        } else {
            dot.classList.add('offline');
            text.textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
        }
    }

    setupNavigation() {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const section = link.dataset.section;
                this.loadSection(section);
                
                document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                link.classList.add('active');
            });
        });
    }

    loadSection(section) {
        this.currentSection = section;
        
        switch (section) {
            case 'overview': this.renderOverview(); break;
            case 'performance': this.renderPerformance(); break;
            case 'errors': this.renderErrors(); break;
            case 'tests': this.renderTests(); break;
            case 'system': this.renderSystem(); break;
            case 'logs': this.renderLogs(); break;
        }
    }

    renderOverview() {
        const content = document.getElementById('mainContent');
        const recentErrors = this.data.errors.slice(0, 5);
        const recentTests = this.data.tests.slice(0, 4);
        const avgPerformance = this.calculateAvgPerformance();

        content.innerHTML = `
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                </div>
                <div class="grid">
                    <div class="health-item healthy">
                        <div class="metric-value">${this.data.performance.length}</div>
                        <div class="metric-label">–ú–µ—Ç—Ä–∏–∫ —Å–æ–±—Ä–∞–Ω–æ</div>
                    </div>
                    <div class="health-item ${this.data.errors.length > 0 ? 'unhealthy' : 'healthy'}">
                        <div class="metric-value">${this.data.errors.length}</div>
                        <div class="metric-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫</div>
                    </div>
                    <div class="health-item healthy">
                        <div class="metric-value">${this.data.tests.filter(t => t.status === 'passed').length}</div>
                        <div class="metric-label">–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ</div>
                    </div>
                    <div class="health-item">
                        <div class="metric-value">${avgPerformance}</div>
                        <div class="metric-label">–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ (–º—Å)</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏</h3>
                </div>
                <div class="list">
                    ${recentErrors.map(error => `
                        <div class="list-item severity-${error.severity}">
                            <div class="error-message">${error.message}</div>
                            <div class="error-meta">${new Date(error.timestamp).toLocaleString()} ‚Ä¢ ${error.url}</div>
                        </div>
                    `).join('')}
                    ${recentErrors.length === 0 ? '<div class="loading">–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚úÖ</div>' : ''}
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üß™ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ—Å—Ç—ã</h3>
                </div>
                <div class="list">
                    ${recentTests.map(test => `
                        <div class="list-item">
                            <div class="error-message">
                                ${test.testName} 
                                <span style="color: ${test.status === 'passed' ? 'var(--success)' : 'var(--error)'};">
                                    ${test.status === 'passed' ? '‚úÖ' : '‚ùå'}
                                </span>
                            </div>
                            <div class="error-meta">${test.browser} ‚Ä¢ ${test.duration}–º—Å ‚Ä¢ ${new Date(test.timestamp).toLocaleString()}</div>
                        </div>
                    `).join('')}
                    ${recentTests.length === 0 ? '<div class="loading">–¢–µ—Å—Ç—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã</div>' : ''}
                </div>
                <button class="btn btn-primary" onclick="dashboard.runTests()" style="margin-top: 1rem;">–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã</button>
            </div>
        `;
    }

    renderPerformance() {
        const content = document.getElementById('mainContent');
        const recent = this.data.performance.slice(0, 20);
        
        content.innerHTML = `
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">‚ö° –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                    <button class="btn btn-secondary" onclick="dashboard.refreshData()">–û–±–Ω–æ–≤–∏—Ç—å</button>
                </div>
                <div class="grid">
                    <div class="health-item">
                        <div class="metric-value">${this.calculateAvg(recent, 'pageLoadTime')}</div>
                        <div class="metric-label">–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ (–º—Å)</div>
                    </div>
                    <div class="health-item">
                        <div class="metric-value">${this.calculateAvg(recent, 'firstContentfulPaint')}</div>
                        <div class="metric-label">–°—Ä–µ–¥–Ω–∏–π FCP (–º—Å)</div>
                    </div>
                    <div class="health-item">
                        <div class="metric-value">${this.calculateAvg(recent, 'largestContentfulPaint')}</div>
                        <div class="metric-label">–°—Ä–µ–¥–Ω–∏–π LCP (–º—Å)</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                </div>
                <div class="chart">
                    –ì—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${recent.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h3>
                </div>
                <div class="list">
                    ${recent.map(metric => `
                        <div class="list-item">
                            <div class="error-message">${metric.url}</div>
                            <div class="error-meta">
                                –ó–∞–≥—Ä—É–∑–∫–∞: ${metric.pageLoadTime}–º—Å ‚Ä¢ 
                                FCP: ${metric.firstContentfulPaint}–º—Å ‚Ä¢ 
                                LCP: ${metric.largestContentfulPaint}–º—Å ‚Ä¢ 
                                ${new Date(metric.timestamp).toLocaleString()}
                            </div>
                        </div>
                    `).join('')}
                    ${recent.length === 0 ? '<div class="loading"><div class="spinner"></div> –ó–∞–≥—Ä—É–∑–∫–∞...</div>' : ''}
                </div>
            </div>
        `;
    }

    renderErrors() {
        const content = document.getElementById('mainContent');
        const critical = this.data.errors.filter(e => e.severity === 'critical');
        const recent = this.data.errors.slice(0, 20);
        
        content.innerHTML = `
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üö® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫</h3>
                    <button class="btn btn-secondary" onclick="dashboard.clearErrors()">–û—á–∏—Å—Ç–∏—Ç—å</button>
                </div>
                <div class="grid">
                    <div class="health-item ${critical.length > 0 ? 'unhealthy' : 'healthy'}">
                        <div class="metric-value">${critical.length}</div>
                        <div class="metric-label">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö</div>
                    </div>
                    <div class="health-item">
                        <div class="metric-value">${this.data.errors.filter(e => e.severity === 'high').length}</div>
                        <div class="metric-label">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</div>
                    </div>
                    <div class="health-item">
                        <div class="metric-value">${this.data.errors.filter(e => e.resolved).length}</div>
                        <div class="metric-label">–†–µ—à–µ–Ω–Ω—ã—Ö</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üìã –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫</h3>
                </div>
                <div class="list">
                    ${recent.map(error => `
                        <div class="list-item severity-${error.severity}">
                            <div class="error-message">
                                ${error.message}
                                ${error.resolved ? '<span style="color: var(--success);">‚úÖ</span>' : ''}
                            </div>
                            <div class="error-meta">
                                ${error.type} ‚Ä¢ ${error.severity} ‚Ä¢ ${error.occurrences || 1} —Ä–∞–∑(–∞) ‚Ä¢ 
                                ${new Date(error.timestamp).toLocaleString()}
                            </div>
                        </div>
                    `).join('')}
                    ${recent.length === 0 ? '<div class="loading">–û—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ‚úÖ</div>' : ''}
                </div>
            </div>
        `;
    }

    renderTests() {
        const content = document.getElementById('mainContent');
        const recent = this.data.tests.slice(0, 10);
        const passed = recent.filter(t => t.status === 'passed').length;
        const failed = recent.filter(t => t.status === 'failed').length;
        
        content.innerHTML = `
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üß™ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                    <div>
                        <button class="btn btn-primary" onclick="dashboard.runTests()">–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ</button>
                        <button class="btn btn-secondary" onclick="dashboard.runCriticalTests()">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ</button>
                    </div>
                </div>
                <div class="grid">
                    <div class="health-item ${passed > failed ? 'healthy' : 'unhealthy'}">
                        <div class="metric-value">${passed}</div>
                        <div class="metric-label">–ü—Ä–æ–π–¥–µ–Ω–æ</div>
                    </div>
                    <div class="health-item ${failed === 0 ? 'healthy' : 'unhealthy'}">
                        <div class="metric-value">${failed}</div>
                        <div class="metric-label">–ü—Ä–æ–≤–∞–ª–µ–Ω–æ</div>
                    </div>
                    <div class="health-item">
                        <div class="metric-value">${this.calculateAvg(recent, 'duration')}</div>
                        <div class="metric-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h3>
                </div>
                <div class="list">
                    ${recent.map(test => `
                        <div class="list-item">
                            <div class="error-message">
                                ${test.testName} 
                                <span style="color: ${test.status === 'passed' ? 'var(--success)' : 'var(--error)'};">
                                    ${test.status === 'passed' ? '‚úÖ' : '‚ùå'}
                                </span>
                            </div>
                            <div class="error-meta">
                                ${test.browser} ‚Ä¢ ${test.duration}–º—Å ‚Ä¢ ${new Date(test.timestamp).toLocaleString()}
                            </div>
                        </div>
                    `).join('')}
                    ${recent.length === 0 ? '<div class="loading">–¢–µ—Å—Ç—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å</div>' : ''}
                </div>
            </div>
        `;
    }

    renderSystem() {
        const content = document.getElementById('mainContent');
        content.innerHTML = `
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üíª –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</h3>
                    <button class="btn btn-secondary" onclick="dashboard.checkSystemHealth()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                </div>
                <div class="grid">
                    <div class="health-item healthy">
                        <div class="metric-value">‚úÖ</div>
                        <div class="metric-label">–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä</div>
                    </div>
                    <div class="health-item healthy">
                        <div class="metric-value">‚úÖ</div>
                        <div class="metric-label">–°–µ—Ä–≤–µ—Ä –æ—Ç–ª–∞–¥–∫–∏</div>
                    </div>
                    <div class="health-item healthy">
                        <div class="metric-value">‚úÖ</div>
                        <div class="metric-label">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</div>
                    </div>
                    <div class="health-item healthy">
                        <div class="metric-value">‚úÖ</div>
                        <div class="metric-label">WebSocket</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h3>
                </div>
                <div class="chart">
                    –ó–∞–≥—Ä—É–∑–∫–∞ CPU, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                </div>
            </div>
        `;
    }

    renderLogs() {
        const content = document.getElementById('mainContent');
        content.innerHTML = `
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üìù –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</h3>
                    <button class="btn btn-secondary" onclick="dashboard.clearLogs()">–û—á–∏—Å—Ç–∏—Ç—å</button>
                </div>
                <div class="logs" id="logsContainer">
                    ${this.data.logs.map(log => `<div class="log-entry">[${log.timestamp}] ${log.level}: ${log.message}</div>`).join('')}
                    ${this.data.logs.length === 0 ? '–õ–æ–≥–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...' : ''}
                </div>
            </div>
        `;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    calculateAvg(arr, prop) {
        if (arr.length === 0) return 0;
        return Math.round(arr.reduce((sum, item) => sum + item[prop], 0) / arr.length);
    }

    calculateAvgPerformance() {
        if (this.data.performance.length === 0) return 0;
        return this.calculateAvg(this.data.performance.slice(0, 10), 'pageLoadTime');
    }

    showAlert(type, message) {
        const alert = document.createElement('div');
        alert.className = `alert ${type}`;
        alert.textContent = message;
        document.body.appendChild(alert);

        setTimeout(() => {
            alert.style.opacity = '0';
            setTimeout(() => alert.remove(), 300);
        }, 5000);
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    async runTests() {
        this.showAlert('info', '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
        if (this.socket) {
            this.socket.emit('run-manual-test', { type: 'all' });
        }
    }

    async runCriticalTests() {
        this.showAlert('info', '–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...');
        if (this.socket) {
            this.socket.emit('run-manual-test', { type: 'critical' });
        }
    }

    async refreshData() {
        this.showAlert('info', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
        this.fetchData();
    }

    async fetchData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            const responses = await Promise.all([
                fetch('http://localhost:3001/api/metrics/performance'),
                fetch('http://localhost:3001/api/metrics/errors'),
                fetch('http://localhost:3001/api/tests/results'),
                fetch('http://localhost:3001/api/system/health')
            ]);

            if (responses.every(r => r.ok)) {
                const [performance, errors, tests, system] = await Promise.all(
                    responses.map(r => r.json())
                );

                this.data.performance = performance || [];
                this.data.errors = errors || [];
                this.data.tests = tests || [];
                this.data.system = system || {};

                // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
                this.loadSection(this.currentSection);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    clearErrors() {
        this.data.errors = [];
        this.renderErrors();
        this.showAlert('success', '–û—à–∏–±–∫–∏ –æ—á–∏—â–µ–Ω—ã');
    }

    clearLogs() {
        this.data.logs = [];
        this.renderLogs();
        this.showAlert('success', '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
    }

    async checkSystemHealth() {
        this.showAlert('info', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...');
        // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        setTimeout(() => {
            this.showAlert('success', '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        }, 2000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dashboard
const dashboard = new DashboardManager();